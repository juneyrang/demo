using System;
using System.Linq;
using Windows.UI.Xaml;
using Windows.UI.Xaml.Controls;
using Windows.Devices.Bluetooth.GenericAttributeProfile;
using Windows.Devices.Enumeration;
using Windows.Devices.Bluetooth;
using Windows.Devices.Bluetooth.GenericAttributeProfile;
using Windows.Storage.Streams;

// The Blank Page item template is documented at http://go.microsoft.com/fwlink/?LinkId=402352&clcid=0x409

namespace nrf_Bluetooth
{
    /// <summary>
    /// An empty page that can be used on its own or navigated to within a Frame.
    /// </summary>
    public sealed partial class MainPage : Page
    {
        GattDeviceService nrfService;
        GattCharacteristic writeCharacteristic;
        GattCharacteristic readCharacteristic;

        public MainPage()
        {
            this.InitializeComponent();
        }

        private async void RunButton_Click(object sender, RoutedEventArgs e)
        {
            RunButton.IsEnabled = false;

            // UART Service UUID: 6E400001-B5A3-F393-E0A9-E50E24DCCA9E
            // TX Characteristic UUID: 6E400002-B5A3-F393-E0A9-E50E24DCCA9E
            // RX Characteristic UUID: 6E400003-B5A3-F393-E0A9-E50E24DCCA9E
            var devices = await DeviceInformation.FindAllAsync(GattDeviceService.GetDeviceSelectorFromUuid(new Guid("6E400001-B5A3-F393-E0A9-E50E24DCCA9E")));

             DevicesListBox.Items.Clear();

             if (devices.Count > 0)
             {
                foreach (var device in devices)
                {
                   DevicesListBox.Items.Add(device);
                }
                DevicesListBox.Visibility = Visibility.Visible;
             }
             else
             {
                 bleInfoTextBlock.Text = "Could not find any devices";
             }
            RunButton.IsEnabled = true;
        }

        private async void DevicesListBox_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            RunButton.IsEnabled = false;

            var device = DevicesListBox.SelectedItem as DeviceInformation;
            DevicesListBox.Visibility = Visibility.Collapsed;

            nrfService = await GattDeviceService.FromIdAsync(device.Id);
            writeCharacteristic = nrfService.GetCharacteristics(new Guid("6E400002-B5A3-F393-E0A9-E50E24DCCA9E"))[0];
            readCharacteristic = nrfService.GetCharacteristics(new Guid("6E400003-B5A3-F393-E0A9-E50E24DCCA9E"))[0];

            if (nrfService != null)
            {
                bleInfoTextBlock.Text = "Using service Id: " + nrfService.DeviceId;

                readCharacteristic.ValueChanged += incomingData_ValueChanged;
                await readCharacteristic.WriteClientCharacteristicConfigurationDescriptorAsync(GattClientCharacteristicConfigurationDescriptorValue.Notify);

            }
            else
            {
                bleInfoTextBlock.Text = "Error: gattService is null";
            }
        }

        // Read data change handler
        async void incomingData_ValueChanged(GattCharacteristic sender, GattValueChangedEventArgs eventArgs)
        {
            byte[] bArray = new byte[eventArgs.CharacteristicValue.Length];
            DataReader.FromBuffer(eventArgs.CharacteristicValue).ReadBytes(bArray);

            string message = System.Text.Encoding.UTF8.GetString(bArray);

            await Dispatcher.RunAsync(Windows.UI.Core.CoreDispatcherPriority.Normal, () =>
            {
                receiveTextBox.Text = message;
            });
        }

        private async void Write_Button_Click(object sender, RoutedEventArgs e)
        {
            var writer = new DataWriter();
            writer.WriteString(writeMessageBox.Text + "\r\n");

            try
            {
                var res = await writeCharacteristic.WriteValueAsync(writer.DetachBuffer(), GattWriteOption.WriteWithoutResponse);
                messageWriteResponse.Text = res.ToString();
            }
            catch (Exception ex)
            {
                messageWriteResponse.Text = "Message too long, keep under 20 chars";
            }
        }

        private async void LED_On_Click(object sender, RoutedEventArgs e)
        {
            var writer = new DataWriter();
            writer.WriteString("1\r\n");

            try
            {
                var res = await writeCharacteristic.WriteValueAsync(writer.DetachBuffer(), GattWriteOption.WriteWithoutResponse);
                messageWriteResponse.Text = res.ToString();
            }
            catch (Exception ex)
            {
                messageWriteResponse.Text = "Turn on LED failed: " + ex;
            }
        }

        private async void LED_Off_Click(object sender, RoutedEventArgs e)
        {
            var writer = new DataWriter();
            writer.WriteString("0\r\n");

            try
            {
                var res = await writeCharacteristic.WriteValueAsync(writer.DetachBuffer(), GattWriteOption.WriteWithoutResponse);
                messageWriteResponse.Text = res.ToString();
            }
            catch (Exception ex)
            {
                messageWriteResponse.Text = "Turn off LED failed: " + ex;
            }
        }

        //private void menuopen_click(object sender, routedeventargs e)
        //{
        //    splitview.ispaneopen = !splitview.ispaneopen;
        //}
    }
}




using System;
using System.IO;
using System.Runtime.InteropServices.WindowsRuntime;
using System.Threading.Tasks;
using Windows.Devices.Bluetooth;
using Windows.Devices.Bluetooth.Advertisement;
using Windows.Devices.Bluetooth.GenericAttributeProfile;

namespace gatt_client
{
    class Program
    {
        static void Main(string[] args)
        {
            Task.Run(AsyncMain).Wait();
        }

        static async Task AsyncMain()
        {
            var deviceName = "여기에 장치 이름을 넣는 것";
            try
            {
                //광고 검색
                var watcher = new BluetoothLEAdvertisementWatcher();
                ulong btaddr = 0;

                watcher.Received += (BluetoothLEAdvertisementWatcher sender, BluetoothLEAdvertisementReceivedEventArgs args) =>
                {
                    //감지시 콜백
                    Console.WriteLine("+ " + args.Advertisement.LocalName);
                    if (args.Advertisement.LocalName == deviceName)
                    {
                    //기기 찾기
                    Console.WriteLine("Found: " + args.BluetoothAddress);
                        btaddr = args.BluetoothAddress;
                    }
                };
                watcher.ScanningMode = BluetoothLEScanningMode.Active;
                watcher.Start();

                Console.WriteLine("Scan Start.");

                //5초간 스캔
                await Task.Delay(5000);
                watcher.Stop();

                Console.WriteLine("Scan Stop.");

                if (btaddr == 0)
                {
                    Console.WriteLine("Not found.");
                    return;
                }

                //기기에 연결
                Console.WriteLine("Connect...");
                var device = await BluetoothLEDevice.FromBluetoothAddressAsync(btaddr);


                //UUID에서 서비스 얻기
                Console.Write("Service: ");
                var services = await device.GetGattServicesForUuidAsync(new Guid("00000000-0000-4000-A000-000000000000"));
                Console.WriteLine(services.Status);

                //UUID에서 Characteristic 얻기
                Console.Write("Characteristic: ");
                var characteristics = await services.Services[0].GetCharacteristicsForUuidAsync(new Guid("00000000-0000-4000-A000-000000000001"));
                Console.WriteLine(characteristics.Status);

                var c = characteristics.Characteristics[0];

                //알림을 받을 콜백 설정
                c.ValueChanged += (GattCharacteristic sender, GattValueChangedEventArgs args) =>
                {
                    Console.Write("Notify: ");
                    var streamNotify = args.CharacteristicValue.AsStream();
                    PrintFromStream(streamNotify);
                };
                //알림 구독 등록
                await c.WriteClientCharacteristicConfigurationDescriptorAsync(GattClientCharacteristicConfigurationDescriptorValue.Notify);

                //간단한 값 로드
                Console.Write("Read: ");
                var d = await c.ReadValueAsync();
                var streamRead = d.Value.AsStream();
                PrintFromStream(streamRead);

                //간단한 값 쓰기
                Console.WriteLine("Write");
                await c.WriteValueAsync(new byte[1] { 0xAA }.AsBuffer());


                //60초 기다린다(알림이 날아올 것)
                await Task.Delay(60*1000);

                //개방하면 자동으로 절단된다
            }
            catch (Exception e) {
                Console.WriteLine(e);
            }
        }

        static void PrintFromStream(Stream s)
        {
            //1byte씩 로드하여 표시
            int d = 0;
            while ((d = s.ReadByte()) != -1)
            {
                Console.Write(d.ToString("X"));
                Console.Write(",");
            }
            Console.WriteLine();
        }

    }
}




32피트.NET. PC와 장치를 어떻게 페어링하나요?
질문:
PC와 장치 페어링이 필요한 Windows Form 응용 프로그램을 개발 중입니다.
현재는 기기를 켜고 프로그램을 실행한 뒤 블루투스 연결을 위한 기기를 추가한 뒤 연결 버튼을 누르면 프로그램이 작동된다.
이 기능을 달성하기 위해 다음 기능을 활용하고 있습니다.

public BluetoothClient client = new BluetoothClient();
public string selectedItem { get; set; }
public BluetoothDeviceInfo[] AllDevices;
public void GetDevices()
{
	AllDevices = client.DiscoverDevicesInRange();
	foreach (BluetoothDeviceInfo Device in AllDevices)
	{
		if(Device.DeviceName.Contains("Kortes"))
			onSetDevices(Device.DeviceName); // event to get device name and add it to ComoBox element on form
	}
	onSetProgress(); // event, that all devices were found, set progress bar and etc.
}
public void GoConnect()
{
	foreach (BluetoothDeviceInfo Device in AllDevices)
	{
		if (Device.DeviceName.Equals(selectedItem)) // item from ComboBox
		{
			if (!client.Connected)
				client = new BluetoothClient();
			client.BeginConnect(Device.DeviceAddress, Device.InstalledServices[0], this.BluetoothClientConnectCallback, client);
			break;
		}
		else
		{
			MessageBox.Show("Choose the device");
		}
	}
}
private void BluetoothClientConnectCallback(IAsyncResult ar)
{
	//Have no problem with this
}
필요한 장치를 찾고 연결하는 기능은 효율적으로 수행되지만 해결해야 할 문제가 있습니다.
기능을 사용하기 전에 운영 체제의 Bluetooth 장치에 장치를 추가하고 PIN 코드를 삽입해야 합니다.
이 장애물을 극복하기 위해 코드를 어떻게 수정할 수 있습니까?

장치를 추가하는 대신 직접 작업하는 것을 선호합니다.
프로그래밍 방식으로 PIN 코드를 입력할 수 있는 방법이 있습니까?
프로그램은 다음 순서를 따라야 합니다.
장치를 켜고 프로그램을 시작한 다음 연결 버튼을 클릭합니다.


해결책:

페어링이 되지 않아 연결 설정 시도가 실패했습니다.
코드가 작동하지 않는 이유는 연결하기 전에 페어링이 필요하기 때문입니다.

바꾸다
client = new BluetoothClient();
client.BeginConnect(Device.DeviceAddress, Device.InstalledServices[0], this.BluetoothClientConnectCallback, client);
BluetoothSecurity.PairRequest(Device.DeviceAddress,"123456");

보다 포괄적인 설명을 보려면 http://mrbikash.com/bluetooth-discovery-pairing-32feet-net/#pairing을 방문하세요.




https://www.c-sharpcorner.com/UploadFile/3789b7/how-to-send-data-through-bluetooth-in-a-wpf-application-usin/

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Security.Cryptography;
using System.IO;

class Program
{
    /*
     *  예를 들어 키는 57616C6B697A3532383332694C6F636B 입니다.Walkiz52832iLock
        토큰을 얻기 위한 일반 텍스트 명령은 다음과 같습니다. 030000000000000000000000000000000
        암호화된 버전은 39E1CBB7EFC7127DE387EDF4A0075D66 입니다
                       39e1cbb7efc7127de387edf4a0075d66


        5.	잠금해제
        예를 들어 키는 57616C6B697A3532383332694C6F636B 입니다.
        예를 들어 잠금 해제 비밀번호는 313130303634 입니다.
        예를 들어 토큰은 AB568E21 입니다.
        잠금을 해제하는 일반 텍스트 명령은 다음과 같습니다.
        200031313030363400000000AB568E21
        암호화된버전은 70E8CDAD64B0E3061FA5ACB22EE52AA0 입니다
     */
    static byte[] KeyArray = { 0x57,0x61,0x6C,0x6B,0x69,0x7A,0x35,0x32,0x38,0x33,0x32,0x69,0x4C,0x6F,0x63,0x6B };
    public static void Main()
    {
        // See https://aka.ms/new-console-template for more information
        Console.WriteLine("Hello, World!!!");

        byte[] src = { 0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
        string srcStr = "03006C000000007A0000000000000000";

        //Test test = new(src);

        Encryption svc = new(src);

        Console.WriteLine($"key ===> {UTF8Encoding.UTF8.GetString(KeyArray)}");
        Console.WriteLine($"Encrypt ===> {Encrypt(srcStr)}");
        Console.WriteLine($"Decrypt ===> {Decrypt(Encrypt(srcStr))}");

        String s = "TEST08";
        Console.WriteLine($"[40] ===> {Encrypt(s)}");
        Console.WriteLine($"[41] ===> {Decrypt(Encrypt(s))}");
        /*
        */
    }

    private static string Encrypt(byte[] EncryptArray)
    {
        RijndaelManaged Rdel = new RijndaelManaged();
        Rdel.Mode = CipherMode.ECB;
        Rdel.Padding = PaddingMode.Zeros;
        Rdel.Key = KeyArray;

        ICryptoTransform CtransForm = Rdel.CreateEncryptor();
        byte[] ResultArray = CtransForm.TransformFinalBlock(EncryptArray, 0, EncryptArray.Length);
        Console.WriteLine($"[59] ===> {Decrypt(ResultArray)}");

        return ByteToHex(ResultArray);
    }

    private static string Encrypt(string s)
    {
        StringBuilder sbResult = new StringBuilder();

        byte[] EncryptArray = UTF8Encoding.UTF8.GetBytes(s);

        RijndaelManaged Rdel = new RijndaelManaged();
        Rdel.Mode = CipherMode.ECB;
        Rdel.Padding = PaddingMode.Zeros;
        Rdel.Key = KeyArray;

        ICryptoTransform CtransForm = Rdel.CreateEncryptor();
        byte[] ResultArray = CtransForm.TransformFinalBlock(EncryptArray, 0, EncryptArray.Length);

        foreach (byte b in ResultArray)
        {
            sbResult.AppendFormat("{0:x2}", b);
        }

        return sbResult.ToString();
    }

    private static string Decrypt(string EncryptStr)
    {
        byte[] EncryptArray = HexToByte(EncryptStr);

        RijndaelManaged Rdel = new RijndaelManaged();
        Rdel.Mode = CipherMode.ECB;
        Rdel.Padding = PaddingMode.Zeros;
        Rdel.Key = KeyArray;

        ICryptoTransform CtransForm = Rdel.CreateDecryptor();
        byte[] ResultArray = CtransForm.TransformFinalBlock(EncryptArray, 0, EncryptArray.Length);
        return UTF8Encoding.UTF8.GetString(ResultArray);
    }

    private static string Decrypt(byte[] EncryptArray)
    {
        try
        {
            RijndaelManaged Rdel = new RijndaelManaged();
            Rdel.Mode = CipherMode.ECB;
            Rdel.Padding = PaddingMode.Zeros;
            Rdel.Key = KeyArray;

            ICryptoTransform CtransForm = Rdel.CreateDecryptor();
            byte[] ResultArray = CtransForm.TransformFinalBlock(EncryptArray, 0, EncryptArray.Length);
            return UTF8Encoding.UTF8.GetString(ResultArray);
        }
        catch (System.Exception ex)
        {
            Console.WriteLine($"ex ===> {ex}");
        }
        return null;
    }

    private static byte[] HexToByte(string msg)
    {
        msg = msg.Replace(" ", "");
        byte[] comBuffer = new byte[msg.Length / 2];
        for(int i = 0; i < msg.Length; i+=2)
        {
            try
            {
                comBuffer[i / 2] = (byte)Convert.ToByte(msg.Substring(i, 2), 16);
            }
            catch(ArgumentOutOfRangeException ex)
            {
                Console.WriteLine(ex.ToString());
            }
        }
        return comBuffer;
    }

    private static String ByteToHex(byte[] ResultArray)
    {
        StringBuilder sbResult = new StringBuilder();
        foreach (byte b in ResultArray)
        {
            sbResult.AppendFormat("{0:x2}", b);
        }

        return sbResult.ToString();
    }

    private static string Encrypt(string s, string key)
    {
        StringBuilder sbResult = new StringBuilder();

        byte[] KeyArray = UTF8Encoding.UTF8.GetBytes(key);
        byte[] EncryptArray = UTF8Encoding.UTF8.GetBytes(s);

        RijndaelManaged Rdel = new RijndaelManaged();
        Rdel.Mode = CipherMode.ECB;
        Rdel.Padding = PaddingMode.Zeros;
        Rdel.Key = KeyArray;

        ICryptoTransform CtransForm = Rdel.CreateEncryptor();
        byte[] ResultArray = CtransForm.TransformFinalBlock(EncryptArray, 0, EncryptArray.Length);

        foreach (byte b in ResultArray)
        {
            sbResult.AppendFormat("{0:x2}", b);
        }

        return sbResult.ToString();
    }

    private static string Decrypt(string s, string key)
    {
        byte[] KeyArray = UTF8Encoding.UTF8.GetBytes(key);
        byte[] EncryptArray = HexToByte(s);

        RijndaelManaged Rdel = new RijndaelManaged();
        Rdel.Mode = CipherMode.ECB;
        Rdel.Padding = PaddingMode.Zeros;
        Rdel.Key = KeyArray;

        ICryptoTransform CtransForm = Rdel.CreateDecryptor();
        byte[] ResultArray = CtransForm.TransformFinalBlock(EncryptArray, 0, EncryptArray.Length);
        return UTF8Encoding.UTF8.GetString(ResultArray);
    }

}


using System.Text;
using System.Security.Cryptography;

class Test
{
    private byte[] KeyArray = { 0x57,0x61,0x6C,0x6B,0x69,0x7A,0x35,0x32,0x38,0x33,0x32,0x69,0x4C,0x6F,0x63,0x6B };

	public Test(byte[] EncryptArray)
	{
        Console.WriteLine($"Test Start");

        Console.WriteLine($"Encrypt : {ByteToHex(Encrypt(EncryptArray))}");
        Console.WriteLine($"Decrypt : {ByteToHex(Decrypt(Encrypt(EncryptArray)))}");

        Console.WriteLine($"Test End");
	}

    private byte[] Encrypt(byte[] EncryptArray)
    {
        RijndaelManaged Rdel = new RijndaelManaged();
        Rdel.Mode = CipherMode.ECB;
        Rdel.Padding = PaddingMode.Zeros;
        Rdel.KeySize = 128;
        Rdel.Key = KeyArray;

        ICryptoTransform CtransForm = Rdel.CreateEncryptor();
        byte[] ResultArray = CtransForm.TransformFinalBlock(EncryptArray, 0, EncryptArray.Length);

        return ResultArray;
        //return ByteToHex(ResultArray);
    }

    private byte[] Decrypt(byte[] DecryptArray)
    {
        RijndaelManaged Rdel = new RijndaelManaged();
        Rdel.Mode = CipherMode.ECB;
        Rdel.Padding = PaddingMode.Zeros;
        Rdel.KeySize = 128;
        Rdel.Key = KeyArray;

        ICryptoTransform CtransForm = Rdel.CreateDecryptor();
        byte[] ResultArray = CtransForm.TransformFinalBlock(DecryptArray, 0, DecryptArray.Length);
        return ResultArray;
        //return UTF8Encoding.UTF8.GetString(ResultArray);
    }

    private byte[] HexToByte(string msg)
    {
        msg = msg.Replace(" ", "");
        byte[] comBuffer = new byte[msg.Length / 2];
        for(int i = 0; i < msg.Length; i+=2)
        {
            try
            {
                comBuffer[i / 2] = (byte)Convert.ToByte(msg.Substring(i, 2), 16);
            }
            catch(ArgumentOutOfRangeException ex)
            {
                Console.WriteLine(ex.ToString());
            }
        }
        return comBuffer;
    }

    private String ByteToHex(byte[] ResultArray)
    {
        StringBuilder sbResult = new StringBuilder();
        foreach (byte b in ResultArray)
        {
            sbResult.AppendFormat("{0:x2}", b);
        }

        return sbResult.ToString();
    }

}



using System.Text;
using System.Security.Cryptography;

public class Encryption
{
    private string keyStr = "57616C6B697A3532383332694C6F636B";
	private byte[] key = { 0x57,0x61,0x6C,0x6B,0x69,0x7A,0x35,0x32,0x38,0x33,0x32,0x69,0x4C,0x6F,0x63,0x6B };

	public Encryption(byte[] EncryptArray)
	{
        Console.WriteLine($"Encryption Start");
		// key here
		byte[] keyArray = HexToByte(keyStr);

        /*
        Console.WriteLine($"AesEncrypt : { ByteToHex(EncryptArray)}");
        Console.WriteLine($"AesEncrypt : { HexToByte(ByteToHex(EncryptArray))}");
        Console.WriteLine($"keyStr : {ByteToHex(keyArray)}");
        Console.WriteLine($"keyStr : {HexToByte(ByteToHex(keyArray))}");
        Console.WriteLine($"AesEncrypt : {UTF8Encoding.UTF8.GetString(key)}");
        */

        /*
        string encStr = ByteToHex(Encrypt(EncryptArray, keyArray));
        string decStr = ByteToHex(Decrypt(Encrypt(EncryptArray, keyArray), keyArray));
        Console.WriteLine($"AesEncrypt : {encStr}");
        Console.WriteLine($"AesDecrypt : {decStr}");

        string encStr = Encrypt(ByteToHex(EncryptArray), key);
        string decStr = Decrypt(Encrypt(ByteToHex(EncryptArray), key), key);
        */

        string encStr = Encrypt(ByteToHex(EncryptArray), key);
        string decStr = Decrypt(Encrypt(ByteToHex(EncryptArray), key), key);
        Console.WriteLine($"AesEncrypt : {encStr}");
        Console.WriteLine($"AesDecrypt : {decStr}");

        Console.WriteLine($"Encryption End");
	}

    /*
	public byte[] Encrypt(byte[] data, byte[] key)
    {
        using (var aes = Aes.Create())
        {
            aes.KeySize = 128;
            aes.BlockSize = 128;
            aes.Padding = PaddingMode.Zeros;

            aes.Key = key;

            using (var encryptor = aes.CreateEncryptor(aes.Key, aes.IV))
            {
                return PerformCryptography(data, encryptor);
            }
        }
    }

    public byte[] Decrypt(byte[] data, byte[] key)
    {
        using (var aes = Aes.Create())
        {
            aes.KeySize = 128;
            aes.BlockSize = 128;
            aes.Padding = PaddingMode.Zeros;

            aes.Key = key;

            using (var decryptor = aes.CreateDecryptor(aes.Key, aes.IV))
            {
                return PerformCryptography(data, decryptor);
            }
        }
    }

    private byte[] PerformCryptography(byte[] data, ICryptoTransform cryptoTransform)
    {
        using (var ms = new MemoryStream())
        using (var cryptoStream = new CryptoStream(ms, cryptoTransform, CryptoStreamMode.Write))
        {
            cryptoStream.Write(data, 0, data.Length);
            cryptoStream.FlushFinalBlock();

            return ms.ToArray();
        }
    }
    */

    public string Decrypt(byte[] encryptedData, byte[] keyBytes)
    {
        RijndaelManaged rijndaelCipher = new RijndaelManaged();
        rijndaelCipher.Mode = CipherMode.ECB;
        rijndaelCipher.Padding = PaddingMode.Zeros;

        rijndaelCipher.KeySize = 128;
        rijndaelCipher.BlockSize = 128;
        //byte[] encryptedData = Convert.FromBase64String(textToDecrypt);
        /*
        byte[] pwdBytes = Encoding.UTF8.GetBytes(key);
        byte[] keyBytes = new byte[16];
        int len = pwdBytes.Length;
        if (len > keyBytes.Length)
        {
            len = keyBytes.Length;
        }
        Array.Copy(pwdBytes, keyBytes, len);
        */
        rijndaelCipher.Key = keyBytes;
        rijndaelCipher.IV = keyBytes;
        byte[] plainText = rijndaelCipher.CreateDecryptor().TransformFinalBlock(encryptedData, 0, encryptedData.Length);
        return Encoding.UTF8.GetString(plainText);
    }

    public string Encrypt(byte[] textToEncrypt, byte[] keyBytes)
    {
        RijndaelManaged rijndaelCipher = new RijndaelManaged();
        rijndaelCipher.Mode = CipherMode.ECB;
        rijndaelCipher.Padding = PaddingMode.Zeros;

        rijndaelCipher.KeySize = 128;
        rijndaelCipher.BlockSize = 128;
        /*
        byte[] pwdBytes = Encoding.UTF8.GetBytes(key);
        byte[] keyBytes = new byte[16];
        int len = pwdBytes.Length;
        if (len > keyBytes.Length)
        {
            len = keyBytes.Length;
        }
        Array.Copy(pwdBytes, keyBytes, len);
        */
        rijndaelCipher.Key = keyBytes;
        rijndaelCipher.IV = keyBytes;
        ICryptoTransform transform = rijndaelCipher.CreateEncryptor();
        //byte[] plainText = Encoding.UTF8.GetBytes(textToEncrypt);
        return Convert.ToBase64String(transform.TransformFinalBlock(textToEncrypt, 0, textToEncrypt.Length));
    }

    private String ByteToHex(byte[] ResultArray)
    {
        StringBuilder sbResult = new StringBuilder();
        foreach (byte b in ResultArray)
        {
            sbResult.AppendFormat("{0:x2}", b);
        }

        return sbResult.ToString();
    }

    private byte[] HexToByte(string msg)
    {
        msg = msg.Replace(" ", "");
        byte[] comBuffer = new byte[msg.Length / 2];
        for(int i = 0; i < msg.Length; i+=2)
        {
            try
            {
                comBuffer[i / 2] = (byte)Convert.ToByte(msg.Substring(i, 2), 16);
            }
            catch(ArgumentOutOfRangeException ex)
            {
                Console.WriteLine(ex.ToString());
            }
        }
        return comBuffer;
    }

    public string Decrypt(string textToDecrypt, string key)
    {
        RijndaelManaged rijndaelCipher = new RijndaelManaged();
        rijndaelCipher.Mode = CipherMode.ECB;
        rijndaelCipher.Padding = PaddingMode.Zeros;

        rijndaelCipher.KeySize = 128;
        rijndaelCipher.BlockSize = 128;
        byte[] encryptedData = Convert.FromBase64String(textToDecrypt);
        byte[] pwdBytes = Encoding.UTF8.GetBytes(key);
        byte[] keyBytes = new byte[16];
        int len = pwdBytes.Length;
        if (len > keyBytes.Length)
        {
            len = keyBytes.Length;
        }
        Array.Copy(pwdBytes, keyBytes, len);
        rijndaelCipher.Key = keyBytes;
        rijndaelCipher.IV = keyBytes;
        byte[] plainText = rijndaelCipher.CreateDecryptor().TransformFinalBlock(encryptedData, 0, encryptedData.Length);
        return Encoding.UTF8.GetString(plainText);
    }

    public string Encrypt(string textToEncrypt, string key)
    {
        RijndaelManaged rijndaelCipher = new RijndaelManaged();
        rijndaelCipher.Mode = CipherMode.ECB;
        rijndaelCipher.Padding = PaddingMode.Zeros;

        rijndaelCipher.KeySize = 128;
        rijndaelCipher.BlockSize = 128;
        byte[] pwdBytes = Encoding.UTF8.GetBytes(key);
        byte[] keyBytes = new byte[16];
        int len = pwdBytes.Length;
        if (len > keyBytes.Length)
        {
            len = keyBytes.Length;
        }
        Array.Copy(pwdBytes, keyBytes, len);
        rijndaelCipher.Key = keyBytes;
        rijndaelCipher.IV = keyBytes;
        ICryptoTransform transform = rijndaelCipher.CreateEncryptor();
        byte[] plainText = Encoding.UTF8.GetBytes(textToEncrypt);
        Console.WriteLine($"Encrypt Key : {ByteToHex(keyBytes)}");
        Console.WriteLine($"AesEncrypt : {ByteToHex(transform.TransformFinalBlock(plainText, 0, plainText.Length))}");
        return Convert.ToBase64String(transform.TransformFinalBlock(plainText, 0, plainText.Length));
    }

    public string Decrypt(string textToDecrypt, byte[] keyBytes)
    {
        RijndaelManaged rijndaelCipher = new RijndaelManaged();
        rijndaelCipher.Mode = CipherMode.ECB;
        rijndaelCipher.Padding = PaddingMode.Zeros;

        rijndaelCipher.KeySize = 128;
        rijndaelCipher.BlockSize = 128;
        byte[] encryptedData = Convert.FromBase64String(textToDecrypt);
        /*
        byte[] pwdBytes = Encoding.UTF8.GetBytes(key);
        byte[] keyBytes = new byte[16];
        int len = pwdBytes.Length;
        if (len > keyBytes.Length)
        {
            len = keyBytes.Length;
        }
        Array.Copy(pwdBytes, keyBytes, len);
        */
        rijndaelCipher.Key = keyBytes;
        rijndaelCipher.IV = keyBytes;
        byte[] plainText = rijndaelCipher.CreateDecryptor().TransformFinalBlock(encryptedData, 0, encryptedData.Length);
        return Encoding.UTF8.GetString(plainText);
    }

    public string Encrypt(string textToEncrypt, byte[] keyBytes)
    {
        RijndaelManaged rijndaelCipher = new RijndaelManaged();
        rijndaelCipher.Mode = CipherMode.ECB;
        rijndaelCipher.Padding = PaddingMode.Zeros;

        rijndaelCipher.KeySize = 128;
        rijndaelCipher.BlockSize = 128;
        /*
        byte[] pwdBytes = Encoding.UTF8.GetBytes(key);
        byte[] keyBytes = new byte[16];
        int len = pwdBytes.Length;
        if (len > keyBytes.Length)
        {
            len = keyBytes.Length;
        }
        Array.Copy(pwdBytes, keyBytes, len);
        */
        rijndaelCipher.Key = keyBytes;
        rijndaelCipher.IV = keyBytes;
        ICryptoTransform transform = rijndaelCipher.CreateEncryptor();
        byte[] plainText = Encoding.UTF8.GetBytes(textToEncrypt);
        return Convert.ToBase64String(transform.TransformFinalBlock(plainText, 0, plainText.Length));
    }
}
