using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Security.Cryptography;
using System.IO;

namespace ConsoleApplication2
{
    class Program
    {
        static void Main(string[] args)
        {
            String s = "TEST08";
            String key = "nfaator!plaeemo!";
            Console.WriteLine(Encrypt(s, key));
            Console.WriteLine(Decrypt(Encrypt(s, key), key));
        }
        private static string Encrypt(string s, string key)
        {
            StringBuilder sbResult = new StringBuilder();

            byte[] KeyArray = UTF8Encoding.UTF8.GetBytes(key);
            byte[] EncryptArray = UTF8Encoding.UTF8.GetBytes(s);

            RijndaelManaged Rdel = new RijndaelManaged();
            Rdel.Mode = CipherMode.ECB;
            Rdel.Padding = PaddingMode.Zeros;
            Rdel.Key = KeyArray;

            ICryptoTransform CtransForm = Rdel.CreateEncryptor();
            byte[] ResultArray = CtransForm.TransformFinalBlock(EncryptArray, 0, EncryptArray.Length);

            foreach (byte b in ResultArray)
            {
                sbResult.AppendFormat("{0:x2}", b);
            }

            return sbResult.ToString();
        }

        private static string Decrypt(string s, string key)
        {
            byte[] KeyArray = UTF8Encoding.UTF8.GetBytes(key);
            byte[] EncryptArray = HexToByte(s);

            RijndaelManaged Rdel = new RijndaelManaged();
            Rdel.Mode = CipherMode.ECB;
            Rdel.Padding = PaddingMode.Zeros;
            Rdel.Key = KeyArray;

            ICryptoTransform CtransForm = Rdel.CreateDecryptor();
            byte[] ResultArray = CtransForm.TransformFinalBlock(EncryptArray, 0, EncryptArray.Length);
            return UTF8Encoding.UTF8.GetString(ResultArray);
        }

        private static byte[] HexToByte(string msg)
        {
            msg = msg.Replace(" ", "");
            byte[] comBuffer = new byte[msg.Length / 2];
            for(int i = 0; i < msg.Length; i+=2)
            {
                try
                {
                    comBuffer[i / 2] = (byte)Convert.ToByte(msg.Substring(i, 2), 16);
                }
                catch(ArgumentOutOfRangeException ex)
                {
                    Console.WriteLine(ex.ToString());
                }
            }
            return comBuffer;
        }

    }

}


package test;

import javax.crypto.Cipher;
import javax.crypto.KeyGenerator;
import javax.crypto.spec.SecretKeySpec;


public class FirstApp {

    public static void main(String[] args) throws Exception {
        // TODO Auto-generated method stub

        FirstApp f = new FirstApp();

        System.out.println(f.encrypt("TEST08"));

    }
    private final String KEYNAME = "nfaator!plaeemo!";
    private final String ALGORITHM = "AES";
    public static final String AES_ECB_NOPADDING = "AES/ECB/NoPadding";

    public String encrypt(final String source) throws Exception {
        byte[] eArr = null;
        SecretKeySpec skeySpec = new SecretKeySpec(KEYNAME.getBytes(), ALGORITHM);
        Cipher cipher = Cipher.getInstance(AES_ECB_NOPADDING);
        cipher.init(Cipher.ENCRYPT_MODE, skeySpec);
        eArr = cipher.doFinal(this.addPadding(source.getBytes()));
        return fromHex(eArr);
    }
    public byte[] encryptToByteArray(final String source) throws Exception {
        byte[] eArr = null;
        SecretKeySpec skeySpec = new SecretKeySpec(KEYNAME.getBytes(), ALGORITHM);
        Cipher cipher = Cipher.getInstance(AES_ECB_NOPADDING);
        cipher.init(Cipher.ENCRYPT_MODE, skeySpec);
        eArr = cipher.doFinal(this.addPadding(source.getBytes()));
        return eArr;
    }

    public String GetEncryptString(String source) throws Exception {
        StringBuilder sbResult = new StringBuilder();
        byte[] eArr = null;
        SecretKeySpec skeySpec = new SecretKeySpec(KEYNAME.getBytes(), ALGORITHM);
        Cipher cipher = Cipher.getInstance(AES_ECB_NOPADDING);
        cipher.init(Cipher.ENCRYPT_MODE, skeySpec);
        eArr = cipher.doFinal(this.addPadding(source.getBytes()));
        for (byte b : eArr) {
            sbResult.append(String.format("%02x", b));
        }
        return sbResult.toString();
    }
    public String decrypt(final String source) throws Exception {
        Cipher cipher = Cipher.getInstance(AES_ECB_NOPADDING);
        SecretKeySpec skeySpec = new SecretKeySpec(KEYNAME.getBytes(), ALGORITHM);
        cipher.init(Cipher.DECRYPT_MODE, skeySpec);
        byte[] eArr = this.removePadding(cipher.doFinal(this.toBytes(source)));
        return new String(eArr);
    }
    private byte[] removePadding(final byte[] pBytes) {
        int pCount = pBytes.length;
        int index = 0;
        boolean loop = true;
        while (loop) {
            if (index == pCount || pBytes[index] == 0x00) {
                loop = false;
                index--;
            }
            index++;
        }
        byte[] tBytes = new byte[index];
        System.arraycopy(pBytes, 0, tBytes, 0, index);
        return tBytes;
    }
    private byte[] toBytes(final String pSource) {
        StringBuffer buff = new StringBuffer(pSource);
        int bCount = buff.length() / 2;
        byte[] bArr = new byte[bCount];
        for (int bIndex = 0; bIndex < bCount; bIndex++) {
            bArr[bIndex] = (byte) Long.parseLong(buff.substring(2 * bIndex, (2 * bIndex) + 2), 16);
        }
        return bArr;
    }
    private byte[] addPadding(final byte[] pBytes) {
        int pCount = pBytes.length;
        int tCount = pCount + (16 - (pCount % 16));
        byte[] tBytes = new byte[tCount];
        System.arraycopy(pBytes, 0, tBytes, 0, pCount);
        for (int rIndex = pCount; rIndex < tCount; rIndex++) {
            tBytes[rIndex] = 0x00;
        }
        return tBytes;
    }
    public String fromHex(byte[] pBytes) {
        int pCount = pBytes.length;
        StringBuffer buff = new StringBuffer(pCount * 2);
        for (int pIndex = 0; pIndex < pCount; pIndex++) {
            if (((int) pBytes[pIndex] & 0xff) < 0x10) {
                buff.append(0);
            }
            buff.append(Long.toString((int) pBytes[pIndex] & 0xff, 16));
        }
        return buff.toString();
    }

	/*
	String str = "0101ff01ee"
	byte[] data = hexStringToByteArray(str);
	*/
	public static byte[] hexStringToByteArray(String s) {
		int len = s.length();
		byte[] data = new byte[len / 2];
		for (int i = 0; i < len; i += 2) {
			data[i / 2] = (byte) ((Character.digit(s.charAt(i), 16) << 4)
				+ Character.digit(s.charAt(i + 1), 16));
		}
		return data;
	}
}


예를 들어 키는 57616C6B697A3532383332694C6F636B 입니다.
토큰을 얻기 위한 일반 텍스트 명령은 다음과 같습니다. 030000000000000000000000000000000
암호화된 버전은 39E1CBB7EFC7127DE387EDF4A0075D66 입니다


5.	잠금해제
예를 들어 키는 57616C6B697A3532383332694C6F636B 입니다.
예를 들어 잠금 해제 비밀번호는 313130303634 입니다.
예를 들어 토큰은 AB568E21 입니다.
잠금을 해제하는 일반 텍스트 명령은 다음과 같습니다.
200031313030363400000000AB568E21
암호화된버전은 70E8CDAD64B0E3061FA5ACB22EE52AA0 입니다



public static byte[] Encrypt(byte[] sSrc, byte[] sKey){
    try{
        SecretKeySpec skeySpec = new SecretKeySpec(sKey, "AES");
        Cipher cipher = Cipher.getInstance("AES/ECB/NoPadding");
        cipher.init(Cipher.ENCRYPT_MODE, skeySpec);
        byte[] encrypted = cipher.doFinal(sSrc);
        return encrypted;
    }catch(Exception ex){
        return null;
    }
}

public static byte[] Decrypt(byte[] sSrc, byte[] sKey){
    try{
        SecretKeySpec skeySpec = new SecretKeySpec(sKey, "AES");
        Cipher cipher = Cipher.getInstance("AES/ECB/NoPadding");
        cipher.init(Cipher.DECRYPT_MODE, skeySpec);
        byte[] dncrypted = cipher.doFinal(sSrc);
        return dncrypted;
    }catch(Exception ex){
        return null;
    }
}

