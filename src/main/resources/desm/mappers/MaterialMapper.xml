<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="MaterialMapper">

	<update id="updateSetLanguage" >
	    <![CDATA[
	    	alter session set nls_language = 'AMERICAN'
	    ]]>
    </update>

	<!-- 항차 리스트 -->
	<select id="getVoyageList" parameterType="java.util.Map" resultType="java.util.HashMap">
		SELECT DISTINCT ZIM.ATTRIBUTE10
		  FROM ZVTS_ITEM_MASTER ZIM,
           	   DESM_PACKING_MST DPM,
		       DESM_PACKING_DTL DPD
	     WHERE ZIM.TRK_ITEM_NAME = DPM.TRK_ITEM_NAME
	       AND ZIM.PROJECT_NO = DPM.PROJECT_NO
	       AND DPM.PROJECT_NO = DPD.PROJECT_NO
	       AND DPM.TRK_ITEM_NAME = DPD.TRK_ITEM_NAME
	       AND DPM.PACKAGE_NO = DPD.PACKAGE_NO
	       AND ZIM.ATTRIBUTE10 IS NOT NULL
		   <if test='p_project_code != null and !p_project_code.equalsIgnoreCase("")'>
		   AND DPD.PROJECT_NO = #{p_project_code}
		   </if>
		   <if test='IS_CONFIRM_MATERIAL != null and !IS_CONFIRM_MATERIAL.equalsIgnoreCase("")'>
		   AND DPM.IS_CONFIRM_MATERIAL = #{IS_CONFIRM_MATERIAL}
		   </if>
		ORDER BY TO_NUMBER(ZIM.ATTRIBUTE10) DESC
	</select>


	<!-- 현장자재관리 리스트 -->
	<select id="getPackingList" parameterType="java.util.Map" resultType="java.util.HashMap">
		SELECT TD.*,
		       CASE WHEN TD.LV = 1 THEN TD.TRK_ITEM_NAME
		            ELSE SUBSTR(TD.ROOT_NAME, INSTR(TD.ROOT_NAME, '!@#$', 1, 1) + 4, INSTR(TD.ROOT_NAME, '!@#$', 1, 2) - (INSTR(TD.ROOT_NAME, '!@#$', 1, 1) + 4))
		            END AS LV1_NAME,
		       CASE WHEN TD.LV = 2 THEN TD.TRK_ITEM_NAME
		            WHEN TD.LV > 2 THEN SUBSTR(TD.ROOT_NAME, INSTR(TD.ROOT_NAME, '!@#$', 1, 2) + 4, INSTR(TD.ROOT_NAME, '!@#$', 1, 3) - (INSTR(TD.ROOT_NAME, '!@#$', 1, 2) + 4))
		            END AS LV2_NAME,
		       CASE WHEN TD.LV = 3 THEN TD.TRK_ITEM_NAME
		            WHEN TD.LV > 3 THEN SUBSTR(TD.ROOT_NAME, INSTR(TD.ROOT_NAME, '!@#$', 1, 3) + 4, INSTR(TD.ROOT_NAME, '!@#$', 1, 4) - (INSTR(TD.ROOT_NAME, '!@#$', 1, 3) + 4))
		            END AS LV3_NAME,
		       CASE WHEN TD.LV = 4 THEN TD.TRK_ITEM_NAME
		       		WHEN TD.LV > 4 THEN SUBSTR(TD.ROOT_NAME, INSTR(TD.ROOT_NAME, '!@#$', 1, 4) + 4, INSTR(TD.ROOT_NAME, '!@#$', 1, 5) - (INSTR(TD.ROOT_NAME, '!@#$', 1, 4) + 4))
		            END AS LV4_NAME,
		       DPD.PACKAGE_NO,
		       DPD.DESCRIPTION,
		       DPD.DRAWING_NO,
		       DPD.TAG_NO,
		       DPD.MATERIAL,
		       DPD.PACKAGE_TYPE,
	           TO_CHAR(DPD.GROSS, 'FM999,999,999,999,990.0') AS GROSS,
	           TO_CHAR(DPD.NET, 'FM999,999,999,999,990.0') AS NET,
	           TO_CHAR(DPD.RT, 'FM999,999,999,999,990.0') AS RT,
	           TO_CHAR(DPD.VOLUME, 'FM999,999,999,999,990.0') AS VOLUME,
	           TO_CHAR(DPD.L_CM, 'FM999,999,999,999,999') AS L_CM,
	           TO_CHAR(DPD.W_CM, 'FM999,999,999,999,999') AS W_CM,
	           TO_CHAR(DPD.H_CM, 'FM999,999,999,999,999') AS H_CM,
	           TO_CHAR(DPD.NOS, 'FM999,999,999,999,999') AS NOS,
		       DPD.UNIT,
		       DPD.REMARKS,
		       DPD.PACKAGE_LIST_NO
		  FROM DESM_PACKING_DTL DPD,
		       (SELECT ZIM.TRK_ITEM_SEQ
		              ,ZIM.TRK_ITEM_GROUP
		              ,ZIM.PROJECT_ID
		              ,ZIM.PROJECT_NO
		              ,PA.NAME AS PROJECT_NAME
		              ,ZIM.TRK_ITEM_NAME
		              ,ZIM.ATTRIBUTE3
		              ,ZIM.ATTRIBUTE10
		              ,CASE WHEN ZDI.CNT = 1 THEN ZDI.INVOICE_NUM
		                    WHEN ZDI.CNT > 1 THEN ZDI.INVOICE_NUM || ' 외 ' || ZDI.CALC_CNT || '건'
		                    END AS SEL_INVOICE_NUM
		              ,TO_CHAR(ZIM.FOB_PLAN_DATE, 'YYYY/MM/DD') AS FOB_PLAN_DATE
		              ,TO_CHAR(ZIM.FOB_EXPECTED_DATE, 'YYYY/MM/DD') AS FOB_EXPECTED_DATE
		              ,TO_CHAR(ZIM.FOB_ACTUAL_DATE, 'YYYY/MM/DD') AS FOB_ACTUAL_DATE
		              ,TO_CHAR(ZIM.CARGO_PLAN_DATE, 'YYYY/MM/DD') AS CARGO_PLAN_DATE
		              ,TO_CHAR(ZIM.CARGO_EXPECTED_DATE, 'YYYY/MM/DD') AS CARGO_EXPECTED_DATE
		              ,TO_CHAR(ZIM.CARGO_ACTUAL_DATE, 'YYYY/MM/DD') AS CARGO_ACTUAL_DATE
		              ,TO_CHAR(ZIM.ONSITE_PLAN_DATE, 'YYYY/MM/DD') AS ONSITE_PLAN_DATE
		              ,TO_CHAR(ZIM.ONSITE_EXPECTED_DATE, 'YYYY/MM/DD') AS ONSITE_EXPECTED_DATE
		              ,TO_CHAR(ZIM.ONSITE_ACTUAL_DATE, 'YYYY/MM/DD') AS ONSITE_ACTUAL_DATE
		              ,LEVEL AS LV
		              ,SYS_CONNECT_BY_PATH(ZIM.TRK_ITEM_NAME, '!@#$')  AS ROOT_NAME
		              --,SYS_CONNECT_BY_PATH(ZIM.TRK_ITEM_NAME, '    ')  AS SEARCH_ROOT_NAME
		          FROM ZVTS_ITEM_MASTER ZIM,
		               PA_PROJECTS_ALL_INT PA,
		              (SELECT TRK_ITEM_SEQ,
		                      COUNT(*) AS CNT,
		                      COUNT(*) - 1 AS CALC_CNT,
		                      MAX(INVOICE_NUM) AS INVOICE_NUM
		                 FROM ZVTS_DESM_INVOICE
		               GROUP BY TRK_ITEM_SEQ) ZDI
		         WHERE ZIM.PROJECT_ID = PA.PROJECT_ID
		           AND ZIM.TRK_ITEM_SEQ = ZDI.TRK_ITEM_SEQ(+)
		           AND ZIM.PROJECT_NO = #{p_project_code}
		        START WITH ZIM.TRK_ITEM_GROUP IS NULL
		        CONNECT BY PRIOR ZIM.TRK_ITEM_SEQ =  ZIM.TRK_ITEM_GROUP) TD
		 WHERE DPD.TRK_ITEM_NAME = TD.TRK_ITEM_NAME
		   AND DPD.PROJECT_NO = TD.PROJECT_NO
		<if test='p_item_name != null and !p_item_name.equalsIgnoreCase("")'>
			--AND (UPPER(TD.SEARCH_ROOT_NAME) LIKE '%' || UPPER(p_item_name) || '%')
			AND (UPPER(TD.ROOT_NAME) LIKE '%' || UPPER(#{p_item_name}) || '%')
		</if>
		<if test='p_attribute10 != null and !p_attribute10.equalsIgnoreCase("")'>
			AND TD.ATTRIBUTE10 = #{p_attribute10}
		</if>
		<if test='p_packing_list_no != null and !p_packing_list_no.equalsIgnoreCase("")'>
			AND UPPER(DPD.PACKAGE_LIST_NO) LIKE '%' || UPPER(#{p_packing_list_no}) || '%'
		</if>
		<if test='p_package_no != null and !p_package_no.equalsIgnoreCase("")'>
			AND UPPER(DPD.PACKAGE_NO) LIKE '%' || UPPER(#{p_package_no}) || '%'
		</if>
		<if test='p_desc != null and !p_desc.equalsIgnoreCase("")'>
			AND UPPER(DPD.DESCRIPTION) LIKE '%' || UPPER(#{p_desc}) || '%'
		</if>
		<if test='p_vendor != null and !p_vendor.equalsIgnoreCase("")'>
			AND TD.ATTRIBUTE3 LIKE '%' || UPPER(#{p_vendor}) || '%'
		</if>
		<if test='p_drawing_no != null and !p_drawing_no.equalsIgnoreCase("")'>
			AND UPPER(DPD.DRAWING_NO) LIKE '%' || UPPER(#{p_drawing_no}) || '%'
		</if>
		<if test='p_tag_no != null and !p_tag_no.equalsIgnoreCase("")'>
			AND UPPER(DPD.TAG_NO) LIKE '%' || UPPER(#{p_tag_no}) || '%'
		</if>
		ORDER BY TD.TRK_ITEM_SEQ DESC
	</select>

	<select id="getIdsmOsSummaryList" parameterType="java.util.Map" resultType="java.util.HashMap">
		/* MaterialMapper.xml -> getIdsmOsSummaryList : Package List 조회 */
        SELECT DPM.PACKAGE_NO
        ,      NVL(DPM.IS_CONFIRM_MATERIAL, 'N') AS IS_CONFIRM_MATERIAL
        ,      DPM.PACKAGE_LIST_NO
        ,      DPM.DESCRIPTION
        ,      DPM.PACKAGE_TYPE
        ,      TO_CHAR(DPM.L_CM, 'FM999,999,999,999,999') AS L_CM
        ,      TO_CHAR(DPM.W_CM, 'FM999,999,999,999,999') AS W_CM
        ,      TO_CHAR(DPM.H_CM, 'FM999,999,999,999,999') AS H_CM
        ,      TO_CHAR(DPM.VOLUME, 'FM999,999,999,999,990.0') AS VOLUME
        ,      TO_CHAR(DPM.NET, 'FM999,999,999,999,990.0') AS NET
        ,      TO_CHAR(DPM.GROSS, 'FM999,999,999,999,990.0') AS GROSS
        ,      DPM.REMARKS
        ,      DPM.COUNTRY
        ,      DPM.TRK_ITEM_NAME
        ,      DPM.PROJECT_NO
        ,      DPM.REPORT_SHORT_QTY
        ,      DPM.REPORT_OVER_QTY
        ,      DPM.REPORT_DMG_QTY
        ,      DPM.REPORT_MISSING_QTY
        ,      CASE WHEN DPM.REPORT_SHORT = 'Y' THEN 1 ELSE 0 END AS REPORT_SHORT
        ,      CASE WHEN DPM.REPORT_OVER = 'Y' THEN 1 ELSE 0 END AS REPORT_OVER
        ,      CASE WHEN DPM.REPORT_DMG = 'Y' THEN 1 ELSE 0 END AS REPORT_DMG
        ,      CASE WHEN DPM.REPORT_MISSING = 'Y' THEN 1 ELSE 0 END AS REPORT_MISSING
        ,      DPM.REPORT_LOST
        ,      DPM.REPORT_DESCRIPTION
        ,      DPM.HAZARDOUS_MATERIAL
        ,      DPM.QTY
        ,      DPM.REMARK
        ,      DPM.VENDOR
        ,      DPM.OLD_INF_OF_VENDOR
        ,      TO_CHAR(DPM.RECEIVED_DATE, 'YYYY-MM-DD') AS RECEIVED_DATE
        ,      DPM.STORAGE_LOCATION
        ,      DPM.SUB_CONTRACTOR
        ,      TO_CHAR(DPM.CONFIRM_DATE, 'YYYY/MM/DD') AS CONFIRM_DATE
        ,      T.SEL_INVOICE_NUM
        ,      T.ATTRIBUTE3
        ,      T.ATTRIBUTE9
        ,      T.ATTRIBUTE10
        ,      TO_CHAR( DPM.RECEIPT_DATE, 'YYYY/MM/DD') AS RECEIPT_DATE
        ,      CASE WHEN (SELECT COUNT(*)
                          FROM DESM_PACKING_DTL DETAIL
                          WHERE DETAIL.PROJECT_NO = UPPER(#{PROJECT_NO})
                          AND DETAIL.PACKAGE_NO = DPM.PACKAGE_NO)
                       = (SELECT COUNT(*)
                          FROM DESM_PACKING_DTL DETAIL
                          WHERE DETAIL.PROJECT_NO = UPPER(#{PROJECT_NO})
                          AND DETAIL.PACKAGE_NO = DPM.PACKAGE_NO
                          AND NVL(DETAIL.IN_QTY, 0) - NVL(DETAIL.OUT_QTY, 0) + NVL(DETAIL.RETURN_QTY, 0) = 0)
                     THEN 'CLOSE'
                     WHEN (SELECT COUNT(*)
                          FROM DESM_PACKING_DTL DETAIL
                          WHERE DETAIL.PROJECT_NO = UPPER(#{PROJECT_NO})
                          AND DETAIL.PACKAGE_NO = DPM.PACKAGE_NO
                          AND NVL(DETAIL.IN_QTY, 0) - NVL(DETAIL.OUT_QTY, 0) + NVL(DETAIL.RETURN_QTY, 0) = 0) > 0
                     THEN 'PARTIALLY'
                     ELSE ''
               END AS PACKAGE_STATUS
        ,      (SELECT COUNT(*)
                FROM DESM_PACKING_DTL DETAIL
                WHERE DETAIL.PROJECT_NO = UPPER(#{PROJECT_NO})
                AND DETAIL.PACKAGE_NO = DPM.PACKAGE_NO)
                || '/' ||
               (SELECT COUNT(*)
                FROM DESM_PACKING_DTL DETAIL
                WHERE DETAIL.PROJECT_NO = UPPER(#{PROJECT_NO})
                AND DETAIL.PACKAGE_NO = DPM.PACKAGE_NO
                AND NVL(DETAIL.IN_QTY, 0) - NVL(DETAIL.OUT_QTY, 0) + NVL(DETAIL.RETURN_QTY, 0) = 0) AS OUT_STATUS
        ,      (SELECT SUM(DETAIL.IN_QTY)
                FROM DESM_PACKING_DTL DETAIL
                WHERE DETAIL.PROJECT_NO = UPPER(#{PROJECT_NO})
                AND DETAIL.PACKAGE_NO = DPM.PACKAGE_NO)
                || '/' ||
               (SELECT SUM(NVL(DETAIL.OUT_QTY, 0) - NVL(DETAIL.RETURN_QTY, 0))
                FROM DESM_PACKING_DTL DETAIL
                WHERE DETAIL.PROJECT_NO = UPPER(#{PROJECT_NO})
                AND DETAIL.PACKAGE_NO = DPM.PACKAGE_NO
                ) AS OUT_STATUS_QTY
        ,      (SELECT TO_CHAR(MAX(DRO.HANDOVER_DATE), 'YYYY/MM/DD')
                FROM DESM_PACKING_DTL DETAIL
                ,    DESM_RSI_LINE DRL
                ,    DESM_RSI_OUTGOING DRO
                WHERE DETAIL.PROJECT_NO = UPPER(#{PROJECT_NO})
                AND DETAIL.PACKAGE_NO = DPM.PACKAGE_NO
                AND DETAIL.MATERIAL_CODE = DRL.MATERIAL_CODE
                AND DRL.RSI_LINE_ID = DRO.RSI_LINE_ID
               ) AS LAST_OUTGOING_DATE
        ,      ROUND(L_CM * W_CM / 10000, 1) AS SQM
        ,      TO_CHAR(DPM.LOC_UPDATE_DATE, 'YYYY/MM/DD') AS LOC_UPDATE_DATE
        ,      DPM.LOC_UPDATED_BY
        ,      (SELECT SUM(DETAIL.IN_QTY)
                FROM DESM_PACKING_DTL DETAIL
                WHERE DETAIL.PROJECT_NO = UPPER(#{PROJECT_NO}) 
                AND DETAIL.PACKAGE_NO = DPM.PACKAGE_NO) AS TOT_QTY
        ,      MRRT.VISUAL_CHECK
        ,      MRRT.MRR_RECEIVED_DATE
        FROM (SELECT ZIM.TRK_ITEM_SEQ
              ,      ZIM.TRK_ITEM_NAME
              ,      ZIM.TRK_ITEM_GROUP
              ,      ZIM.PROJECT_ID
              ,      ZIM.PROJECT_NO
              ,      ZIM.INVOICE_NUM
              ,      ZIM.ATTRIBUTE3
              ,      ZIM.ATTRIBUTE9
              ,      ZIM.ATTRIBUTE10
              ,      CASE WHEN DI.CNT = 1 THEN DI.INVOICE_NUM
                          WHEN DI.CNT > 1 THEN DI.INVOICE_NUM || ' 외 ' || DI.CALC_CNT || '건'
                     END AS SEL_INVOICE_NUM
              FROM ZVTS_ITEM_MASTER ZIM
              ,    PA_PROJECTS_ALL_INT PPA
              ,    (SELECT ZDI.TRK_ITEM_SEQ
              ,      COUNT(*) AS CNT
              ,      COUNT(*) - 1 AS CALC_CNT
              ,      MAX(ZDI.INVOICE_NUM) AS INVOICE_NUM
              FROM ZVTS_DESM_INVOICE ZDI
              GROUP BY ZDI.TRK_ITEM_SEQ) DI
              WHERE ZIM.PROJECT_ID = PPA.PROJECT_ID
              AND ZIM.TRK_ITEM_SEQ = DI.TRK_ITEM_SEQ(+)
              AND ZIM.PROJECT_NO = UPPER(#{PROJECT_NO})
              START WITH ZIM.TRK_ITEM_GROUP IS NULL
              CONNECT BY PRIOR ZIM.TRK_ITEM_SEQ = ZIM.TRK_ITEM_GROUP
             ) T
        ,    DESM_PACKING_MST DPM
        ,    (SELECT DMLL.TRK_ITEM_NAME
              ,      DMLL.PACKAGE_NO
              ,      DMLL.VISUAL_CHECK
              ,      DMLL.RECEIVED_DATE AS MRR_RECEIVED_DATE
              FROM DESM_MRR_HEADER DMH
              ,    DESM_MRR_LINE   DMLL
              WHERE DMH.MRR_HEADER_ID = DMLL.MRR_HEADER_ID
              AND DMH.PROJECT_NO = UPPER(#{PROJECT_NO})) MRRT
        WHERE T.TRK_ITEM_NAME = DPM.TRK_ITEM_NAME
        AND T.PROJECT_NO = DPM.PROJECT_NO
        AND DPM.TRK_ITEM_NAME = MRRT.TRK_ITEM_NAME(+)
        AND DPM.PACKAGE_NO = MRRT.PACKAGE_NO(+)
        <if test='PACKAGE_LIST_NO != null and PACKAGE_LIST_NO !=""'>
        	AND UPPER(DPM.PACKAGE_LIST_NO) LIKE '%' || UPPER(#{PACKAGE_LIST_NO}) || '%'
        </if>
        <if test='PACKAGE_NO != null and PACKAGE_NO !=""'>
        	AND UPPER(DPM.PACKAGE_NO) LIKE '%' || UPPER(#{PACKAGE_NO}) || '%'
        </if>
        <if test='DESCRIPTION != null and DESCRIPTION !=""'>
        	AND UPPER(DPM.DESCRIPTION) LIKE '%' || UPPER(#{DESCRIPTION}) || '%'
        </if>
        <if test='IS_CONFIRM_MATERIAL != null and IS_CONFIRM_MATERIAL !=""'>
        	AND NVL(DPM.IS_CONFIRM_MATERIAL, 'N') = #{IS_CONFIRM_MATERIAL}
        </if>
       	<choose>
       		<when test='RECEIPTED == "Y"'>
       			AND DPM.RECEIPT_DATE IS NOT NULL
       		</when>
       		<when test='RECEIPTED == "N"'>
       			AND DPM.RECEIPT_DATE IS NULL
       		</when>
       	</choose>
		<if test='START_RECEIPT_DATE != null and START_RECEIPT_DATE != ""'>
		   AND DPM.RECEIPT_DATE >= TO_DATE(#{START_RECEIPT_DATE}, 'YYYY/MM/DD')
		 </if>
		 <if test='END_RECEIPT_DATE != null and END_RECEIPT_DATE != ""'>
		   AND DPM.RECEIPT_DATE <![CDATA[ < ]]> TO_DATE(#{END_RECEIPT_DATE}, 'YYYY/MM/DD') + 1
		 </if>
        <if test='ATTRIBUTE10 != null and ATTRIBUTE10 !=""'>
        	AND T.ATTRIBUTE10 = #{ATTRIBUTE10}
        </if>
        <if test='REMARK != null and REMARK !=""'>
        	AND UPPER(DPM.REMARK) LIKE '%' || UPPER(#{REMARK}) || '%'
        </if>
        <if test='VENDOR != null and VENDOR !=""'>
        	AND UPPER(T.ATTRIBUTE3) LIKE '%' || UPPER(#{VENDOR}) || '%'
        </if>
        <if test='SEQUENCE != null and SEQUENCE !=""'>
        	AND T.ATTRIBUTE9 = #{SEQUENCE}
        </if>
		<if test='LOCATION_LIST != null'>
			AND DPM.STORAGE_LOCATION IN
			<foreach collection="LOCATION_LIST" item="list" separator="," open="(" close=")">
				#{list.LOCATION}
			</foreach>
		</if>
		<if test='MRR_VISUAL_CHECK != null and MRR_VISUAL_CHECK !="All"'>
			AND MRRT.VISUAL_CHECK = #{MRR_VISUAL_CHECK}
        </if>
		<choose>
       		<when test='MRR_RECEIVED == "Y"'>
       			AND DPM.RECEIPT_DATE IS NOT NULL
       		</when>
       		<when test='MRR_RECEIVED == "N"'>
       			AND DPM.RECEIPT_DATE IS NULL
       		</when>
       	</choose>
		<if test='START_MRR_RECEIVED_DATE != null and START_MRR_RECEIVED_DATE != ""'>
		   AND MRRT.MRR_RECEIVED_DATE >= TO_DATE(#{START_MRR_RECEIVED_DATE}, 'YYYY/MM/DD')
		 </if>
		 <if test='END_MRR_RECEIVED_DATE != null and END_MRR_RECEIVED_DATE != ""'>
		   AND MRRT.MRR_RECEIVED_DATE <![CDATA[ < ]]> TO_DATE(#{END_MRR_RECEIVED_DATE}, 'YYYY/MM/DD') + 1
		 </if>
		<choose>
       		<when test='LOCATION_EXIST != null and LOCATION_EXIST == "ALL EXISTS"'>
       			AND DPM.STORAGE_LOCATION IS NOT NULL
       		</when>
       		<when test='LOCATION_EXIST != null and LOCATION_EXIST == "ALL NOT EXISTS"'>
       			AND DPM.STORAGE_LOCATION IS NULL
       		</when>
       	</choose>
	    ORDER BY T.SEL_INVOICE_NUM, DPM.PACKAGE_NO
	</select>

	<select id="getIdsmOsSummaryList_backup_221115" parameterType="java.util.Map" resultType="java.util.HashMap">
			SELECT DPM.PACKAGE_NO,
				   NVL(DPM.IS_CONFIRM_MATERIAL, 'N') AS IS_CONFIRM_MATERIAL,
				   DPM.PACKAGE_LIST_NO,
	               DPM.DESCRIPTION,
	               DPM.PACKAGE_TYPE,
                 TO_CHAR(DPM.L_CM, 'FM999,999,999,999,999') AS L_CM,
                 TO_CHAR(DPM.W_CM, 'FM999,999,999,999,999') AS W_CM,
                 TO_CHAR(DPM.H_CM, 'FM999,999,999,999,999') AS H_CM,
                 TO_CHAR(DPM.VOLUME, 'FM999,999,999,999,990.0') AS VOLUME,
                 TO_CHAR(DPM.NET, 'FM999,999,999,999,990.0') AS NET,
                 TO_CHAR(DPM.GROSS, 'FM999,999,999,999,990.0') AS GROSS,
	               DPM.REMARKS,
	               DPM.COUNTRY,
	               DPM.TRK_ITEM_NAME,
	               DPM.PROJECT_NO,
                  DPM.REPORT_SHORT_QTY,
                  DPM.REPORT_OVER_QTY,
                  DPM.REPORT_DMG_QTY,
                  DPM.REPORT_MISSING_QTY,
	               CASE WHEN DPM.REPORT_SHORT = 'Y' THEN 1 ELSE 0 END AS REPORT_SHORT,
	               CASE WHEN DPM.REPORT_OVER = 'Y' THEN 1 ELSE 0 END AS REPORT_OVER,
	               CASE WHEN DPM.REPORT_DMG = 'Y' THEN 1 ELSE 0 END AS REPORT_DMG,
	               CASE WHEN DPM.REPORT_MISSING = 'Y' THEN 1 ELSE 0 END AS REPORT_MISSING,
	               DPM.REPORT_LOST,
	               DPM.REPORT_DESCRIPTION,
	               DPM.HAZARDOUS_MATERIAL,
                 DPM.QTY,
	               DPM.REMARK,
	               DPM.VENDOR,
	               DPM.OLD_INF_OF_VENDOR,
	               TO_CHAR(DPM.RECEIVED_DATE, 'YYYY-MM-DD') AS RECEIVED_DATE,
	               DPM.STORAGE_LOCATION,
	               DPM.SUB_CONTRACTOR,
	               TO_CHAR(DPM.CONFIRM_DATE, 'YYYY/MM/DD') AS CONFIRM_DATE,
	               T.SEL_INVOICE_NUM,
	               T.ATTRIBUTE3,
	               T.ATTRIBUTE9,
	               T.ATTRIBUTE10,
	               TO_CHAR( DPM.RECEIPT_DATE, 'YYYY/MM/DD') AS RECEIPT_DATE,
	                 CASE WHEN DPR.STATUS = 'create' THEN 'RFI Creation'
	                      WHEN DPR.STATUS = 'accept' THEN 'RFI Accept'
	                      WHEN DPD.STATUS = 'create' THEN 'MIR Creation'
	                      WHEN DPD.STATUS = 'accept' THEN 'MIR Accept'
	                    END AS STATUS,
	               (SELECT COUNT(*)
					FROM DESM_PACKING_DTL DETAIL
					WHERE PROJECT_NO = UPPER(#{PROJECT_NO})
                    AND DETAIL.PACKAGE_NO = DPM.PACKAGE_NO)
                    || '/' ||
                   (SELECT COUNT(*)
				    FROM DESM_PACKING_DTL DETAIL
				    WHERE PROJECT_NO = UPPER(#{PROJECT_NO})
					AND DETAIL.PACKAGE_NO = DPM.PACKAGE_NO
					AND NVL(DETAIL.IN_QTY, 0) - NVL(DETAIL.OUT_QTY, 0) + NVL(DETAIL.RETURN_QTY, 0) = 0) AS OUT_STATUS
	        FROM (SELECT ZIM.TRK_ITEM_SEQ,
	                     ZIM.TRK_ITEM_NAME,
	                     ZIM.TRK_ITEM_GROUP,
	                     ZIM.ORGANIZATION_ID,
	                     ZIM.PROJECT_ID,
	                     ZIM.PROJECT_NO,
	                     PPA.NAME as PROJECT_NAME,
	                     ZIM.TASK_ID,
	                     ZIM.TASK_NUMBER,
	                     ZIM.BATCH,
	                     ZIM.OFFSHORE,
	                     ZIM.PRIMAVERA_ID,
	                     TO_CHAR(ZIM.MPS_PLAN_DATE, 'YYYY/MM/DD') as MPS_PLAN_DATE,
	                     TO_CHAR(ZIM.MPS_EXPECTED_DATE, 'YYYY/MM/DD') as MPS_EXPECTED_DATE,
	                     TO_CHAR(ZIM.MPS_ACTUAL_DATE, 'YYYY/MM/DD') as MPS_ACTUAL_DATE,
	                     ZIM.PURCHASE_DURATION,
	                     TO_CHAR(ZIM.PO_PLAN_DATE, 'YYYY/MM/DD') as PO_PLAN_DATE,
	                     TO_CHAR(ZIM.PO_EXPECTED_DATE, 'YYYY/MM/DD') as PO_EXPECTED_DATE,
	                     TO_CHAR(ZIM.PO_ATCUAL_DATE, 'YYYY/MM/DD') as PO_ATCUAL_DATE,
	                     ZIM.MAKE_DURATION,
	                     ZIM.PROGRESS,
	                     TO_CHAR(ZIM.CARGO_PLAN_DATE, 'YYYY/MM/DD') as CARGO_PLAN_DATE,
	                     TO_CHAR(ZIM.CARGO_EXPECTED_DATE, 'YYYY/MM/DD') as CARGO_EXPECTED_DATE,
	                     TO_CHAR(ZIM.CARGO_PROMISED_DATE, 'YYYY/MM/DD') as CARGO_PROMISED_DATE,
	                     TO_CHAR(ZIM.CARGO_ACTUAL_DATE, 'YYYY/MM/DD') as CARGO_ACTUAL_DATE,
	                     ZIM.SHIPMENT_DURATION,
	                     TO_CHAR(ZIM.FOB_PLAN_DATE, 'YYYY/MM/DD') as FOB_PLAN_DATE,
	                     TO_CHAR(ZIM.FOB_EXPECTED_DATE, 'YYYY/MM/DD') as FOB_EXPECTED_DATE,
	                     TO_CHAR(ZIM.FOB_ACTUAL_DATE, 'YYYY/MM/DD') as FOB_ACTUAL_DATE,
	                     ZIM.TRANS_DURATION,
	                     TO_CHAR(ZIM.ONSITE_PLAN_DATE, 'YYYY/MM/DD') as ONSITE_PLAN_DATE,
	                     TO_CHAR(ZIM.ONSITE_EXPECTED_DATE, 'YYYY/MM/DD') as ONSITE_EXPECTED_DATE,
	                     TO_CHAR(ZIM.ONSITE_ACTUAL_DATE, 'YYYY/MM/DD') as ONSITE_ACTUAL_DATE,
	                     ZIM.PAYMENT_MILESTONE,
	                     ZIM.TRK_ITEM_DEFAULT,
	                     ZIM.INVOICE_NUM,
	                     ZIM.ATTRIBUTE1,
	                     ZIM.ATTRIBUTE2,
	                     ZIM.ATTRIBUTE3,
	                     ZIM.ATTRIBUTE4,
	                     ZIM.ATTRIBUTE5,
	                     ZIM.ATTRIBUTE6,
	                     ZIM.ATTRIBUTE7,
	                     ZIM.ATTRIBUTE8,
	                     ZIM.ATTRIBUTE9,
	                     ZIM.ATTRIBUTE10,
	                     CASE WHEN DI.CNT = 1 THEN DI.INVOICE_NUM
	                          WHEN DI.CNT > 1 THEN DI.INVOICE_NUM || ' 외 ' || DI.CALC_CNT || '건' END AS SEL_INVOICE_NUM
	                FROM ZVTS_ITEM_MASTER ZIM,
	                     PA_PROJECTS_ALL_INT PPA,
	                     (SELECT ZDI.TRK_ITEM_SEQ,
	                             COUNT(*) AS CNT,
	                             COUNT(*) - 1 AS CALC_CNT,
	                             MAX(ZDI.INVOICE_NUM) AS INVOICE_NUM
	                        FROM ZVTS_DESM_INVOICE ZDI
	                      GROUP BY ZDI.TRK_ITEM_SEQ) DI
	               WHERE ZIM.PROJECT_ID = PPA.PROJECT_ID
	                 AND ZIM.TRK_ITEM_SEQ = DI.TRK_ITEM_SEQ(+)
	                 AND ZIM.PROJECT_NO = UPPER(#{PROJECT_NO})
	              START WITH ZIM.TRK_ITEM_GROUP IS NULL
	              CONNECT BY PRIOR ZIM.TRK_ITEM_SEQ = ZIM.TRK_ITEM_GROUP) T,
	              DESM_PACKING_MST DPM,
	              DESM_PACKING_MIR DPD,
	              DESM_PACKING_RFI DPR
	        WHERE T.TRK_ITEM_NAME = DPM.TRK_ITEM_NAME
	          AND T.PROJECT_NO = DPM.PROJECT_NO
	          AND DPM.PACKAGE_NO = DPD.PACKAGE_NO(+)
	          AND DPM.PROJECT_NO = DPD.PROJECT_NO(+)
	          AND DPM.TRK_ITEM_NAME = DPD.TRK_ITEM_NAME(+)
	            AND DPM.PACKAGE_NO = DPR.PACKAGE_NO(+)
	            AND DPM.PROJECT_NO = DPR.PROJECT_NO(+)
	            AND DPM.TRK_ITEM_NAME = DPR.TRK_ITEM_NAME(+)
	          AND DPD.STATUS(+) != 'cancel'
	          AND DPR.STATUS(+) != 'cancel'
	          <if test='PACKAGE_LIST_NO != null and PACKAGE_LIST_NO !=""'>
	          AND UPPER(DPM.PACKAGE_LIST_NO) LIKE '%' || UPPER(#{PACKAGE_LIST_NO}) || '%'
	          </if>
	          <if test='PACKAGE_NO != null and PACKAGE_NO !=""'>
	          AND UPPER(DPM.PACKAGE_NO) LIKE '%' || UPPER(#{PACKAGE_NO}) || '%'
	          </if>
	          <if test='DESCRIPTION != null and DESCRIPTION !=""'>
	          AND UPPER(DPM.DESCRIPTION) LIKE '%' || UPPER(#{DESCRIPTION}) || '%'
	          </if>
	          <if test='IS_CONFIRM_MATERIAL != null and IS_CONFIRM_MATERIAL !=""'>
	          AND NVL(DPM.IS_CONFIRM_MATERIAL, 'N') = #{IS_CONFIRM_MATERIAL}
	          </if>
	          <if test='MIR_NO != null and MIR_NO !=""'>
	          AND UPPER(DPD.MIR_NO) LIKE '%' || UPPER(#{MIR_NO}) || '%'
	          </if>
	          <if test='MIR_STATUS != null and MIR_STATUS !=""'>
	          AND DPD.STATUS = #{MIR_STATUS}
	          </if>
	          <if test='RFI_NO != null and RFI_NO !=""'>
	          AND UPPER(DPR.RFI_NO) LIKE '%' || UPPER(#{RFI_NO}) || '%'
	          </if>
	          <if test='RFI_STATUS != null and RFI_STATUS !=""'>
	          AND DPR.STATUS = #{RFI_STATUS}
	          </if>
	          <if test='ATTRIBUTE10 != null and ATTRIBUTE10 !=""'>
	          AND T.ATTRIBUTE10 = #{ATTRIBUTE10}
	          </if>
	          <if test='REMARK != null and REMARK !=""'>
	          AND UPPER(DPM.REMARK) LIKE '%' || UPPER(#{REMARK}) || '%'
	          </if>
	          <if test='VENDOR != null and VENDOR !=""'>
	          AND UPPER(T.ATTRIBUTE3) LIKE '%' || UPPER(#{VENDOR}) || '%'
	          </if>
	          <if test='SEQUENCE != null and SEQUENCE !=""'>
	          AND T.ATTRIBUTE9 = #{SEQUENCE}
	          </if>
			<if test='LOCATION_LIST != null'>
				AND DPM.STORAGE_LOCATION IN
				<foreach collection="LOCATION_LIST" item="list" separator="," open="(" close=")">
					#{list.LOCATION}
				</foreach>
			</if>

	    ORDER BY T.SEL_INVOICE_NUM, DPM.PACKAGE_NO
	</select>
	
	<select id="getIdsmOsSummaryList_backup_230225" parameterType="java.util.Map" resultType="java.util.HashMap">
		/* MaterialMapper.xml -> getIdsmOsSummaryList : Package List 조회 */
        SELECT DPM.PACKAGE_NO
        ,      NVL(DPM.IS_CONFIRM_MATERIAL, 'N') AS IS_CONFIRM_MATERIAL
        ,      DPM.PACKAGE_LIST_NO
        ,      DPM.DESCRIPTION
        ,      DPM.PACKAGE_TYPE
        ,      TO_CHAR(DPM.L_CM, 'FM999,999,999,999,999') AS L_CM
        ,      TO_CHAR(DPM.W_CM, 'FM999,999,999,999,999') AS W_CM
        ,      TO_CHAR(DPM.H_CM, 'FM999,999,999,999,999') AS H_CM
        ,      TO_CHAR(DPM.VOLUME, 'FM999,999,999,999,990.0') AS VOLUME
        ,      TO_CHAR(DPM.NET, 'FM999,999,999,999,990.0') AS NET
        ,      TO_CHAR(DPM.GROSS, 'FM999,999,999,999,990.0') AS GROSS
        ,      DPM.REMARKS
        ,      DPM.COUNTRY
        ,      DPM.TRK_ITEM_NAME
        ,      DPM.PROJECT_NO
        ,      DPM.REPORT_SHORT_QTY
        ,      DPM.REPORT_OVER_QTY
        ,      DPM.REPORT_DMG_QTY
        ,      DPM.REPORT_MISSING_QTY
        ,      CASE WHEN DPM.REPORT_SHORT = 'Y' THEN 1 ELSE 0 END AS REPORT_SHORT
        ,      CASE WHEN DPM.REPORT_OVER = 'Y' THEN 1 ELSE 0 END AS REPORT_OVER
        ,      CASE WHEN DPM.REPORT_DMG = 'Y' THEN 1 ELSE 0 END AS REPORT_DMG
        ,      CASE WHEN DPM.REPORT_MISSING = 'Y' THEN 1 ELSE 0 END AS REPORT_MISSING
        ,      DPM.REPORT_LOST
        ,      DPM.REPORT_DESCRIPTION
        ,      DPM.HAZARDOUS_MATERIAL
        ,      DPM.QTY
        ,      DPM.REMARK
        ,      DPM.VENDOR
        ,      DPM.OLD_INF_OF_VENDOR
        ,      TO_CHAR(DPM.RECEIVED_DATE, 'YYYY-MM-DD') AS RECEIVED_DATE
        ,      DPM.STORAGE_LOCATION
        ,      DPM.SUB_CONTRACTOR
        ,      TO_CHAR(DPM.CONFIRM_DATE, 'YYYY/MM/DD') AS CONFIRM_DATE
        ,      T.SEL_INVOICE_NUM
        ,      T.ATTRIBUTE3
        ,      T.ATTRIBUTE9
        ,      T.ATTRIBUTE10
        ,      TO_CHAR( DPM.RECEIPT_DATE, 'YYYY/MM/DD') AS RECEIPT_DATE
        ,      CASE WHEN (SELECT COUNT(*)
                          FROM DESM_PACKING_DTL DETAIL
                          WHERE DETAIL.PROJECT_NO = UPPER(#{PROJECT_NO})
                          AND DETAIL.PACKAGE_NO = DPM.PACKAGE_NO)
                       = (SELECT COUNT(*)
                          FROM DESM_PACKING_DTL DETAIL
                          WHERE DETAIL.PROJECT_NO = UPPER(#{PROJECT_NO})
                          AND DETAIL.PACKAGE_NO = DPM.PACKAGE_NO
                          AND NVL(DETAIL.IN_QTY, 0) - NVL(DETAIL.OUT_QTY, 0) + NVL(DETAIL.RETURN_QTY, 0) = 0)
                     THEN 'CLOSE'
                     WHEN (SELECT COUNT(*)
                          FROM DESM_PACKING_DTL DETAIL
                          WHERE DETAIL.PROJECT_NO = UPPER(#{PROJECT_NO})
                          AND DETAIL.PACKAGE_NO = DPM.PACKAGE_NO
                          AND NVL(DETAIL.IN_QTY, 0) - NVL(DETAIL.OUT_QTY, 0) + NVL(DETAIL.RETURN_QTY, 0) = 0) > 0
                     THEN 'PARTIALLY'
                     ELSE ''
               END AS PACKAGE_STATUS
        ,      (SELECT COUNT(*)
                FROM DESM_PACKING_DTL DETAIL
                WHERE DETAIL.PROJECT_NO = UPPER(#{PROJECT_NO})
                AND DETAIL.PACKAGE_NO = DPM.PACKAGE_NO)
                || '/' ||
               (SELECT COUNT(*)
                FROM DESM_PACKING_DTL DETAIL
                WHERE DETAIL.PROJECT_NO = UPPER(#{PROJECT_NO})
                AND DETAIL.PACKAGE_NO = DPM.PACKAGE_NO
                AND NVL(DETAIL.IN_QTY, 0) - NVL(DETAIL.OUT_QTY, 0) + NVL(DETAIL.RETURN_QTY, 0) = 0) AS OUT_STATUS
        ,      (SELECT SUM(DETAIL.IN_QTY)
                FROM DESM_PACKING_DTL DETAIL
                WHERE DETAIL.PROJECT_NO = UPPER(#{PROJECT_NO})
                AND DETAIL.PACKAGE_NO = DPM.PACKAGE_NO)
                || '/' ||
               (SELECT SUM(NVL(DETAIL.OUT_QTY, 0) - NVL(DETAIL.RETURN_QTY, 0))
                FROM DESM_PACKING_DTL DETAIL
                WHERE DETAIL.PROJECT_NO = UPPER(#{PROJECT_NO})
                AND DETAIL.PACKAGE_NO = DPM.PACKAGE_NO
                ) AS OUT_STATUS_QTY
        ,      (SELECT TO_CHAR(MAX(DRO.HANDOVER_DATE), 'YYYY/MM/DD')
                FROM DESM_PACKING_DTL DETAIL
                ,    DESM_RSI_LINE DRL
                ,    DESM_RSI_OUTGOING DRO
                WHERE DETAIL.PROJECT_NO = UPPER(#{PROJECT_NO})
                AND DETAIL.PACKAGE_NO = DPM.PACKAGE_NO
                AND DETAIL.MATERIAL_CODE = DRL.MATERIAL_CODE
                AND DRL.RSI_LINE_ID = DRO.RSI_LINE_ID
               ) AS LAST_OUTGOING_DATE
        ,      ROUND(L_CM * W_CM / 10000, 1) AS SQM
        ,      TO_CHAR(DPM.LOC_UPDATE_DATE, 'YYYY/MM/DD') AS LOC_UPDATE_DATE
        ,      DPM.LOC_UPDATED_BY
        ,      (SELECT SUM(DETAIL.IN_QTY)
                FROM DESM_PACKING_DTL DETAIL
                WHERE DETAIL.PROJECT_NO = UPPER(#{PROJECT_NO}) 
                AND DETAIL.PACKAGE_NO = DPM.PACKAGE_NO) AS TOT_QTY
        ,      (SELECT DL.VISUAL_CHECK
				  FROM DESM_MRR_HEADER DH,
				       DESM_MRR_LINE   DL
				 WHERE 1=1
				   AND DH.PROJECT_NO = DPM.PROJECT_NO
				   AND DH.MRR_HEADER_ID = DL.MRR_HEADER_ID
				   AND DL.TRK_ITEM_NAME = DPM.TRK_ITEM_NAME    
				   AND DL.PACKING_LIST_NO = DPM.PACKAGE_LIST_NO
				   AND DL.PACKAGE_NO = DPM.PACKAGE_NO ) AS VISUAL_CHECK
		,      (SELECT TO_CHAR(DL.RECEIVED_DATE, 'YYYY/MM/DD')
		          FROM DESM_MRR_HEADER DH,
		               DESM_MRR_LINE   DL
		         WHERE 1=1
		           AND DH.PROJECT_NO = DPM.PROJECT_NO
		           AND DH.MRR_HEADER_ID = DL.MRR_HEADER_ID
		           AND DL.TRK_ITEM_NAME = DPM.TRK_ITEM_NAME    
		           AND DL.PACKING_LIST_NO = DPM.PACKAGE_LIST_NO
		           AND DL.PACKAGE_NO = DPM.PACKAGE_NO ) AS MRR_RECEIVED_DATE 		           
        FROM (SELECT ZIM.TRK_ITEM_SEQ
              ,      ZIM.TRK_ITEM_NAME
              ,      ZIM.TRK_ITEM_GROUP
              ,      ZIM.PROJECT_ID
              ,      ZIM.PROJECT_NO
              ,      ZIM.INVOICE_NUM
              ,      ZIM.ATTRIBUTE3
              ,      ZIM.ATTRIBUTE9
              ,      ZIM.ATTRIBUTE10
              ,      CASE WHEN DI.CNT = 1 THEN DI.INVOICE_NUM
                          WHEN DI.CNT > 1 THEN DI.INVOICE_NUM || ' 외 ' || DI.CALC_CNT || '건'
                     END AS SEL_INVOICE_NUM
              FROM ZVTS_ITEM_MASTER ZIM
              ,    PA_PROJECTS_ALL_INT PPA
              ,    (SELECT ZDI.TRK_ITEM_SEQ
              ,      COUNT(*) AS CNT
              ,      COUNT(*) - 1 AS CALC_CNT
              ,      MAX(ZDI.INVOICE_NUM) AS INVOICE_NUM
              FROM ZVTS_DESM_INVOICE ZDI
              GROUP BY ZDI.TRK_ITEM_SEQ) DI
              WHERE ZIM.PROJECT_ID = PPA.PROJECT_ID
              AND ZIM.TRK_ITEM_SEQ = DI.TRK_ITEM_SEQ(+)
              AND ZIM.PROJECT_NO = UPPER(#{PROJECT_NO})
              START WITH ZIM.TRK_ITEM_GROUP IS NULL
              CONNECT BY PRIOR ZIM.TRK_ITEM_SEQ = ZIM.TRK_ITEM_GROUP
             ) T
        ,    DESM_PACKING_MST DPM
        WHERE T.TRK_ITEM_NAME = DPM.TRK_ITEM_NAME
        AND T.PROJECT_NO = DPM.PROJECT_NO
        <if test='PACKAGE_LIST_NO != null and PACKAGE_LIST_NO !=""'>
        	AND UPPER(DPM.PACKAGE_LIST_NO) LIKE '%' || UPPER(#{PACKAGE_LIST_NO}) || '%'
        </if>
        <if test='PACKAGE_NO != null and PACKAGE_NO !=""'>
        	AND UPPER(DPM.PACKAGE_NO) LIKE '%' || UPPER(#{PACKAGE_NO}) || '%'
        </if>
        <if test='DESCRIPTION != null and DESCRIPTION !=""'>
        	AND UPPER(DPM.DESCRIPTION) LIKE '%' || UPPER(#{DESCRIPTION}) || '%'
        </if>
        <if test='IS_CONFIRM_MATERIAL != null and IS_CONFIRM_MATERIAL !=""'>
        	AND NVL(DPM.IS_CONFIRM_MATERIAL, 'N') = #{IS_CONFIRM_MATERIAL}
        </if>
       	<choose>
       		<when test='RECEIPTED == "Y"'>
       		AND DPM.RECEIPT_DATE IS NOT NULL
       		</when>
       		<when test='RECEIPTED == "N"'>
       		AND DPM.RECEIPT_DATE IS NULL
       		</when>
       	</choose>
		<if test='START_RECEIPT_DATE != null and START_RECEIPT_DATE != ""'>
		   AND DPM.RECEIPT_DATE >= TO_DATE(#{START_RECEIPT_DATE}, 'YYYY/MM/DD')
		 </if>
		 <if test='END_RECEIPT_DATE != null and END_RECEIPT_DATE != ""'>
		   AND DPM.RECEIPT_DATE <![CDATA[ < ]]> TO_DATE(#{END_RECEIPT_DATE}, 'YYYY/MM/DD') + 1
		 </if>
        <if test='ATTRIBUTE10 != null and ATTRIBUTE10 !=""'>
        	AND T.ATTRIBUTE10 = #{ATTRIBUTE10}
        </if>
        <if test='REMARK != null and REMARK !=""'>
        	AND UPPER(DPM.REMARK) LIKE '%' || UPPER(#{REMARK}) || '%'
        </if>
        <if test='VENDOR != null and VENDOR !=""'>
        	AND UPPER(T.ATTRIBUTE3) LIKE '%' || UPPER(#{VENDOR}) || '%'
        </if>
        <if test='SEQUENCE != null and SEQUENCE !=""'>
        	AND T.ATTRIBUTE9 = #{SEQUENCE}
        </if>
		<if test='LOCATION_LIST != null'>
			AND DPM.STORAGE_LOCATION IN
			<foreach collection="LOCATION_LIST" item="list" separator="," open="(" close=")">
				#{list.LOCATION}
			</foreach>
		</if>
	    ORDER BY T.SEL_INVOICE_NUM, DPM.PACKAGE_NO
	</select>

	<select id="getIdsmOsDetailList" parameterType="java.util.Map" resultType="java.util.HashMap">
		SELECT TT.*
		      FROM (SELECT DPD.PACKAGE_LIST_NO,
		      			  T.ATTRIBUTE3,
						  T.ATTRIBUTE9,
						  T.ATTRIBUTE10,
	                       DPD.PACKAGE_NO,
	                       DPD.DESCRIPTION,
	                       DPD.DRAWING_NO,
	                       DPD.TAG_NO,
                         	DPD.MATERIAL,
                         	DPD.MATERIAL_CODE,
	                       DPD.PACKAGE_TYPE,
						  DPD.TRK_ITEM_NAME,
		                  DPD.PROJECT_NO,
		                  DPD.LOCATION,
		                  DPD.REPORT_SHORT_QTY,
	                      DPD.REPORT_OVER_QTY,
	                      DPD.REPORT_DMG_QTY,
	                      DPD.REPORT_MISSING_QTY,
	                      DPMGT.TYPE,
						  DPMGT.CATEGORY,DPMGT.SUB_CATEGORY,DPMGT.COMMENTS,DPMGT.FILE_GRP_CD, NVL((SELECT CASE WHEN COUNT(*) = 0 THEN NULL ELSE COUNT(*) END FROM ESAATTH ATT WHERE ATT.GRP_CD  = DPMGT.FILE_GRP_CD  AND ATT.STS != 'D'),0)  ATTH_CNT,
				       CASE WHEN DPD.REPORT_SHORT = 'Y' THEN 1 ELSE 0 END AS REPORT_SHORT,
				       CASE WHEN DPD.REPORT_OVER = 'Y' THEN 1 ELSE 0 END AS REPORT_OVER,
				       CASE WHEN DPD.REPORT_DMG = 'Y' THEN 1 ELSE 0 END AS REPORT_DMG,
				       CASE WHEN DPD.REPORT_MISSING = 'Y' THEN 1 ELSE 0 END AS REPORT_MISSING,
                         TO_CHAR(DPD.GROSS, 'FM999,999,999,999,990.0') AS GROSS,
                         TO_CHAR(DPD.NET, 'FM999,999,999,999,990.0') AS NET,
                         TO_CHAR(DPD.RT, 'FM999,999,999,999,990.0') AS RT,
                         TO_CHAR(DPD.L_CM, 'FM999,999,999,999,999') AS L_CM,
                         TO_CHAR(DPD.W_CM, 'FM999,999,999,999,999') AS W_CM,
                         TO_CHAR(DPD.H_CM, 'FM999,999,999,999,999') AS H_CM,
                         TO_CHAR(DPD.VOLUME, 'FM999,999,999,999,990.0') AS VOLUME,
	                       T.ONSITE_ACTUAL_DATE,
	                       DPD.UNIT,
	                       TO_CHAR(DPD.NOS, 'FM999,999,999,999,999') AS NOS,
	                       DPD.IN_QTY AS IN_QTY,

	                       DPD.RSI_QTY AS RSI_QTY,
	                       TO_CHAR(DPD.OUT_QTY, 'FM999,999,999,999,999') AS OUT_QTY,
                           NVL(DPD.RSI_QTY, 0) - NVL(DPD.OUT_QTY, 0) - NVL(DPD.RSI_CANCEL_QTY, 0) AS BALANCE_QTY,
                           NVL(DPD.IN_QTY, 0) - NVL(DPD.OUT_QTY, 0) + NVL(DPD.RETURN_QTY, 0) AS REMAIN_QTY,

                           DPD.RSI_QTY AS RSI_QTY_NUM,
                           DPD.OUT_QTY AS OUT_QTY_NUM,
                           NVL(DPD.RSI_QTY, 0) - NVL(DPD.OUT_QTY, 0) - NVL(DPD.RSI_CANCEL_QTY, 0) AS BALANCE_QTY_NUM,
                           NVL(DPD.IN_QTY, 0) - NVL(DPD.OUT_QTY, 0)  + NVL(DPD.RETURN_QTY, 0) AS REMAIN_QTY_NUM,
                           DPD.MRF_QTY,
                           DPD.RSI_CANCEL_QTY,
                           DPD.RETURN_QTY,
                           NVL(DPD.MRF_QTY, 0) - NVL(DPD.RSI_CANCEL_QTY, 0) - NVL(DPD.RETURN_QTY, 0) AS MRF_BALANCE_QTY,
	                       DPD.REMARKS,
	                       DPM.IS_CONFIRM_MATERIAL,
	                       DPD.ITEM_SIZE,
	                       T_MIR.MIR_NAME,
	                       T_MIR.OSDM_NAME,
	                       T_MIR.INSPECTION_RESULT,
	                       T_MIR.MIR_REMARK
		              FROM (SELECT ZIM.TRK_ITEM_SEQ,
		                           ZIM.TRK_ITEM_NAME,
		                           ZIM.TRK_ITEM_GROUP,
		                           ZIM.ORGANIZATION_ID,
		                           ZIM.PROJECT_ID,
		                           ZIM.PROJECT_NO,
		                           PPA.NAME as PROJECT_NAME,
		                           ZIM.TASK_ID,
		                           ZIM.TASK_NUMBER,
		                           ZIM.BATCH,
		                           ZIM.OFFSHORE,
		                           ZIM.PRIMAVERA_ID,
		                           TO_CHAR(ZIM.MPS_PLAN_DATE, 'YYYY/MM/DD') as MPS_PLAN_DATE,
		                           TO_CHAR(ZIM.MPS_EXPECTED_DATE, 'YYYY/MM/DD') as MPS_EXPECTED_DATE,
		                           TO_CHAR(ZIM.MPS_ACTUAL_DATE, 'YYYY/MM/DD') as MPS_ACTUAL_DATE,
		                           ZIM.PURCHASE_DURATION,
		                           TO_CHAR(ZIM.PO_PLAN_DATE, 'YYYY/MM/DD') as PO_PLAN_DATE,
		                           TO_CHAR(ZIM.PO_EXPECTED_DATE, 'YYYY/MM/DD') as PO_EXPECTED_DATE,
		                           TO_CHAR(ZIM.PO_ATCUAL_DATE, 'YYYY/MM/DD') as PO_ATCUAL_DATE,
		                           ZIM.MAKE_DURATION,
		                           ZIM.PROGRESS,
		                           TO_CHAR(ZIM.CARGO_PLAN_DATE, 'YYYY/MM/DD') as CARGO_PLAN_DATE,
		                           TO_CHAR(ZIM.CARGO_EXPECTED_DATE, 'YYYY/MM/DD') as CARGO_EXPECTED_DATE,
		                           TO_CHAR(ZIM.CARGO_PROMISED_DATE, 'YYYY/MM/DD') as CARGO_PROMISED_DATE,
		                           TO_CHAR(ZIM.CARGO_ACTUAL_DATE, 'YYYY/MM/DD') as CARGO_ACTUAL_DATE,
		                           ZIM.SHIPMENT_DURATION,
		                           TO_CHAR(ZIM.FOB_PLAN_DATE, 'YYYY/MM/DD') as FOB_PLAN_DATE,
		                           TO_CHAR(ZIM.FOB_EXPECTED_DATE, 'YYYY/MM/DD') as FOB_EXPECTED_DATE,
		                           TO_CHAR(ZIM.FOB_ACTUAL_DATE, 'YYYY/MM/DD') as FOB_ACTUAL_DATE,
		                           ZIM.TRANS_DURATION,
		                           TO_CHAR(ZIM.ONSITE_PLAN_DATE, 'YYYY/MM/DD') as ONSITE_PLAN_DATE,
		                           TO_CHAR(ZIM.ONSITE_EXPECTED_DATE, 'YYYY/MM/DD') as ONSITE_EXPECTED_DATE,
		                           TO_CHAR(ZIM.ONSITE_ACTUAL_DATE, 'YYYY/MM/DD') as ONSITE_ACTUAL_DATE,
		                           ZIM.PAYMENT_MILESTONE,
		                           ZIM.TRK_ITEM_DEFAULT,
		                           ZIM.INVOICE_NUM,
		                           ZIM.ATTRIBUTE1,
		                           ZIM.ATTRIBUTE2,
		                           ZIM.ATTRIBUTE3,
		                           ZIM.ATTRIBUTE4,
		                           ZIM.ATTRIBUTE5,
		                           ZIM.ATTRIBUTE6,
		                           ZIM.ATTRIBUTE7,
		                           ZIM.ATTRIBUTE8,
		                           ZIM.ATTRIBUTE9,
		                           ZIM.ATTRIBUTE10,
		                           CASE WHEN DI.CNT = 1 THEN DI.INVOICE_NUM
		                                WHEN DI.CNT > 1 THEN DI.INVOICE_NUM || ' 외 ' || DI.CALC_CNT || '건' END AS SEL_INVOICE_NUM
		                      FROM ZVTS_ITEM_MASTER ZIM,
		                           PA_PROJECTS_ALL_INT PPA,
		                           (SELECT ZDI.TRK_ITEM_SEQ,
		                                   COUNT(*) AS CNT,
		                                   COUNT(*) - 1 AS CALC_CNT,
		                                   MAX(ZDI.INVOICE_NUM) AS INVOICE_NUM
		                              FROM ZVTS_DESM_INVOICE ZDI
		                            GROUP BY ZDI.TRK_ITEM_SEQ) DI
		                     WHERE ZIM.PROJECT_ID = PPA.PROJECT_ID
		                       AND ZIM.TRK_ITEM_SEQ = DI.TRK_ITEM_SEQ(+)
		                       AND ZIM.PROJECT_NO = UPPER(#{PROJECT_NO})
		                    START WITH ZIM.TRK_ITEM_GROUP IS NULL
		                    CONNECT BY PRIOR ZIM.TRK_ITEM_SEQ = ZIM.TRK_ITEM_GROUP) T,
		                    DESM_PACKING_DTL DPD,
		                    DESM_PACKING_MST DPM,
		                    DESM_PACKING_MGT DPMGT,
		                    (SELECT DMHH.MIR_NO
		                     ,      DMHH.MIR_NAME
		                     ,      DMHH.OSDM_NAME
		                     ,		DMLL.MATERIAL_CODE
		                     ,		DMLL.INSPECTION_RESULT
		                     ,      DMLL.REMARKS AS MIR_REMARK
		                     FROM DESM_MIR_HEADER DMHH
		                     ,    DESM_MIR_LINE   DMLL
		                     WHERE DMHH.MIR_HEADER_ID = DMLL.MIR_HEADER_ID
		                     AND   DMHH.PROJECT_NO = UPPER(#{PROJECT_NO})
		                    ) T_MIR
		             WHERE T.TRK_ITEM_NAME = DPD.TRK_ITEM_NAME
		               AND T.PROJECT_NO = DPD.PROJECT_NO
	                   AND DPD.PROJECT_NO = DPM.PROJECT_NO
	                   AND DPD.TRK_ITEM_NAME = DPM.TRK_ITEM_NAME
	                   AND DPD.PACKAGE_NO = DPM.PACKAGE_NO
	                   AND DPD.PROJECT_NO = DPMGT.PROJECT_NO(+)
					   AND DPD.MATERIAL_CODE = DPMGT.MATERIAL_CODE(+)
					   AND DPD.MATERIAL_CODE = T_MIR.MATERIAL_CODE(+)
					<if test='ATTRIBUTE10 != null and ATTRIBUTE10 != ""'>
						AND T.ATTRIBUTE10  = #{ATTRIBUTE10}
					</if>

		             ) TT
			  WHERE 1 = 1
			<if test='PACKAGE_LIST_NO != null and PACKAGE_LIST_NO != ""'>
				AND UPPER(PACKAGE_LIST_NO) LIKE '%' || UPPER(#{PACKAGE_LIST_NO}) || '%'
			</if>
			<if test='PACKAGE_NO != null and PACKAGE_NO != ""'>
				AND UPPER(PACKAGE_NO) LIKE '%' || UPPER(#{PACKAGE_NO}) || '%'
			</if>
			<if test='DESCRIPTION != null and DESCRIPTION != ""'>
				AND UPPER(DESCRIPTION) LIKE '%' || UPPER(#{DESCRIPTION}) || '%'
			</if>
			<if test='DRAWING_NO != null and DRAWING_NO != ""'>
				AND UPPER(DRAWING_NO) LIKE '%' || UPPER(#{DRAWING_NO}) || '%'
			</if>
			<if test='TAG_NO != null and TAG_NO != ""'>
				AND UPPER(TAG_NO) LIKE '%' || UPPER(#{TAG_NO}) || '%'
			</if>
			<if test='VENDOR != null and VENDOR !=""'>
				AND UPPER(ATTRIBUTE3) LIKE '%' || UPPER(#{VENDOR}) || '%'
			</if>
			<if test='SEQUENCE != null and SEQUENCE !=""'>
				AND ATTRIBUTE9 = #{SEQUENCE}
			</if>
			<if test='TYPE != null and TYPE !=""'>
				AND TYPE = #{TYPE}
			</if>
			<if test='CATEGORY != null and CATEGORY !=""'>
				AND UPPER(CATEGORY) LIKE '%' || UPPER(#{CATEGORY}) || '%'
			</if>
			<if test='SUB_CATEGORY != null and SUB_CATEGORY !=""'>
				AND UPPER(SUB_CATEGORY) LIKE '%' || UPPER(#{SUB_CATEGORY}) || '%'
			</if>
			<if test='COMMENTS != null and COMMENTS !=""'>
				AND UPPER(COMMENTS) LIKE '%' || UPPER(#{COMMENTS}) || '%'
			</if>
			<if test='VALUE1 != null and VALUE1 != ""'>
				<if test='KEY1 == "reamrks"'>AND UPPER(REMARKS) LIKE '%' || UPPER(#{VALUE1}) || '%'</if>
				<if test='KEY1 == "material"'>AND UPPER(MATERIAL_CODE) LIKE '%' || UPPER(#{VALUE1}) || '%'</if>
				<if test='KEY1 == "size"'>AND UPPER(ITEM_SIZE) LIKE '%' || UPPER(#{VALUE1}) || '%'</if>
			</if>
			<if test='LOCATION_LIST != null'>
				AND LOCATION IN
				<foreach collection="LOCATION_LIST" item="list" separator="," open="(" close=")">
					#{list.LOCATION}
				</foreach>
			</if>
			<if test='QTY == "0"'>
				<if test='QTY_TYPE == "rsi"'>
					AND RSI_QTY_NUM = 0
				</if>
				<if test='QTY_TYPE == "out"'>
					AND OUT_QTY_NUM = 0
				</if>
				<if test='QTY_TYPE == "balance"'>
					AND BALANCE_QTY_NUM = 0
				</if>
				<if test='QTY_TYPE == "remain"'>
					AND REMAIN_QTY_NUM = 0
				</if>
			</if>
			<if test='QTY == "1"'>
				<if test='QTY_TYPE == "rsi"'>
					AND RSI_QTY_NUM > 0
				</if>
				<if test='QTY_TYPE == "out"'>
					AND OUT_QTY_NUM > 0
				</if>
				<if test='QTY_TYPE == "balance"'>
					AND BALANCE_QTY_NUM > 0
				</if>
				<if test='QTY_TYPE == "remain"'>
					AND REMAIN_QTY_NUM > 0
				</if>
			</if>
		ORDER BY MATERIAL_CODE,
				 PACKAGE_LIST_NO,
				 TRK_ITEM_NAME,
		         PACKAGE_NO,
		         DRAWING_NO,
		         TAG_NO
	</select>

	<select id="getIdsmOsSummaryListMirCheck" parameterType="java.util.Map" resultType="java.util.HashMap">
		SELECT DPM.MIR_NO,
		       DPM.PACKAGE_NO,
		       DPM.TRK_ITEM_NAME,
		       DPM.STATUS
		  FROM DESM_PACKING_MIR DPM
		 WHERE DPM.PACKAGE_NO = #{PACKAGE_NO}
		   AND DPM.TRK_ITEM_NAME = #{TRK_ITEM_NAME}
		   AND DPM.PROJECT_NO = #{PROJECT_NO}
	</select>

	<select id="getIdsmOsSummaryListMirAcceptCheck" parameterType="java.util.Map" resultType="java.util.HashMap">
	    SELECT DPM.MIR_NO,
	           DPM.PACKAGE_NO,
	           DPM.TRK_ITEM_NAME,
	           DPM.STATUS AS MIR_STATUS,
	           DPR.STATUS AS RFI_STATUS,
	           CASE WHEN DPM.STATUS = 'create' AND (DPR.STATUS IS NULL OR DPR.STATUS = 'cancel')
	                THEN 'Y' ELSE 'N' END AS CHECK_YN
	      FROM DESM_PACKING_MIR DPM,
	           DESM_PACKING_RFI DPR
	     WHERE DPM.PROJECT_NO = DPR.PROJECT_NO(+)
	       AND DPM.TRK_ITEM_NAME = DPR.TRK_ITEM_NAME(+)
	       AND DPM.PACKAGE_NO = DPR.PACKAGE_NO(+)
		 	AND DPM.PACKAGE_NO = #{PACKAGE_NO}
		   AND DPM.TRK_ITEM_NAME = #{TRK_ITEM_NAME}
		   AND DPM.PROJECT_NO = #{PROJECT_NO}
	</select>

	<select id="getIdsmOsSummaryListMirNo" parameterType="java.util.Map" resultType="java.util.HashMap">
		SELECT TO_NUMBER(NVL(MAX(MIR_NO), '0')) + 1 AS MIR_NO
		  FROM DESM_PACKING_MIR
	</select>

	<update id="saveIdsmOsSummaryListMirCreation" parameterType="java.util.Map">
		MERGE INTO DESM_PACKING_MIR A
		USING DUAL
		ON (A.PROJECT_NO = #{PROJECT_NO} AND A.TRK_ITEM_NAME = #{TRK_ITEM_NAME} AND A.PACKAGE_NO = #{PACKAGE_NO} )
		WHEN MATCHED THEN
		     UPDATE SET
		     A.MIR_NO = #{MIR_NO},
		     A.REMARKS = #{REMARKS},
		     A.STATUS = #{STATUS},
		     A.PREPARED_BY = #{PREPARED_BY},
		     A.CHECKED_BY = #{CHECKED_BY},
		     A.CONFIRMED_BY = #{CONFIRMED_BY},
		     A.INVOICE_NO = #{INVOICE_NO},
		     A.M_PACKAGE_NO = #{M_PACKAGE_NO},
		     A.RECEIVED_DATE = TO_DATE(#{RECEIVED_DATE}, 'YYYY/MM/DD'),
		     A.INSPECTION_DATE = TO_DATE(#{INSPECTION_DATE}, 'YYYY/MM/DD'),
		     A.CONSTRUCTION_ACTIVITY_NAME = #{CONSTRUCTION_ACTIVITY_NAME},
		     A.PL_NO = #{PL_NO},
		     A.REVIEWED_BY_EPC_QA_QC = #{REVIEWED_BY_EPC_QA_QC},
		     A.REVIEWED_BY_IRT_OE = #{REVIEWED_BY_IRT_OE},
		     A.LAST_UPDATE_DATE = SYSDATE,
		     A.LAST_UPDATED_BY = #{USER_AD}
		WHEN NOT MATCHED THEN
		     INSERT
		     (A.MIR_NO
		     ,A.PACKAGE_NO
		     ,A.PROJECT_NO
		     ,A.TRK_ITEM_NAME
		     ,A.REMARKS
		     ,A.STATUS
		     ,A.PREPARED_BY
		     ,A.CHECKED_BY
		     ,A.CONFIRMED_BY
		     ,A.REVIEWED_BY_EPC_QA_QC
		     ,A.REVIEWED_BY_IRT_OE
		     ,A.INVOICE_NO
		     ,A.M_PACKAGE_NO
		     ,A.RECEIVED_DATE
		     ,A.INSPECTION_DATE
		     ,A.CONSTRUCTION_ACTIVITY_NAME
		     ,A.PL_NO
		     ,A.LAST_UPDATE_DATE
		     ,A.LAST_UPDATED_BY
		     ,A.CREATION_DATE
		     ,A.CREATED_BY)
		     VALUES
		     (#{MIR_NO}
		     ,#{PACKAGE_NO}
		     ,#{PROJECT_NO}
		     ,#{TRK_ITEM_NAME}
		     ,#{REMARKS}
		     ,#{STATUS}
		     ,#{PREPARED_BY}
		     ,#{CHECKED_BY}
		     ,#{CONFIRMED_BY}
		     ,#{REVIEWED_BY_EPC_QA_QC}
		     ,#{REVIEWED_BY_IRT_OE}
		     ,#{INVOICE_NO}
		     ,#{M_PACKAGE_NO}
		     ,TO_DATE(#{RECEIVED_DATE}, 'YYYY-MM-DD')
		     ,TO_DATE(#{INSPECTION_DATE}, 'YYYY-MM-DD')
		     ,#{CONSTRUCTION_ACTIVITY_NAME}
		     ,#{PL_NO}
		     ,SYSDATE
		     ,#{USER_AD}
		     ,SYSDATE
		     ,#{USER_AD})
	</update>

	<select id="getIdsmOsSummaryListMirCancelCheck" parameterType="java.util.Map" resultType="java.util.HashMap">
		SELECT DPR.RFI_NO,
		       DPR.PACKAGE_NO,
		       DPR.TRK_ITEM_NAME,
		       DPR.STATUS
		  FROM DESM_PACKING_RFI DPR
		 WHERE DPR.PACKAGE_NO = #{PACKAGE_NO}
		   AND DPR.TRK_ITEM_NAME = #{TRK_ITEM_NAME}
		   AND DPR.PROJECT_NO = #{PROJECT_NO}
	</select>

	<update id="saveIdsmOsSummaryListMirStatus" parameterType="java.util.Map">
		MERGE INTO DESM_PACKING_MIR A
		USING DUAL
		ON (A.PROJECT_NO = #{PROJECT_NO} AND A.TRK_ITEM_NAME = #{TRK_ITEM_NAME} AND A.PACKAGE_NO = #{PACKAGE_NO} )
		WHEN MATCHED THEN
		     UPDATE SET
		     A.STATUS = #{STATUS},
		     A.LAST_UPDATE_DATE = SYSDATE,
		     A.LAST_UPDATED_BY = #{USER_AD}
	</update>

	<update id="saveIdsmOsSummaryList" parameterType="java.util.Map">
		UPDATE DESM_PACKING_MST
		   SET REPORT_LOST = #{REPORT_LOST},
		       REPORT_DESCRIPTION = #{REPORT_DESCRIPTION},
		       HAZARDOUS_MATERIAL = #{HAZARDOUS_MATERIAL},
		       QTY = #{QTY},
		       REMARK = #{REMARK},
		       REMARKS = #{REMARKS},
		       VENDOR = #{VENDOR},
		       OLD_INF_OF_VENDOR = #{OLD_INF_OF_VENDOR},
		       RECEIVED_DATE = #{RECEIVED_DATE},
		       SUB_CONTRACTOR = #{SUB_CONTRACTOR},
		       DESCRIPTION = #{DESCRIPTION},
		       RECEIPT_DATE = #{RECEIPT_DATE}
		 WHERE PACKAGE_NO = #{PACKAGE_NO}
		   AND PROJECT_NO = #{PROJECT_NO}
		   AND TRK_ITEM_NAME = #{TRK_ITEM_NAME}
	</update>

	<select id="getIdsmOsSummaryListRfiCheck" parameterType="java.util.Map" resultType="java.util.HashMap">
		SELECT DPM.MIR_NO,
		       DPM.PACKAGE_NO,
		       DPM.TRK_ITEM_NAME,
		       DPM.STATUS AS MIR_STATUS,
		       DPR.STATUS AS RFI_STATUS,
		       CASE WHEN DPM.STATUS = 'accept' AND (DPR.STATUS IS NULL OR DPR.STATUS = 'cancel')
		            THEN 'Y' ELSE 'N' END AS CHECK_YN
		  FROM DESM_PACKING_MIR DPM,
		       DESM_PACKING_RFI DPR
		 WHERE DPM.PROJECT_NO = DPR.PROJECT_NO(+)
		   AND DPM.TRK_ITEM_NAME = DPR.TRK_ITEM_NAME(+)
		   AND DPM.PACKAGE_NO = DPR.PACKAGE_NO(+)
		   AND DPM.PACKAGE_NO = #{PACKAGE_NO}
		   AND DPM.TRK_ITEM_NAME = #{TRK_ITEM_NAME}
		   AND DPM.PROJECT_NO = #{PROJECT_NO}
	</select>

	<select id="getIdsmOsSummaryListRfiNo" parameterType="java.util.Map" resultType="java.util.HashMap">
		SELECT TO_NUMBER(NVL(MAX(RFI_NO), '0')) + 1 AS RFI_NO
		  FROM DESM_PACKING_RFI
	</select>

	<update id="saveIdsmOsSummaryListRfiCreation" parameterType="java.util.Map">
		MERGE INTO DESM_PACKING_RFI A
		USING DUAL
		ON (A.PROJECT_NO = #{PROJECT_NO} AND A.TRK_ITEM_NAME = #{TRK_ITEM_NAME} AND A.PACKAGE_NO = #{PACKAGE_NO} )
		WHEN MATCHED THEN
		     UPDATE SET
		     A.RFI_NO = #{RFI_NO},
		     A.REMARKS = #{REMARKS},
		     A.STATUS = #{STATUS},
		     A.PREPARED_BY = #{PREPARED_BY},
		     A.CHECKED_BY = #{CHECKED_BY},
		     A.CONFIRMED_BY = #{CONFIRMED_BY},
		     A.REVIEWED_BY_EPC_QA_QC = #{REVIEWED_BY_EPC_QA_QC},
		     A.REVIEWED_BY_IRT_OE = #{REVIEWED_BY_IRT_OE},
		     A.LAST_UPDATE_DATE = SYSDATE,
		     A.LAST_UPDATED_BY = #{USER_AD}
		WHEN NOT MATCHED THEN
		     INSERT
		     (A.RFI_NO
		     ,A.PACKAGE_NO
		     ,A.PROJECT_NO
		     ,A.TRK_ITEM_NAME
		     ,A.REMARKS
		     ,A.STATUS
		     ,A.PREPARED_BY
		     ,A.CHECKED_BY
		     ,A.CONFIRMED_BY
		     ,A.REVIEWED_BY_EPC_QA_QC
		     ,A.REVIEWED_BY_IRT_OE
		     ,A.LAST_UPDATE_DATE
		     ,A.LAST_UPDATED_BY
		     ,A.CREATION_DATE
		     ,A.CREATED_BY)
		     VALUES
		     (#{RFI_NO}
		     ,#{PACKAGE_NO}
		     ,#{PROJECT_NO}
		     ,#{TRK_ITEM_NAME}
		     ,#{REMARKS}
		     ,#{STATUS}
		     ,#{PREPARED_BY}
		     ,#{CHECKED_BY}
		     ,#{CONFIRMED_BY}
		     ,#{REVIEWED_BY_EPC_QA_QC}
		     ,#{REVIEWED_BY_IRT_OE}
		     ,SYSDATE
		     ,#{USER_AD}
		     ,SYSDATE
		     ,#{USER_AD})
	</update>

	<select id="getIdsmOsSummaryListRfiCancelCheck" parameterType="java.util.Map" resultType="java.util.HashMap">
	    SELECT DPM.MIR_NO,
	           DPM.PACKAGE_NO,
	           DPM.TRK_ITEM_NAME,
	           DPM.STATUS AS MIR_STATUS,
	           DPR.STATUS AS RFI_STATUS,
	           CASE WHEN DPM.STATUS = 'accept' AND (DPR.STATUS = 'create' OR DPR.STATUS = 'accept')
	                THEN 'Y' ELSE 'N' END AS CHECK_YN
	      FROM DESM_PACKING_MIR DPM,
	           DESM_PACKING_RFI DPR
	     WHERE DPM.PROJECT_NO = DPR.PROJECT_NO(+)
	       AND DPM.TRK_ITEM_NAME = DPR.TRK_ITEM_NAME(+)
	       AND DPM.PACKAGE_NO = DPR.PACKAGE_NO(+)
		 	AND DPM.PACKAGE_NO = #{PACKAGE_NO}
		   AND DPM.TRK_ITEM_NAME = #{TRK_ITEM_NAME}
		   AND DPM.PROJECT_NO = #{PROJECT_NO}
	</select>

	<update id="saveIdsmOsSummaryListRfiStatus" parameterType="java.util.Map">
		MERGE INTO DESM_PACKING_RFI A
		USING DUAL
		ON (A.PROJECT_NO = #{PROJECT_NO} AND A.TRK_ITEM_NAME = #{TRK_ITEM_NAME} AND A.PACKAGE_NO = #{PACKAGE_NO} )
		WHEN MATCHED THEN
		     UPDATE SET
		     A.STATUS = #{STATUS},
		     A.LAST_UPDATE_DATE = SYSDATE,
		     A.LAST_UPDATED_BY = #{USER_AD}
	</update>

	<select id="getIdsmOsSummaryListRfiAcceptCheck" parameterType="java.util.Map" resultType="java.util.HashMap">
	    SELECT DPM.MIR_NO,
	           DPM.PACKAGE_NO,
	           DPM.TRK_ITEM_NAME,
	           DPM.STATUS AS MIR_STATUS,
	           DPR.STATUS AS RFI_STATUS,
	           CASE WHEN DPM.STATUS = 'accept' AND DPR.STATUS = 'create'
	                THEN 'Y' ELSE 'N' END AS CHECK_YN
	      FROM DESM_PACKING_MIR DPM,
	           DESM_PACKING_RFI DPR
	     WHERE DPM.PROJECT_NO = DPR.PROJECT_NO(+)
	       AND DPM.TRK_ITEM_NAME = DPR.TRK_ITEM_NAME(+)
	       AND DPM.PACKAGE_NO = DPR.PACKAGE_NO(+)
		 	AND DPM.PACKAGE_NO = #{PACKAGE_NO}
		   AND DPM.TRK_ITEM_NAME = #{TRK_ITEM_NAME}
		   AND DPM.PROJECT_NO = #{PROJECT_NO}
	</select>

	<update id="saveIdsmRfiCreationSetUpAppliedProcedure" parameterType="java.util.Map">
		MERGE INTO DESM_PACKING_RFI_AP A
		USING DUAL
		ON (A.SEQ = #{SEQ})
		WHEN MATCHED THEN
		     UPDATE SET A.NAME = #{NAME},
		                A.LAST_UPDATED_BY = #{USER_AD},
		                A.LAST_UPDATE_DATE = SYSDATE
		WHEN NOT MATCHED THEN
		     INSERT
		     (A.SEQ
		     ,A.NAME
		     ,A.USE_YN
		     ,A.LAST_UPDATE_DATE
		     ,A.LAST_UPDATED_BY
		     ,A.CREATION_DATE
		     ,A.CREATED_BY)
		     VALUES
		     (SEQ_DESM_PACKING_RFI_AP.NEXTVAL
		     ,#{NAME}
		     ,'Y'
		     ,SYSDATE
		     ,#{USER_AD}
		     ,SYSDATE
		     ,#{USER_AD})
	</update>

	<update id="saveIdsmRfiCreationSetUpProcedure" parameterType="java.util.Map">
		MERGE INTO DESM_PACKING_RFI_P A
		USING DUAL
		ON (A.SEQ = #{SEQ})
		WHEN MATCHED THEN
		     UPDATE SET A.NAME = #{NAME},
		                A.LAST_UPDATED_BY = #{USER_AD},
		                A.LAST_UPDATE_DATE = SYSDATE
		WHEN NOT MATCHED THEN
		     INSERT
		     (A.SEQ
		     ,A.NAME
		     ,A.USE_YN
		     ,A.LAST_UPDATE_DATE
		     ,A.LAST_UPDATED_BY
		     ,A.CREATION_DATE
		     ,A.CREATED_BY)
		     VALUES
		     (SEQ_DESM_PACKING_RFI_P.NEXTVAL
		     ,#{NAME}
		     ,'Y'
		     ,SYSDATE
		     ,#{USER_AD}
		     ,SYSDATE
		     ,#{USER_AD})
	</update>

	<update id="saveIdsmRfiCreationSetUpInspection" parameterType="java.util.Map">
		MERGE INTO DESM_PACKING_RFI_I A
		USING DUAL
		ON (A.SEQ = #{SEQ})
		WHEN MATCHED THEN
		     UPDATE SET A.NAME = #{NAME},
		                A.LAST_UPDATED_BY = #{USER_AD},
		                A.LAST_UPDATE_DATE = SYSDATE
		WHEN NOT MATCHED THEN
		     INSERT
		     (A.SEQ
		     ,A.NAME
		     ,A.USE_YN
		     ,A.LAST_UPDATE_DATE
		     ,A.LAST_UPDATED_BY
		     ,A.CREATION_DATE
		     ,A.CREATED_BY)
		     VALUES
		     (SEQ_DESM_PACKING_RFI_I.NEXTVAL
		     ,#{NAME}
		     ,'Y'
		     ,SYSDATE
		     ,#{USER_AD}
		     ,SYSDATE
		     ,#{USER_AD})
	</update>

	<insert id="saveIdsmRfiCreationSetUpAttachments" parameterType="java.util.Map">
		INSERT INTO DESM_PACKING_RFI_A
	     (SEQ
	     ,NAME
	     ,LAST_UPDATE_DATE
	     ,LAST_UPDATED_BY
	     ,CREATION_DATE
	     ,CREATED_BY)
	    VALUES
	     (SEQ_DESM_PACKING_RFI_A.NEXTVAL
	     ,#{NAME}
	     ,SYSDATE
	     ,#{USER_AD}
	     ,SYSDATE
	     ,#{USER_AD})
	</insert>

	<select id="getIdsmRfiCreationSetUpAppliedProcedure" parameterType="java.util.Map" resultType="java.util.HashMap">
		SELECT SEQ,
		       NAME
		  FROM DESM_PACKING_RFI_AP
		 WHERE USE_YN = 'Y'
	</select>

	<select id="getIdsmRfiCreationSetUpProcedure" parameterType="java.util.Map" resultType="java.util.HashMap">
		SELECT SEQ,
		       NAME
		  FROM DESM_PACKING_RFI_P
		 WHERE USE_YN = 'Y'
	</select>

	<select id="getIdsmRfiCreationSetUpInspection" parameterType="java.util.Map" resultType="java.util.HashMap">
		SELECT SEQ,
		       NAME
		  FROM DESM_PACKING_RFI_I
		 WHERE USE_YN = 'Y'
	</select>

	<select id="getIdsmRfiCreationSetUpAttachments" parameterType="java.util.Map" resultType="java.util.HashMap">
		SELECT *
		  FROM (SELECT SEQ,
		               NAME,
		               ROW_NUMBER() OVER(ORDER BY SEQ DESC) AS RN
		          FROM DESM_PACKING_RFI_A)
		 WHERE RN = 1
	</select>

	<update id="deleteIdsmCreateItemSetupAppliedProcedure" parameterType="java.util.Map">
		UPDATE DESM_PACKING_RFI_AP
		   SET USE_YN = 'N',
               LAST_UPDATED_BY = #{USER_AD},
		       LAST_UPDATE_DATE = SYSDATE
		 WHERE SEQ = #{SEQ}
	</update>

	<update id="deleteIdsmCreateItemSetupProcedure" parameterType="java.util.Map">
		UPDATE DESM_PACKING_RFI_P
		   SET USE_YN = 'N',
               LAST_UPDATED_BY = #{USER_AD},
		       LAST_UPDATE_DATE = SYSDATE
		 WHERE SEQ = #{SEQ}
	</update>

	<update id="deleteIdsmCreateItemSetupInspection" parameterType="java.util.Map">
		UPDATE DESM_PACKING_RFI_I
		   SET USE_YN = 'N',
               LAST_UPDATED_BY = #{USER_AD},
		       LAST_UPDATE_DATE = SYSDATE
		 WHERE SEQ = #{SEQ}
	</update>

	<select id="getIdsmRfiCreationLoginInfoList" parameterType="java.util.Map" resultType="java.util.HashMap">
		SELECT ZEMP_NM AS EMP_NAME
		      ,AD_USER_ID AS EMP_AD
		      ,ZORG_ID AS DEPT_CODE
		      ,ZORG_NM AS DEPT_NAME
		  FROM ZVTS_EMP
		 WHERE AD_USER_ID = #{USER_AD}
	</select>

	<select id="getIdsmRfiCreationDtList" parameterType="java.util.Map" resultType="java.util.HashMap">
		SELECT TO_CHAR(SYSDATE, 'YYYY-MM-DD') AS CUR_DT
		  FROM DUAL
	</select>

	<select id="getIdsmMirCreationLastData" parameterType="java.util.Map" resultType="java.util.HashMap">
		SELECT *
		  FROM (SELECT A.MIR_NO,
		               A.REMARKS,
		               A.PREPARED_BY,
		               ZE1.ZEMP_NM AS PREPARED_BY_NM,
		               ZE1.ZORG_NM AS PREPARED_BY_DN,
		               A.CHECKED_BY,
		               ZE2.ZEMP_NM AS CHECKED_BY_NM,
		               ZE2.ZORG_NM AS CHECKED_BY_DN,
		               A.CONFIRMED_BY,
		               ZE3.ZEMP_NM AS CONFIRMED_BY_NM,
		               ZE3.ZORG_NM AS CONFIRMED_BY_DN,
		               A.REVIEWED_BY_EPC_QA_QC,
		               ZE4.ZEMP_NM AS REVIEWED_BY_EPC_QA_QC_NM,
		               ZE4.ZORG_NM AS REVIEWED_BY_EPC_QA_QC_DN,
		               A.REVIEWED_BY_IRT_OE,
		               ZE5.ZEMP_NM AS REVIEWED_BY_IRT_OE_NM,
		               ZE5.ZORG_NM AS REVIEWED_BY_IRT_OE_DN,
		               A.INVOICE_NO,
		               A.M_PACKAGE_NO,
		               TO_CHAR(A.RECEIVED_DATE, 'YYYY/MM/DD') AS RECEIVED_DATE,
		               TO_CHAR(A.INSPECTION_DATE, 'YYYY/MM/DD') AS INSPECTION_DATE,
		               A.CONSTRUCTION_ACTIVITY_NAME,
		               A.PL_NO,
		               ROW_NUMBER() OVER(ORDER BY LAST_UPDATE_DATE) AS RN
		          FROM DESM_PACKING_MIR A,
		               ZVTS_EMP ZE1,
		               ZVTS_EMP ZE2,
		               ZVTS_EMP ZE3,
		               ZVTS_EMP ZE4,
		               ZVTS_EMP ZE5
		         WHERE A.PREPARED_BY = ZE1.AD_USER_ID(+)
		          AND A.CHECKED_BY = ZE2.AD_USER_ID(+)
		          AND A.CONFIRMED_BY = ZE3.AD_USER_ID(+)
		          AND A.REVIEWED_BY_EPC_QA_QC = ZE4.AD_USER_ID(+)
		          AND A.REVIEWED_BY_IRT_OE = ZE5.AD_USER_ID(+)
		          AND STATUS != 'cancel'
		          AND LAST_UPDATED_BY = #{USER_AD})
		 WHERE RN = 1
	</select>

	<update id="saveIdsmOsSummaryListConfirmMaterial" parameterType="java.util.Map">
		MERGE INTO DESM_PACKING_MST A
		USING DUAL
		ON (A.PROJECT_NO = #{PROJECT_NO} AND A.TRK_ITEM_NAME = #{TRK_ITEM_NAME} AND A.PACKAGE_NO = #{PACKAGE_NO} )
		WHEN MATCHED THEN
		     UPDATE SET
		     A.IS_CONFIRM_MATERIAL = 'Y',
		     A.CONFIRM_DATE = SYSDATE
	</update>

	<select id="getDesmRsiPlDetailList" parameterType="java.util.Map" resultType="java.util.HashMap">
		SELECT *
		  FROM (SELECT DPD.PACKAGE_LIST_NO,
		               DPD.PACKAGE_NO,
		               DPD.DESCRIPTION,
		               DPD.DRAWING_NO,
		               DPD.TAG_NO,
		               DPD.MATERIAL,
		               DPD.MATERIAL_CODE,
		               DPD.PACKAGE_TYPE,
		               DPMGT.TYPE,
					   DPMGT.CATEGORY,
					   DPMGT.SUB_CATEGORY,
					   DPMGT.COMMENTS,
					   DPMGT.FILE_GRP_CD,
					   NVL((SELECT CASE WHEN COUNT(*) = 0 THEN NULL ELSE COUNT(*) END FROM ESAATTH ATT WHERE ATT.GRP_CD  = DPMGT.FILE_GRP_CD  AND ATT.STS != 'D'),0)  ATTH_CNT,
	                   TO_CHAR(DPD.GROSS, 'FM999,999,999,999,990.0') AS GROSS,
	                   TO_CHAR(DPD.NET, 'FM999,999,999,999,990.0') AS NET,
	                   TO_CHAR(DPD.RT, 'FM999,999,999,999,990.0') AS RT,
	                   TO_CHAR(DPD.L_CM, 'FM999,999,999,999,999') AS L_CM,
	                   TO_CHAR(DPD.W_CM, 'FM999,999,999,999,999') AS W_CM,
	                   TO_CHAR(DPD.H_CM, 'FM999,999,999,999,999') AS H_CM,
	                   TO_CHAR(DPD.VOLUME, 'FM999,999,999,999,990.0') AS VOLUME,
	                   DPD.IN_QTY AS IN_QTY,
	                   CASE WHEN DPMGT.TYPE = 'SP' OR DPMGT.TYPE = 'MP' OR DPMGT.TYPE = 'CP' OR DPMGT.TYPE = 'RP' OR DPMGT.TYPE = 'TP' 
	                   		THEN NVL(DPMGT.RSI_CONFIRM_QTY, 0) - NVL(DPD.RSI_QTY, 0) + NVL(DPD.RSI_CANCEL_QTY, 0) + NVL(DPD.RETURN_QTY, 0)
	                   		ELSE NVL(DPD.IN_QTY, 0) - NVL(DPD.RSI_QTY, 0) + NVL(DPD.RSI_CANCEL_QTY, 0) + NVL(DPD.RETURN_QTY, 0)
	                   		END  AS REQ_AVAILABLE_QTY,
		               DPD.UNIT,
		               DPD.PROJECT_NO,
		               DPD.REMARKS,
		               DPD.ITEM_SIZE,
		               DMLL.INSPECTION_RESULT AS MIR_INSPECTION,
		               ZIM.ATTRIBUTE3 AS VENDOR
		          FROM DESM_PACKING_MST DPM,
		          	   ZVTS_ITEM_MASTER ZIM,
		          	   DESM_PACKING_DTL DPD,
		          	   DESM_PACKING_MGT DPMGT,
		          	   DESM_MIR_LINE DMLL
		         WHERE DPM.PROJECT_NO = ZIM.PROJECT_NO
	               AND DPM.TRK_ITEM_NAME = ZIM.TRK_ITEM_NAME
		           AND DPM.PROJECT_NO = DPD.PROJECT_NO
	               AND DPM.TRK_ITEM_NAME = DPD.TRK_ITEM_NAME
	               AND DPM.PACKAGE_NO = DPD.PACKAGE_NO
	               AND DPD.PROJECT_NO = DPMGT.PROJECT_NO(+)
				   AND DPD.MATERIAL_CODE = DPMGT.MATERIAL_CODE(+)
	               AND DPM.IS_CONFIRM_MATERIAL = 'Y'
		           AND DPD.PROJECT_NO = UPPER(#{PROJECT_NO})
		           AND DPD.MATERIAL_CODE = DMLL.MATERIAL_CODE(+)
		         <if test='PACKAGE_LIST_NO != null and PACKAGE_LIST_NO != ""'>
		           AND UPPER(DPD.PACKAGE_LIST_NO) LIKE '%' || UPPER(#{PACKAGE_LIST_NO}) || '%'
		         </if>
		         <if test='PACKAGE_NO != null and PACKAGE_NO != ""'>
		           AND UPPER(DPD.PACKAGE_NO) LIKE '%' || UPPER(#{PACKAGE_NO}) || '%'
		         </if>
		         <if test='DESCRIPTION != null and DESCRIPTION != ""'>
		           AND UPPER(DPD.DESCRIPTION) LIKE '%' || UPPER(#{DESCRIPTION}) || '%'
		         </if>
		         <if test='DRAWING_NO != null and DRAWING_NO != ""'>
		           AND UPPER(DPD.DRAWING_NO) LIKE '%' || UPPER(#{DRAWING_NO}) || '%'
		         </if>
		         <if test='TAG_NO != null and TAG_NO != ""'>
		           AND UPPER(DPD.TAG_NO) LIKE '%' || UPPER(#{TAG_NO}) || '%'
		         </if>
		         <if test='MATERIAL != null and MATERIAL != ""'>
		           AND UPPER(DPD.MATERIAL) LIKE '%' || UPPER(#{MATERIAL}) || '%'
		         </if>
		         <if test='MATERIAL_CODE != null and MATERIAL_CODE != ""'>
		           AND UPPER(DPD.MATERIAL_CODE) LIKE '%' || UPPER(#{MATERIAL_CODE}) || '%'
		         </if>
		         <if test='ATTRIBUTE10 != null and ATTRIBUTE10 != ""'>
		           AND ZIM.ATTRIBUTE10 = #{ATTRIBUTE10}
		         </if>
		         <if test='REMARKS != null and REMARKS != ""'>
		           AND UPPER(DPD.REMARKS) LIKE '%' || UPPER(#{REMARKS}) || '%'
		         </if>
		         <if test='SIZE != null and SIZE != ""'>
		           AND UPPER(DPD.ITEM_SIZE) LIKE '%' || UPPER(#{SIZE}) || '%'
		         </if>
		         <if test='TYPE != null and TYPE !=""'>
					AND DPMGT.TYPE = #{TYPE}
				 </if>
				 <if test='CATEGORY != null and CATEGORY !=""'>
					AND UPPER(DPMGT.CATEGORY) LIKE '%' || UPPER(#{CATEGORY}) || '%'
				 </if>
				 <if test='SUB_CATEGORY != null and SUB_CATEGORY !=""'>
					AND UPPER(DPMGT.SUB_CATEGORY) LIKE '%' || UPPER(#{SUB_CATEGORY}) || '%'
				 </if>
				 <if test='COMMENTS != null and COMMENTS !=""'>
					AND UPPER(DPMGT.COMMENTS) LIKE '%' || UPPER(#{COMMENTS}) || '%'
				 </if>
				 <if test='VENDOR != null and VENDOR !=""'>
					AND UPPER(ZIM.ATTRIBUTE3) LIKE '%' || UPPER(#{VENDOR}) || '%'
				 </if>
					AND TO_CHAR(NVL(DPMGT.EXPIRED_DATE,SYSDATE), 'YYYY/MM/DD') >= TO_CHAR(SYSDATE, 'YYYY/MM/DD')
				)
		 WHERE REQ_AVAILABLE_QTY > 0
		ORDER BY  MATERIAL_CODE,PACKAGE_LIST_NO, PACKAGE_NO
	</select>

	<select id="getDesmRsiHeaderData" parameterType="java.util.Map" resultType="java.util.HashMap">
		SELECT 'RSI' || TO_CHAR(SYSDATE,'YYYY') || LPAD(RSI_NO_NUM, 6, '0') AS RSI_NO,
		       SEQ_DESM_RSI_HEADER.NEXTVAL AS RSI_HEADER_ID
		  FROM (SELECT CASE WHEN MAX(RSI_NO) IS NULL THEN 1
		                    ELSE TO_NUMBER(SUBSTR(MAX(RSI_NO), -6)) + 1 END AS RSI_NO_NUM
		          FROM DESM_RSI_HEADER
		         WHERE RSI_NO LIKE 'RSI' || TO_CHAR(SYSDATE,'YYYY') || '%')
	</select>

	<update id="saveDesmRsiLineSave" parameterType="java.util.Map">
		MERGE INTO DESM_RSI_LINE
		USING DUAL
		ON (RSI_LINE_ID = #{RSI_LINE_ID})
		WHEN MATCHED THEN
		     UPDATE SET
		            PACKING_LIST_NO = #{PACKING_LIST_NO},
		            PACKAGE_NO = #{PACKAGE_NO},
		            MATERIAL_CODE = #{MATERIAL_CODE},
		            DESCRIPTION = #{DESCRIPTION},
		            DRAWING_NO = #{DRAWING_NO},
		            ITEM_NO = #{ITEM_NO},
		            REQ_QTY = #{REQ_QTY},
		            LAST_UPDATED_BY = #{USER_AD},
		            LAST_UPDATE_DATE = SYSDATE
		WHEN NOT MATCHED THEN
		     INSERT
		     (RSI_HEADER_ID
		     ,RSI_LINE_ID
		     ,PACKING_LIST_NO
		     ,PACKAGE_NO
		     ,MATERIAL_CODE
		     ,DESCRIPTION
		     ,DRAWING_NO
		     ,ITEM_NO
		     ,REQ_QTY
		     ,CREATED_BY
		     ,CREATION_DATE
		     ,LAST_UPDATED_BY
		     ,LAST_UPDATE_DATE)
		     VALUES
		     (#{RSI_HEADER_ID}
		     ,SEQ_DESM_RSI_LINE.NEXTVAL
		     ,#{PACKING_LIST_NO}
		     ,#{PACKAGE_NO}
		     ,#{MATERIAL_CODE}
		     ,#{DESCRIPTION}
		     ,#{DRAWING_NO}
		     ,#{ITEM_NO}
		     ,#{REQ_QTY}
		     ,#{USER_AD}
		     ,SYSDATE
		     ,#{USER_AD}
		     ,SYSDATE)
	</update>

	<update id="saveDesmRsiHeaderSave" parameterType="java.util.Map">
		MERGE INTO DESM_RSI_HEADER
		USING DUAL
		ON (RSI_HEADER_ID = #{RSI_HEADER_ID})
		WHEN MATCHED THEN
		     UPDATE SET
		         <if test='REQUESTED_BY != null and REQUESTED_BY != ""'>
		            REQUESTED_BY = #{REQUESTED_BY},
		            <if test='STATUS != null and STATUS == "Pre-Checked"'>
		            REQUEST_DATE = SYSDATE,
		            </if>
		         </if>
		         <if test='CHECKED_BY != null and CHECKED_BY != ""'>
		            CHECKED_BY = #{CHECKED_BY},
		            <if test='STATUS != null and STATUS == "Pre-Confirmed"'>
		            CHECKED_DATE = SYSDATE,
		            </if>
		         </if>
		         <if test='CONFIRMED_BY != null and CONFIRMED_BY != ""'>
		            CONFIRMED_BY = #{CONFIRMED_BY},
		            <if test='STATUS != null and STATUS == "Pre-Approved"'>
		            CONFIRMED_DATE = SYSDATE,
		            </if>
		         </if>
		         <if test='APPROVED_BY != null and APPROVED_BY != ""'>
		            APPROVED_BY = #{APPROVED_BY},
		            <if test='STATUS != null and STATUS == "Approved"'>
		            APPROVED_DATE = SYSDATE,
		            </if>
		         </if>
		         	RSI_NAME = #{RSI_NAME},
		            STATUS = #{STATUS},
		            SUBCONTRACTOR = #{SUBCONTRACTOR},
		            HANDOVER_DATE = #{HANDOVER_DATE},
		            REMARK = #{REMARK},
		            ATTACH_GRP_CD = #{ATTACH_GRP_CD},
		            DESCRIPTION = #{DESCRIPTION},
		            LAST_UPDATED_BY = #{USER_AD},
		            LAST_UPDATE_DATE = SYSDATE
		WHEN NOT MATCHED THEN
		     INSERT
		     (RSI_HEADER_ID
		     ,RSI_NO
	       <if test='REQUESTED_BY != null and REQUESTED_BY != ""'>
	         ,REQUESTED_BY
             <if test='STATUS != null and STATUS == "Pre-Checked"'>
	         ,REQUEST_DATE
             </if>
	       </if>
	       <if test='CHECKED_BY != null and CHECKED_BY != ""'>
	         ,CHECKED_BY
             <if test='STATUS != null and STATUS == "Pre-Confirmed"'>
	         ,CHECKED_DATE
             </if>
	       </if>
	       <if test='CONFIRMED_BY != null and CONFIRMED_BY != ""'>
	         ,CONFIRMED_BY
             <if test='STATUS != null and STATUS == "Pre-Approved"'>
	         ,CONFIRMED_DATE
             </if>
	       </if>
	       <if test='APPROVED_BY != null and APPROVED_BY != ""'>
	         ,APPROVED_BY
             <if test='STATUS != null and STATUS == "Approved"'>
	         ,APPROVED_DATE
             </if>
	       </if>
	         ,RSI_NAME
		     ,STATUS
		     ,SUBCONTRACTOR
		     ,HANDOVER_DATE
		     ,REMARK
		     ,ATTACH_GRP_CD
		     ,DESCRIPTION
		     ,CREATED_BY
		     ,CREATION_DATE
		     ,LAST_UPDATED_BY
		     ,LAST_UPDATE_DATE)
		     VALUES
		     (#{RSI_HEADER_ID}
		     ,#{RSI_NO}
	       <if test='REQUESTED_BY != null and REQUESTED_BY != ""'>
	         ,#{REQUESTED_BY}
             <if test='STATUS != null and STATUS == "Pre-Checked"'>
	         ,SYSDATE
             </if>
	       </if>
	       <if test='CHECKED_BY != null and CHECKED_BY != ""'>
	         ,#{CHECKED_BY}
             <if test='STATUS != null and STATUS == "Pre-Confirmed"'>
	         ,SYSDATE
             </if>
	       </if>
	       <if test='CONFIRMED_BY != null and CONFIRMED_BY != ""'>
	         ,#{CONFIRMED_BY}
             <if test='STATUS != null and STATUS == "Pre-Approved"'>
	         ,SYSDATE
             </if>
	       </if>
	       <if test='APPROVED_BY != null and APPROVED_BY != ""'>
	         ,#{APPROVED_BY}
             <if test='STATUS != null and STATUS == "Approved"'>
	         ,SYSDATE
             </if>
	       </if>
	         ,#{RSI_NAME}
		     ,#{STATUS}
		     ,#{SUBCONTRACTOR}
		     ,#{HANDOVER_DATE}
		     ,#{REMARK}
		     ,#{ATTACH_GRP_CD}
		     ,#{DESCRIPTION}
		     ,#{USER_AD}
		     ,SYSDATE
		     ,#{USER_AD}
		     ,SYSDATE)
	</update>

	<select id="getDesmRsiLineQtyList" parameterType="java.util.Map" resultType="java.util.HashMap">
		SELECT DPD.MATERIAL_CODE,
		       MAX(NVL(IN_QTY,0)) - SUM(NVL(DRL.REQ_QTY, 0)) +
		       (SELECT NVL(SUM(NVL(DMR.RETURN_QTY,0)),0) AS RETURN_QTY
	              FROM DESM_MRF_LINE DML,
	                   DESM_MRF_RETURN DMR
	             WHERE DML.MRF_LINE_ID = DMR.MRF_LINE_ID
	               AND DML.MATERIAL_CODE = DPD.MATERIAL_CODE) AS REQ_AVAILABLE_QTY
		  FROM DESM_PACKING_MST DPM,
		  	   DESM_PACKING_DTL DPD,
		       DESM_RSI_LINE DRL
		 WHERE DPM.PROJECT_NO = DPD.PROJECT_NO
	       AND DPM.TRK_ITEM_NAME = DPD.TRK_ITEM_NAME
	       AND DPM.PACKAGE_NO = DPD.PACKAGE_NO
		   AND DPD.MATERIAL_CODE = DRL.MATERIAL_CODE(+)
		   AND DPM.IS_CONFIRM_MATERIAL = 'Y'
		   AND DPD.MATERIAL_CODE = #{MATERIAL_CODE}
         <if test='RSI_LINE_ID != null and RSI_LINE_ID != ""'>
           AND DRL.RSI_LINE_ID(+) != #{RSI_LINE_ID}
         </if>
		GROUP BY DPD.MATERIAL_CODE
	</select>

	<update id="saveDesmRsiQtySave" parameterType="java.util.Map">
	    MERGE INTO DESM_PACKING_DTL TTD
	    USING (SELECT DPD.PROJECT_NO,
	                  DPD.TRK_ITEM_NAME,
	                  DPD.PACKAGE_NO,
	                  DPD.MATERIAL_CODE,
	                  SUM(NVL(DRL.REQ_QTY, 0)) AS REQ_QTY
	             FROM DESM_PACKING_MST DPM,
	                  DESM_PACKING_DTL DPD,
	                  DESM_RSI_LINE DRL
	            WHERE DPM.PROJECT_NO = DPD.PROJECT_NO
	              AND DPM.TRK_ITEM_NAME = DPD.TRK_ITEM_NAME
	              AND DPM.PACKAGE_NO = DPD.PACKAGE_NO
	              AND DPD.MATERIAL_CODE = DRL.MATERIAL_CODE(+)
	              AND DPM.IS_CONFIRM_MATERIAL = 'Y'
	              AND DPD.MATERIAL_CODE = #{MATERIAL_CODE}
	           GROUP BY DPD.PROJECT_NO,
	                    DPD.TRK_ITEM_NAME,
	                    DPD.PACKAGE_NO,
	                    DPD.MATERIAL_CODE) TD
	    ON (TTD.PROJECT_NO = TD.PROJECT_NO AND TTD.TRK_ITEM_NAME = TD.TRK_ITEM_NAME AND TTD.PACKAGE_NO = TD.PACKAGE_NO AND TTD.MATERIAL_CODE = TD.MATERIAL_CODE)
	    WHEN MATCHED THEN
	         UPDATE SET TTD.RSI_QTY = TD.REQ_QTY
	</update>

	<select id="getDesmRsiList" parameterType="java.util.Map" resultType="java.util.HashMap">
		SELECT DRH.RSI_HEADER_ID,
		       DRH.RSI_NO,
		       DRH.RSI_NAME,
		       DRH.STATUS,
		       DRH.DESCRIPTION,
		       DRH.SUBCONTRACTOR,
		       DRH.SUBCON_MANAGER,
	           DRH.CREATED_BY,
	           TO_CHAR(DRH.CREATION_DATE + CT.OPERATOR / (24 * 60), 'YYYY/MM/DD HH24:MI:SS') AS CREATION_DATE,
	           DRH.LAST_UPDATED_BY,
	           TO_CHAR(DRH.LAST_UPDATE_DATE + CT.OPERATOR / (24 * 60), 'YYYY/MM/DD HH24:MI:SS') AS LAST_UPDATE_DATE,
		       TO_CHAR(DRH.REQUEST_DATE, 'YYYY/MM/DD') AS REQUEST_DATE,
		       TO_CHAR(DRH.HANDOVER_DATE, 'YYYY/MM/DD') AS HANDOVER_DATE,
		       TO_CHAR(DRH.APPROVED_DATE, 'YYYY/MM/DD') AS APPROVED_DATE,
		       DRH.CLOSED_CODE,
		       DRH.REMARK,
		       DRH.ATTACH_GRP_CD,
	           CASE WHEN DRH.REQUEST_DATE IS NOT NULL THEN DU1.USER_NAME END AS REQUESTED_BY_NAME,
	           CASE WHEN DRH.CHECKED_DATE IS NOT NULL THEN DU2.USER_NAME END AS CHECKED_BY_NAME,
	           CASE WHEN DRH.CONFIRMED_DATE IS NOT NULL THEN DU3.USER_NAME END AS CONFIRMED_BY_NAME,
	           CASE WHEN DRH.APPROVED_DATE IS NOT NULL THEN DU4.USER_NAME END AS APPROVED_BY_NAME,
	           CASE WHEN DRH.REQUEST_DATE IS NOT NULL THEN DRH.REQUESTED_BY END AS REQUESTED_BY,
	           CASE WHEN DRH.CHECKED_DATE IS NOT NULL THEN DRH.CHECKED_BY END AS CHECKED_BY,
	           CASE WHEN DRH.CONFIRMED_DATE IS NOT NULL THEN DRH.CONFIRMED_BY END AS CONFIRMED_BY,
	           CASE WHEN DRH.APPROVED_DATE IS NOT NULL THEN DRH.APPROVED_BY END AS APPROVED_BY,
		       (SELECT COUNT(*)
		          FROM ESAATTH A
		         WHERE A.SYS_ID = 'EMRO'
		           AND A.STS  <![CDATA[ <> ]]>   'D'
		           AND A.GRP_CD = DRH.ATTACH_GRP_CD) AS ATT_CNT
		  FROM DESM_RSI_HEADER DRH,
	           (SELECT NVL(TO_NUMBER(MAX(DCD.DTL_NAME_KO)), 0) AS OPERATOR
	              FROM DESM_USER_DEFAULT_COUNTRY DUDC, 
	                   DESM_CODE_DTL DCD
	             WHERE DUDC.COUNTRY_CODE = DCD.DTL_CODE
	               AND DCD.DELEGATE_FLAG = 'N'
	               AND DUDC.USER_AD = #{USER_AD}) CT,
	           DESM_USER DU1,
	           DESM_USER DU2,
	           DESM_USER DU3,
	           DESM_USER DU4
	     WHERE DRH.REQUESTED_BY = DU1.USER_AD(+)
	       AND DRH.CHECKED_BY = DU2.USER_AD(+)
	       AND DRH.CONFIRMED_BY = DU3.USER_AD(+)
	       AND DRH.APPROVED_BY = DU4.USER_AD(+)
		 <if test='STATUS != null and STATUS != ""'>
		   AND DRH.STATUS = #{STATUS}
		 </if>
		 <if test='CLOSED_CODE != null and CLOSED_CODE != ""'>
		   AND NVL(DRH.CLOSED_CODE, 'OPEN') = #{CLOSED_CODE}
		 </if>
		 <if test='RSI_NO != null and RSI_NO != ""'>
		   AND UPPER(DRH.RSI_NO) LIKE '%' || UPPER(#{RSI_NO}) || '%'
		 </if>
		 <if test='RSI_NAME != null and RSI_NAME != ""'>
		   AND UPPER(DRH.RSI_NAME) LIKE '%' || UPPER(#{RSI_NAME}) || '%'
		 </if>
		 <if test='DESCRIPTION != null and DESCRIPTION != ""'>
		   AND UPPER(DRH.DESCRIPTION) LIKE '%' || UPPER(#{DESCRIPTION}) || '%'
		 </if>
		 <if test='SUBCONTRACTOR != null and SUBCONTRACTOR != ""'>
		   AND UPPER(DRH.SUBCONTRACTOR) LIKE '%' || UPPER(#{SUBCONTRACTOR}) || '%'
		 </if>
		 <if test='START_REQUEST_DATE != null and START_REQUEST_DATE != ""'>
		   AND (DRH.HANDOVER_DATE >= TO_DATE(#{START_REQUEST_DATE}, 'YYYY/MM/DD') OR DRH.STATUS NOT IN('Approved'))
		 </if>
		 <if test='END_REQUEST_DATE != null and END_REQUEST_DATE != ""'>
		   AND (DRH.HANDOVER_DATE <![CDATA[ < ]]> TO_DATE(#{END_REQUEST_DATE}, 'YYYY/MM/DD') + 1 OR DRH.STATUS NOT IN('Approved'))
		 </if>
		 <if test='PROJECT_NO != null and PROJECT_NO != ""'>
		   AND DRH.PROJECT_NO = #{PROJECT_NO}
		 </if>
		 <if test='MATERIAL_TYPE != null and MATERIAL_TYPE != ""'>
           AND EXISTS (SELECT 1
                         FROM DESM_USER_ROLE DUR
                        WHERE DUR.ROLE_SEQ = #{MATERIAL_TYPE}
                          AND DUR.USER_AD = DRH.CHECKED_BY)
		 </if>
		ORDER BY DRH.STATUS DESC, DRH.RSI_HEADER_ID DESC

	</select>

	<select id="getDesmRsiHeaderList" parameterType="java.util.Map" resultType="java.util.HashMap">
		SELECT DRH.RSI_HEADER_ID,
		       DRH.RSI_NO,
		       DRH.RSI_NAME,
		       DRH.STATUS,
		       DRH.DESCRIPTION,
		       DRH.SUBCONTRACTOR,
		       DRH.SUBCON_MANAGER,
		       TO_CHAR(DRH.HANDOVER_DATE, 'YYYY/MM/DD') AS HANDOVER_DATE,
		       DRH.REMARK,
		       DRH.ATTACH_GRP_CD,
		       TO_CHAR(DRH.REQUEST_DATE + CT.OPERATOR / (24 * 60), 'YYYY/MM/DD HH24:MI:SS') AS REQUEST_DATE,
		       DRH.REQUESTED_BY,
		       DU1.USER_NAME AS REQUESTED_BY_NAME,
		       TO_CHAR(DRH.CHECKED_DATE + CT.OPERATOR / (24 * 60), 'YYYY/MM/DD HH24:MI:SS') AS CHECKED_DATE,
		       DRH.CHECKED_BY,
		       DU2.USER_NAME AS CHECKED_BY_NAME,
		       TO_CHAR(DRH.CONFIRMED_DATE + CT.OPERATOR / (24 * 60), 'YYYY/MM/DD HH24:MI:SS') AS CONFIRMED_DATE,
		       DRH.CONFIRMED_BY,
		       DU3.USER_NAME AS CONFIRMED_BY_NAME,
		       TO_CHAR(DRH.APPROVED_DATE + CT.OPERATOR / (24 * 60), 'YYYY/MM/DD HH24:MI:SS') AS APPROVED_DATE,
		       DRH.APPROVED_BY,
		       DU4.USER_NAME AS APPROVED_BY_NAME
		  FROM DESM_RSI_HEADER DRH,
		       (SELECT NVL(TO_NUMBER(MAX(DCD.DTL_NAME_KO)), 0) AS OPERATOR
		          FROM DESM_USER_DEFAULT_COUNTRY DUDC,
		               DESM_CODE_DTL DCD
		         WHERE DUDC.COUNTRY_CODE = DCD.DTL_CODE
		           AND DCD.DELEGATE_FLAG = 'N'
		           AND DUDC.USER_AD = #{USER_AD}) CT,
		       DESM_USER DU1,
		       DESM_USER DU2,
		       DESM_USER DU3,
		       DESM_USER DU4
		 WHERE DRH.REQUESTED_BY = DU1.USER_AD(+)
		   AND DRH.CHECKED_BY = DU2.USER_AD(+)
		   AND DRH.CONFIRMED_BY = DU3.USER_AD(+)
		   AND DRH.APPROVED_BY = DU4.USER_AD(+)
		   AND DRH.RSI_HEADER_ID = #{RSI_HEADER_ID}
	</select>

	<select id="getDesmRsiLineList" parameterType="java.util.Map" resultType="java.util.HashMap">
		SELECT ROW_NUMBER() OVER(ORDER BY DRL.RSI_LINE_ID) AS NO,
			   DRL.RSI_HEADER_ID,
		       DRL.RSI_LINE_ID,
		       DRL.PACKING_LIST_NO AS PACKAGE_LIST_NO,
		       DRL.PACKAGE_NO,
		       DRL.MATERIAL_CODE,
		       DRL.DESCRIPTION,
		       DRL.DRAWING_NO,
		       DRL.REQ_QTY,
		       DRL.ITEM_NO AS TAG_NO,
		       DPD.MATERIAL,
		       DPD.PACKAGE_TYPE,
		       DPD.UNIT,
		       DPD.IN_QTY,
		       DPD.PROJECT_NO,
		       DPD.REMARKS,
		       DPMGT.TYPE,
			   DPMGT.CATEGORY,DPMGT.SUB_CATEGORY,DPMGT.COMMENTS,DPMGT.FILE_GRP_CD, NVL((SELECT CASE WHEN COUNT(*) = 0 THEN NULL ELSE COUNT(*) END FROM ESAATTH ATT WHERE ATT.GRP_CD  = DPMGT.FILE_GRP_CD  AND ATT.STS != 'D'),0)  ATTH_CNT,
	           NVL(DPD.IN_QTY, 0) -
	           (SELECT NVL(SUM(NVL(T.REQ_QTY,0)),0) AS REQ_QTY
	              FROM DESM_RSI_LINE T
	             WHERE T.MATERIAL_CODE = DRL.MATERIAL_CODE
	               AND T.RSI_LINE_ID != DRL.RSI_LINE_ID  ) +
	           (SELECT NVL(SUM(NVL(DMR.RETURN_QTY,0)),0) AS RETURN_QTY
	              FROM DESM_MRF_LINE DML,
	                   DESM_MRF_RETURN DMR
	             WHERE DML.MRF_LINE_ID = DMR.MRF_LINE_ID
	               AND DML.MATERIAL_CODE = DRL.MATERIAL_CODE
	               AND DML.RSI_OUTGOING_ID IS NOT NULL
                   AND DML.RSI_LINE_ID != DRL.RSI_LINE_ID) AS REQ_AVAILABLE_QTY,
               DMLL.INSPECTION_RESULT AS MIR_INSPECTION
		  FROM DESM_PACKING_MST DPM,
		       DESM_PACKING_DTL DPD,
		       DESM_PACKING_MGT DPMGT,
		       DESM_RSI_LINE DRL,
		       DESM_MIR_LINE DMLL
		 WHERE DPM.PROJECT_NO = DPD.PROJECT_NO
		   AND DPM.TRK_ITEM_NAME = DPD.TRK_ITEM_NAME
		   AND DPM.PACKAGE_NO = DPD.PACKAGE_NO
		   AND DPD.MATERIAL_CODE = DRL.MATERIAL_CODE
		   AND DPD.PROJECT_NO = DPMGT.PROJECT_NO(+)
		   AND DPD.MATERIAL_CODE = DPMGT.MATERIAL_CODE(+)
		   AND DPD.MATERIAL_CODE = DMLL.MATERIAL_CODE(+)
		   AND DPM.IS_CONFIRM_MATERIAL = 'Y'
		   AND DRL.RSI_HEADER_ID = #{RSI_HEADER_ID}
	</select>

	<update id="saveDesmRsiFileGrpCd" parameterType="java.util.Map">
		UPDATE DESM_RSI_HEADER
		   SET ATTACH_GRP_CD = #{FILE_GRP_CD}
		 WHERE RSI_HEADER_ID = #{RSI_HEADER_ID}
	</update>

	<delete id="deleteDesmRsiDtl" parameterType="java.util.Map">
		DELETE FROM DESM_RSI_LINE
		 WHERE RSI_LINE_ID = #{RSI_LINE_ID}
	</delete>

	<update id="saveDesmRsiReject" parameterType="java.util.Map">
		UPDATE DESM_RSI_HEADER
		   SET STATUS = 'Rejected',
		   	   --REQUESTED_BY = '',
		   	   REQUEST_DATE = '',
		   	   --CHECKED_BY = '',
		   	   CHECKED_DATE = '',
		   	   --CONFIRMED_BY = '',
		   	   CONFIRMED_DATE = '',
		   	   --APPROVED_BY = '',
		   	   APPROVED_DATE = ''
			 <if test='REMARK != null and REMARK != ""'>
			   ,REMARK = #{REMARK}
			 </if>
		 WHERE RSI_HEADER_ID = #{RSI_HEADER_ID}
	</update>

	<update id="saveDesmRsiOutQtySave" parameterType="java.util.Map">
	      MERGE INTO DESM_PACKING_DTL DPD
	      USING (SELECT DPD.PROJECT_NO,
	                    DPD.TRK_ITEM_NAME,
	                    DPD.PACKAGE_NO,
	                    DRL.MATERIAL_CODE,
	                    SUM(NVL(DRO.HANDOVER_QTY, 0)) AS HANDOVER_QTY
	               FROM DESM_PACKING_MST DPM,
	                    DESM_PACKING_DTL DPD,
	                    DESM_RSI_LINE DRL,
	                    DESM_RSI_OUTGOING DRO
	              WHERE DPM.PROJECT_NO = DPD.PROJECT_NO
	                AND DPM.TRK_ITEM_NAME = DPD.TRK_ITEM_NAME
	                AND DPM.PACKAGE_NO = DPD.PACKAGE_NO
	                AND DPD.MATERIAL_CODE = DRL.MATERIAL_CODE
	                AND DPM.IS_CONFIRM_MATERIAL = 'Y'
	                AND DRL.RSI_LINE_ID = DRO.RSI_LINE_ID(+)
	                AND DPD.MATERIAL_CODE = #{MATERIAL_CODE}
	             GROUP BY DPD.PROJECT_NO,
	                      DPD.TRK_ITEM_NAME,
	                      DPD.PACKAGE_NO,
	                      DRL.MATERIAL_CODE) T
	      ON (DPD.PROJECT_NO = T.PROJECT_NO AND DPD.TRK_ITEM_NAME = T.TRK_ITEM_NAME AND DPD.PACKAGE_NO = T.PACKAGE_NO AND DPD.MATERIAL_CODE = T.MATERIAL_CODE)
	      WHEN MATCHED THEN
	           UPDATE SET DPD.OUT_QTY = T.HANDOVER_QTY
	          ,DPD.LOCATION = (CASE WHEN (NVL(DPD.IN_QTY, 0) - NVL(T.HANDOVER_QTY, 0) + NVL(DPD.RETURN_QTY, 0)) = 0 THEN NULL ELSE DPD.LOCATION END)
	          ,DPD.LOC_UPDATE_DATE = (CASE WHEN (NVL(DPD.IN_QTY, 0) - NVL(T.HANDOVER_QTY, 0) + NVL(DPD.RETURN_QTY, 0)) = 0 THEN SYSDATE ELSE DPD.LOC_UPDATE_DATE END)
	          ,DPD.LOC_UPDATED_BY = (CASE WHEN (NVL(DPD.IN_QTY, 0) - NVL(T.HANDOVER_QTY, 0) + NVL(DPD.RETURN_QTY, 0)) = 0 THEN #{USER_AD} ELSE DPD.LOC_UPDATED_BY END)
	</update>

	<insert id="saveDesmRsiOutDetailLog" parameterType="java.util.Map">
		INSERT INTO DESM_PACKING_DTL_EDIT_LOG
				(PACKAGE_NO,
				DESCRIPTION,
				DRAWING_NO,
				TAG_NO,
				MATERIAL,
				PACKAGE_TYPE,
				GROSS,
				NET,
				RT,
				VOLUME,
				L_CM,
				W_CM,
				H_CM,
				NOS,
				UNIT,
				LOCATION,
				REMARKS,
				PROJECT_NO,
				TRK_ITEM_NAME,
				ATT_ID,
				PACKAGE_LIST_NO,
				MATERIAL_CODE,
				IN_QTY,
				RSI_QTY,
				OUT_QTY,
		        REPORT_SHORT,
		        REPORT_OVER,
		        REPORT_DMG,
		        REPORT_MISSING,
		        REPORT_SHORT_QTY,
		        REPORT_OVER_QTY,
		        REPORT_DMG_QTY,
		        REPORT_MISSING_QTY,
				CREATED_BY,
				CREATION_DATE,
				LAST_UPDATED_BY,
				LAST_UPDATE_DATE,
				LOC_UPDATE_DATE,
				LOC_UPDATED_BY)
				SELECT  PACKAGE_NO,
				        DESCRIPTION,
				        DRAWING_NO,
				        TAG_NO,
				        MATERIAL,
				        PACKAGE_TYPE,
				        GROSS,
				        NET,
				        RT,
				        VOLUME,
				        L_CM,
				        W_CM,
				        H_CM,
				        NOS,
				        UNIT,
				        LOCATION,
				        REMARKS,
				        PROJECT_NO,
				        TRK_ITEM_NAME,
				        ATT_ID,
				        PACKAGE_LIST_NO,
				        MATERIAL_CODE,
				        IN_QTY,
				        RSI_QTY,
				        OUT_QTY,
				        DPD.REPORT_SHORT,
				        DPD.REPORT_OVER,
				        DPD.REPORT_DMG,
				        DPD.REPORT_MISSING,
				        DPD.REPORT_SHORT_QTY,
				        DPD.REPORT_OVER_QTY,
				        DPD.REPORT_DMG_QTY,
				        DPD.REPORT_MISSING_QTY,
				        #{USER_AD},
				        SYSDATE,
				        #{USER_AD},
				        SYSDATE,
				        LOC_UPDATE_DATE,
						LOC_UPDATED_BY
				  FROM DESM_PACKING_DTL DPD
				 WHERE DPD.MATERIAL_CODE = #{MATERIAL_CODE}
				   AND (NVL(IN_QTY, 0) - NVL(OUT_QTY, 0) + NVL(RETURN_QTY, 0)) = 0
	</insert>

	<select id="getDesmRsiUserList" parameterType="java.util.Map" resultType="java.util.HashMap">
		SELECT DU.USER_NAME,
		       DU.USER_AD,
		       NVL(NVL(DU.DEPT_NAME, ZE.ZORG_NM), ' ') AS DEPT_NAME
		  FROM DESM_USER DU,
		       DESM_USER_PROJECT_ALL DUPA,
		       ZVTS_EMP ZE,
		      (SELECT DUDP.PROJECT_CODE,
		              DUP.USER_AD
		         FROM DESM_USER_DEFAULT_PROJECT DUDP,
		              DESM_USER_PROJECT DUP
		        WHERE DUDP.PROJECT_CODE = DUP.PROJECT_CODE
		          AND DUDP.USER_AD = #{USER_AD}) P_A
		 WHERE DU.USER_AD = DUPA.USER_AD(+)
		   AND DU.USER_AD = ZE.AD_USER_ID(+)
		   AND DU.USER_AD = P_A.USER_AD(+)
		   AND ZE.ZSTATUS_TYPE(+) = '재직'
		   AND (DUPA.USER_AD IS NOT NULL OR
		        (DUPA.USER_AD IS NULL AND P_A.USER_AD IS NOT NULL))
		  <if test='keyword != null and keyword != ""'>
		  AND (UPPER(DU.USER_NAME) LIKE '%'||UPPER(#{keyword})||'%' OR UPPER(DU.USER_AD) LIKE '%'||UPPER(#{keyword})||'%' )
		  </if>
		  <if test='P_USER_AD != null and P_USER_AD != ""'>
		  AND UPPER(DU.USER_AD) = UPPER(#{P_USER_AD})
		  </if>

	</select>

	<update id="saveDesmRsiHeaderProjectSave" parameterType="java.util.Map">
	    MERGE INTO DESM_RSI_HEADER DRH
	    USING (SELECT DISTINCT DPM.PROJECT_NO, DRL.RSI_HEADER_ID
	             FROM DESM_PACKING_MST DPM,
	                  DESM_PACKING_DTL DPD,
	                  DESM_RSI_LINE DRL
	            WHERE DPM.PROJECT_NO = DPD.PROJECT_NO
	              AND DPM.TRK_ITEM_NAME = DPD.TRK_ITEM_NAME
	              AND DPM.PACKAGE_NO = DPD.PACKAGE_NO
	              AND DPD.MATERIAL_CODE = DRL.MATERIAL_CODE
	              AND DPM.IS_CONFIRM_MATERIAL = 'Y'
	              AND DRL.RSI_HEADER_ID = #{RSI_HEADER_ID}) T
	    ON (DRH.RSI_HEADER_ID = T.RSI_HEADER_ID)
	    WHEN MATCHED THEN
	         UPDATE SET DRH.PROJECT_NO = T.PROJECT_NO
	</update>

	<select id="getDesmOutGoingCreationList" parameterType="java.util.Map" resultType="java.util.HashMap">
		SELECT *
		  FROM (SELECT RSI_HEADER_ID,
				       RSI_LINE_ID,
				       STATUS,
				       RSI_NO,
				       RSI_NAME,
				       TYPE,
					   CATEGORY,
					   SUB_CATEGORY,
				       REQUEST_DATE,
				       PACKING_LIST_NO,
				       PACKAGE_NO,
				       PROJECT_NO,
				       DESCRIPTION,
				       DRAWING_NO,
				       TAG_NO,
			           SUBCONTRACTOR,
			           MATERIAL_CODE,
				       REQ_QTY,
				       REQ_QTY - HANDOVER_QTY -
			           (SELECT NVL(SUM(DML.REQ_RETURN_QTY), 0) AS REQ_RETURN_QTY
			              FROM DESM_MRF_LINE DML
			             WHERE DML.RSI_LINE_ID = DT.RSI_LINE_ID) AS HANDOVER_AVAILABLE_QTY,
				       REQ_QTY - HANDOVER_QTY -
			           (SELECT NVL(SUM(DML.REQ_RETURN_QTY), 0) AS REQ_RETURN_QTY
			              FROM DESM_MRF_LINE DML
			             WHERE DML.RSI_LINE_ID = DT.RSI_LINE_ID) AS HANDOVER_QTY,
				       TO_CHAR(SYSDATE - 1, 'YYYY/MM/DD') AS HANDOVER_DATE
				  FROM (SELECT DRH.RSI_HEADER_ID,
			                   DRL.RSI_LINE_ID,
			                   DRH.STATUS,
			                   DRH.RSI_NO,
			                   DRH.RSI_NAME,
			                   DPMGT.TYPE,
							   DPMGT.CATEGORY,DPMGT.SUB_CATEGORY,DPMGT.COMMENTS,DPMGT.FILE_GRP_CD, NVL((SELECT CASE WHEN COUNT(*) = 0 THEN NULL ELSE COUNT(*) END FROM ESAATTH ATT WHERE ATT.GRP_CD  = DPMGT.FILE_GRP_CD  AND ATT.STS != 'D'),0)  ATTH_CNT,
			                   TO_CHAR(DRH.REQUEST_DATE, 'YYYY/MM/DD') AS REQUEST_DATE,
			                   DRH.PROJECT_NO,
             				   DRL.PACKING_LIST_NO,
			                   DPD.PACKAGE_NO,
			                   DPD.DESCRIPTION,
			                   DPD.DRAWING_NO,
			                   DPD.TAG_NO,
			                     DRH.SUBCONTRACTOR,
			                     DRL.MATERIAL_CODE,
			                   DRL.REQ_QTY,
			                   SUM(NVL(DRO.HANDOVER_QTY, 0)) AS HANDOVER_QTY
			              FROM ZVTS_ITEM_MASTER ZIM,
			                   DESM_PACKING_MST DPM,
			                   DESM_PACKING_DTL DPD,
			                   DESM_PACKING_MGT DPMGT,
			                   DESM_RSI_LINE DRL,
			                   DESM_RSI_HEADER DRH,
			                   DESM_RSI_OUTGOING DRO
			             WHERE ZIM.PROJECT_NO = DPM.PROJECT_NO
			               AND ZIM.TRK_ITEM_NAME = DPM.TRK_ITEM_NAME
			               AND DRH.RSI_HEADER_ID = DRL.RSI_HEADER_ID
			               AND DPM.PROJECT_NO = DPD.PROJECT_NO
			               AND DPM.TRK_ITEM_NAME = DPD.TRK_ITEM_NAME
			               AND DPM.PACKAGE_NO = DPD.PACKAGE_NO
			               AND DPD.MATERIAL_CODE = DRL.MATERIAL_CODE
			               AND DPD.PROJECT_NO = DPMGT.PROJECT_NO(+)
						   AND DPD.MATERIAL_CODE = DPMGT.MATERIAL_CODE(+)
			               AND DRL.RSI_HEADER_ID = DRH.RSI_HEADER_ID
			               AND DRL.RSI_LINE_ID = DRO.RSI_LINE_ID(+)
			               AND DPM.IS_CONFIRM_MATERIAL = 'Y'
			               AND DRH.STATUS = 'Approved'
						 <if test='PROJECT_NO != null and PROJECT_NO != ""'>
						   AND DRH.PROJECT_NO = #{PROJECT_NO}
						 </if>
						 <if test='PACKAGE_NO != null and PACKAGE_NO != ""'>
						   AND UPPER(DRL.PACKAGE_NO) LIKE '%' || UPPER(#{PACKAGE_NO}) || '%'
						 </if>
						 <if test='RSI_NO != null and RSI_NO != ""'>
						   AND UPPER(DRH.RSI_NO) LIKE '%' || UPPER(#{RSI_NO}) || '%'
						 </if>
						 <if test='MATERIAL_CODE != null and MATERIAL_CODE != ""'>
						   AND UPPER(DRL.MATERIAL_CODE) LIKE '%' || UPPER(#{MATERIAL_CODE}) || '%'
						 </if>
						 <if test='REQUEST_START_DATE != null and REQUEST_START_DATE != ""'>
						   AND DRH.REQUEST_DATE >= TO_DATE(#{REQUEST_START_DATE}, 'YYYY/MM/DD')
						 </if>
						 <if test='REQUEST_END_DATE != null and REQUEST_END_DATE != ""'>
						   AND DRH.REQUEST_DATE <![CDATA[ < ]]> TO_DATE(#{REQUEST_END_DATE}, 'YYYY/MM/DD') + 1
						 </if>
						 <if test='ATTRIBUTE10 != null and ATTRIBUTE10 != ""'>
						   AND ZIM.ATTRIBUTE10 = #{ATTRIBUTE10}
						 </if>
						 <if test='DESCRIPTION != null and DESCRIPTION != ""'>
						   AND UPPER(DPD.DESCRIPTION) LIKE '%' || UPPER(#{DESCRIPTION}) || '%'
						 </if>
						 <if test='DRAWING_NO != null and DRAWING_NO != ""'>
						   AND UPPER(DPD.DRAWING_NO) LIKE '%' || UPPER(#{DRAWING_NO}) || '%'
						 </if>
						 <if test='TAG_NO != null and TAG_NO != ""'>
						   AND UPPER(DPD.TAG_NO) LIKE '%' || UPPER(#{TAG_NO}) || '%'
						 </if>
						 <if test='RSI_NAME != null and RSI_NAME != ""'>
						   AND UPPER(DRH.RSI_NAME) LIKE '%' || UPPER(#{RSI_NAME}) || '%'
						 </if>
						 <if test='TYPE != null and TYPE !=""'>
							AND DPMGT.TYPE = #{TYPE}
						 </if>
						 <if test='CATEGORY != null and CATEGORY !=""'>
							AND UPPER(DPMGT.CATEGORY) LIKE '%' || UPPER(#{CATEGORY}) || '%'
						 </if>
						 <if test='PACKING_LIST_NO != null and PACKING_LIST_NO !=""'>
							AND UPPER(DRL.PACKING_LIST_NO) LIKE '%' || UPPER(#{PACKING_LIST_NO}) || '%'
						 </if>
						 <if test='SUBCON != null and SUBCON !=""'>
							AND UPPER(DRH.SUBCONTRACTOR) LIKE '%' || UPPER(#{SUBCON}) || '%'
						 </if>
				         GROUP BY DRH.RSI_HEADER_ID,
		                     	  DRL.RSI_LINE_ID,
		                    	  DRH.STATUS,
		                     	  DRH.RSI_NO,
		                     	  DRH.RSI_NAME,
		                     	  DPMGT.TYPE,
							      DPMGT.CATEGORY,DPMGT.SUB_CATEGORY,DPMGT.COMMENTS,DPMGT.FILE_GRP_CD,
		                          DRH.REQUEST_DATE,
		                          DRH.PROJECT_NO,
		                          DRL.PACKING_LIST_NO,
		                          DPD.PACKAGE_NO,
		                          DPD.DESCRIPTION,
		                          DPD.DRAWING_NO,
		                          DPD.TAG_NO,
		                          DRH.SUBCONTRACTOR,
		                          DRL.MATERIAL_CODE,
		                          DRL.REQ_QTY) DT )
		 WHERE HANDOVER_AVAILABLE_QTY > 0
		ORDER BY RSI_HEADER_ID,
		         RSI_LINE_ID,
		         PACKAGE_NO
	</select>

	<select id="getDesmRsiLineOutQtyList" parameterType="java.util.Map" resultType="java.util.HashMap">
		SELECT DRL.RSI_LINE_ID,
		       DRL.REQ_QTY -
		       SUM(NVL(DRO.HANDOVER_QTY, 0)) OVER(PARTITION BY DRL.RSI_LINE_ID ORDER BY DRL.RSI_LINE_ID) AS HANDOVER_AVAILABLE_QTY
		  FROM DESM_RSI_LINE DRL,
		       DESM_RSI_OUTGOING DRO
		 WHERE DRL.RSI_LINE_ID = DRO.RSI_LINE_ID(+)
		   AND DRL.RSI_LINE_ID = #{RSI_LINE_ID}
	</select>

	<insert id="saveDesmRsiOutGoingSave" parameterType="java.util.Map">
		INSERT INTO DESM_RSI_OUTGOING
		(RSI_HEADER_ID
		,RSI_LINE_ID
		,RSI_OUTGOING_ID
		,HANDOVER_QTY
		,HANDOVER_DATE
		,CREATED_BY
		,CREATION_DATE
		,LAST_UPDATED_BY
		,LAST_UPDATE_DATE
		,RECEIVER_NAME)
		VALUES
		(#{RSI_HEADER_ID}
		,#{RSI_LINE_ID}
		,SEQ_DESM_RSI_OUTGOING.NEXTVAL
		,#{HANDOVER_QTY}
		,TO_DATE(#{HANDOVER_DATE}, 'YYYY/MM/DD')
		,#{USER_AD}
		,SYSDATE
		,#{USER_AD}
		,SYSDATE
		,#{RECEIVER_NAME})
	</insert>
	
	<insert id="saveDesmRsiOutGoingSaveM" parameterType="java.util.Map">
		INSERT INTO DESM_RSI_OUTGOING
		(RSI_HEADER_ID
		,RSI_LINE_ID
		,RSI_OUTGOING_ID
		,HANDOVER_QTY
		,HANDOVER_DATE
		,CREATED_BY
		,CREATION_DATE
		,LAST_UPDATED_BY
		,LAST_UPDATE_DATE)
		VALUES
		(#{RSI_HEADER_ID}
		,#{RSI_LINE_ID}
		,SEQ_DESM_RSI_OUTGOING.NEXTVAL
		,#{HANDOVER_QTY}
		,TO_DATE(#{HANDOVER_DATE}, 'YYYY/MM/DD')
		,#{USER_AD}
		,SYSDATE
		,#{USER_AD}
		,SYSDATE)
	</insert>

	<select id="getDesmRsiOutGoingList" parameterType="java.util.Map" resultType="java.util.HashMap">
	    SELECT ROW_NUMBER() OVER(ORDER BY DRO.RSI_OUTGOING_ID DESC) AS RN,
	         TO_CHAR(DRO.HANDOVER_DATE, 'YYYY/MM/DD') AS HANDOVER_DATE,
	           DRL.MATERIAL_CODE,
	           DRO.HANDOVER_QTY,
	           DRH.RSI_NO,
	           DRH.RSI_NAME,
	           DPMGT.TYPE,
			   DPMGT.CATEGORY,DPMGT.SUB_CATEGORY,DPMGT.COMMENTS,DPMGT.FILE_GRP_CD, NVL((SELECT CASE WHEN COUNT(*) = 0 THEN NULL ELSE COUNT(*) END FROM ESAATTH ATT WHERE ATT.GRP_CD  = DPMGT.FILE_GRP_CD  AND ATT.STS != 'D'),0)  ATTH_CNT,
	           TO_CHAR(DRH.HANDOVER_DATE, 'YYYY/MM/DD') AS REQUEST_DATE,
	           DRH.SUBCONTRACTOR,
	           DRL.PACKING_LIST_NO,
	           DRL.PACKAGE_NO,
	           DRL.DESCRIPTION,
	           DRL.DRAWING_NO,
	           DRL.ITEM_NO,
	           DPD.IN_QTY,
	           DRL.REQ_QTY,
	           DRO.RSI_LINE_ID,
	           DRO.RSI_OUTGOING_ID,
	           DRO.CREATED_BY,
	           DRO.RECEIVER_NAME
	      FROM DESM_RSI_HEADER DRH,
	           DESM_RSI_LINE DRL,
	           DESM_RSI_OUTGOING DRO,
	           DESM_PACKING_DTL DPD,
	           DESM_PACKING_MGT DPMGT,
	           DESM_PACKING_MST DPM,
	           ZVTS_ITEM_MASTER ZIM
	     WHERE DRH.RSI_HEADER_ID = DRL.RSI_HEADER_ID
	       AND DRL.RSI_LINE_ID = DRO.RSI_LINE_ID
	       AND DRL.MATERIAL_CODE = DPD.MATERIAL_CODE
	       AND DPD.PROJECT_NO = DPM.PROJECT_NO
	       AND DPD.TRK_ITEM_NAME = DPM.TRK_ITEM_NAME
	       AND DPD.PACKAGE_NO = DPM.PACKAGE_NO
	       AND DPD.PROJECT_NO = DPMGT.PROJECT_NO(+)
		   AND DPD.MATERIAL_CODE = DPMGT.MATERIAL_CODE(+)
	       AND DPM.PROJECT_NO = ZIM.PROJECT_NO
	       AND DPM.TRK_ITEM_NAME = ZIM.TRK_ITEM_NAME
	       AND DPM.IS_CONFIRM_MATERIAL = 'Y'
		 <if test='PROJECT_NO != null and PROJECT_NO != ""'>
		   AND DRH.PROJECT_NO = #{PROJECT_NO}
		 </if>
		 <if test='PACKAGE_NO != null and PACKAGE_NO != ""'>
		   AND UPPER(DRL.PACKAGE_NO) LIKE '%' || UPPER(#{PACKAGE_NO}) || '%'
		 </if>
		 <if test='SUBCONTRACTOR != null and SUBCONTRACTOR != ""'>
		   AND UPPER(DRH.SUBCONTRACTOR) LIKE '%' || UPPER(#{SUBCONTRACTOR}) || '%'
		 </if>
		 <if test='RSI_NO != null and RSI_NO != ""'>
		   AND UPPER(DRH.RSI_NO) LIKE '%' || UPPER(#{RSI_NO}) || '%'
		 </if>
		 <if test='RSI_NAME != null and RSI_NAME != ""'>
		   AND UPPER(DRH.RSI_NAME) LIKE '%' || UPPER(#{RSI_NAME}) || '%'
		 </if>
		 <if test='MATERIAL_CODE != null and MATERIAL_CODE != ""'>
		   AND UPPER(DRL.MATERIAL_CODE) LIKE '%' || UPPER(#{MATERIAL_CODE}) || '%'
		 </if>
		 <if test='START_HANDOVER_DATE != null and START_HANDOVER_DATE != ""'>
		   AND DRO.HANDOVER_DATE >= TO_DATE(#{START_HANDOVER_DATE}, 'YYYY/MM/DD')
		 </if>
		 <if test='END_HANDOVER_DATE != null and END_HANDOVER_DATE != ""'>
		   AND DRO.HANDOVER_DATE <![CDATA[ < ]]> TO_DATE(#{END_HANDOVER_DATE}, 'YYYY/MM/DD') + 1
		 </if>
		 <if test='ATTRIBUTE10 != null and ATTRIBUTE10 != ""'>
		   AND ZIM.ATTRIBUTE10 = #{ATTRIBUTE10}
		 </if>
		 <if test='TYPE != null and TYPE !=""'>
			AND DPMGT.TYPE = #{TYPE}
		 </if>
		 <if test='CATEGORY != null and CATEGORY !=""'>
			AND UPPER(DPMGT.CATEGORY) LIKE '%' || UPPER(#{CATEGORY}) || '%'
		 </if>
		 <if test='SUB_CATEGORY != null and SUB_CATEGORY !=""'>
			AND UPPER(DPMGT.SUB_CATEGORY) LIKE '%' || UPPER(#{SUB_CATEGORY}) || '%'
		 </if>
		 <if test='COMMENTS != null and COMMENTS !=""'>
			AND UPPER(DPMGT.COMMENTS) LIKE '%' || UPPER(#{COMMENTS}) || '%'
		 </if>
		 <if test='PACKING_LIST_NO != null and PACKING_LIST_NO !=""'>
			AND UPPER(DRL.PACKING_LIST_NO) LIKE '%' || UPPER(#{PACKING_LIST_NO}) || '%'
		 </if>

	</select>

	<delete id="deleteDesmRsiOut" parameterType="java.util.Map">
		DELETE FROM DESM_RSI_OUTGOING
		 WHERE RSI_OUTGOING_ID = #{RSI_OUTGOING_ID}
	</delete>

	<select id="getDesmSubconUser" parameterType="java.util.Map" resultType="java.util.HashMap">
		SELECT A.USER_AD
		  FROM DESM_USER A
		 WHERE A.USER_AD = TRIM(UPPER(#{P_USER_AD}))
	</select>

	<insert id="insertSubcontUser" parameterType="java.util.Map">
		INSERT INTO DESM_SUBCON_USER
		(USER_AD
		,PWS_EDIT_YN
		,CREATED_BY
		,CREATION_DATE
		,LAST_UPDATED_BY
		,LAST_UPDATE_DATE)
		VALUES
		(TRIM(UPPER(#{P_USER_AD}))
		,'N'
		,#{USER_AD}
		,SYSDATE
		,#{USER_AD}
		,SYSDATE)
	</insert>

	<select id="selectProjectId" parameterType="java.util.Map" resultType="string">
		SELECT PROJECT_ID
		  FROM PA_PROJECTS_ALL_INT
		 WHERE SEGMENT1 = #{P_PROJECT}
	</select>

	<update id="mergeSubconUserProject" parameterType="java.util.Map">
	/* MaterialMapper.mergeSubconUserProject :: Site User 등록시 Project 자동 지정 */
		MERGE INTO DESM_USER_PROJECT
		USING DUAL
		ON(USER_AD = #{P_USER_AD} AND PROJECT_CODE = #{P_PROJECT})
		WHEN NOT MATCHED THEN
		INSERT
		(USER_AD
	    ,PROJECT_ID
	    ,PROJECT_CODE
	    ,CREATED_BY
	    ,CREATION_DATE
	    ,LAST_UPDATED_BY
	    ,LAST_UPDATE_DATE)
	    VALUES
	    (TRIM(UPPER(#{P_USER_AD}))
	    ,#{P_PROJECT_ID}
	    ,#{P_PROJECT}
	    ,#{USER_AD}
	    ,SYSDATE
	    ,#{USER_AD}
	    ,SYSDATE)
	</update>

	<update id="mergeSubconUserDefaultProject" parameterType="java.util.Map">
	/* MaterialMapper.mergeSubconUserDefaultProject :: Site User 등록시 Default Project 자동 지정 */
		MERGE INTO DESM_USER_DEFAULT_PROJECT DUDP
	    USING DUAL
	    ON (DUDP.USER_AD = #{P_USER_AD}  AND DUDP.PROJECT_CODE = #{P_PROJECT})
	    WHEN NOT MATCHED THEN
	    INSERT
	    (USER_AD
	    ,PROJECT_CODE
	    ,CREATED_BY
	    ,CREATION_DATE
	    ,LAST_UPDATED_BY
	    ,LAST_UPDATE_DATE)
	    VALUES
	    (TRIM(UPPER(#{P_USER_AD}))
	    ,#{P_PROJECT}
	    ,#{USER_AD}
	    ,SYSDATE
	    ,#{USER_AD}
	    ,SYSDATE)
	</update>

	<select id="getDesmSubconList" parameterType="java.util.Map" resultType="java.util.HashMap">
	    /* MaterialMapper.getDesmSubconList : Subcon 사용자 정보 생성, Subcon User / Site Role / Project */
		SELECT DU.USER_AD,
		       DU.USER_NAME,
		       DU.DEPT_NAME,
		       DU.MAIL,
		       DR.ROLE_SEQ,
		       DR.ROLE_NAME,
		       DSU.GUBUN,
		       CASE WHEN DU.IDCS_YN != 'N' THEN 'Y' ELSE DU.IDCS_YN END AS IDCS_YN,
		       DU.IDCS_YN AS IDCS_ID,
		       NVL(DU.FEDERATED_YN, 'N') AS FEDERATED_YN,
	           (SELECT NVL(MAX(DCD.DTL_CODE), 'South Korea') AS COUNTRY
	              FROM DESM_USER_DEFAULT_COUNTRY DUDC,
	                   DESM_CODE_DTL DCD
	             WHERE DUDC.COUNTRY_CODE = DCD.DTL_CODE
	               AND DCD.DELEGATE_FLAG = 'N'
	               AND DUDC.USER_AD = DU.USER_AD) AS COUNTRY
		  FROM (SELECT 'SITE' AS GUBUN, TT.* FROM DESM_SUBCON_USER TT) DSU,
		       DESM_USER DU,
		       DESM_USER_ROLE DUR,
           	   DESM_ROLE DR,
           	   DESM_USER_PROJECT DUP
	     WHERE DSU.USER_AD(+) = DU.USER_AD
	       AND DU.USER_AD = DUR.USER_AD
	       AND DUR.ROLE_SEQ = DR.ROLE_SEQ
	       AND DU.USER_AD = DUP.USER_AD
	       AND DR.SITE_YN = 'Y'
	       AND DU.DELEGATE_FLAG = 'N'
		 <if test='P_USER_AD != null and P_USER_AD != ""'>
		   AND DU.USER_AD LIKE '%' || UPPER(#{P_USER_AD}) || '%'
		 </if>
		 <if test='USER_NAME != null and USER_NAME != ""'>
		   AND UPPER(DU.USER_NAME) LIKE '%' || UPPER(#{USER_NAME}) || '%'
		 </if>
		 <if test='DEPT_NAME != null and DEPT_NAME != ""'>
		   AND UPPER(DU.DEPT_NAME) LIKE '%' || UPPER(#{DEPT_NAME}) || '%'
		 </if>
		 <if test='E_USER_AD != null and E_USER_AD != ""'>
		   AND DU.USER_AD = #{E_USER_AD}
		 </if>
		 <if test='P_PROJECT != null and P_PROJECT != ""'>
		   AND DUP.PROJECT_CODE = #{P_PROJECT}
		 </if>
	</select>

	<delete id="deleteSubcontUser" parameterType="java.util.Map">
		DELETE FROM DESM_SUBCON_USER
		 WHERE USER_AD = #{P_USER_AD}
	</delete>

	<select id="getDesmSubconRoleList" parameterType="java.util.Map" resultType="java.util.HashMap">
		SELECT ROLE_SEQ,
		       ROLE_NAME
		  FROM DESM_ROLE A
		 WHERE A.DELEGATE_FLAG = 'N'
		   AND A.SITE_YN = 'Y'
	</select>

	<delete id="deleteSubcontUserRole" parameterType="java.util.Map">
		DELETE
		  FROM DESM_USER_ROLE DUR
		 WHERE DUR.USER_AD = #{P_USER_AD}
		   AND DUR.ROLE_SEQ IN
		 (SELECT DR.ROLE_SEQ
		    FROM DESM_ROLE DR
		   WHERE DR.SITE_YN = 'Y')
	</delete>

	<select id="getDesmRsiLineOutQtyCheckList" parameterType="java.util.Map" resultType="java.util.HashMap">
		SELECT COUNT(*) AS CNT
		  FROM DESM_PACKING_DTL DPD,
		       DESM_RSI_LINE DRL
		 WHERE DPD.MATERIAL_CODE = DRL.MATERIAL_CODE
		   AND DPD.PROJECT_NO = #{PROJECT_NO}
		   AND DPD.TRK_ITEM_NAME = #{TRK_ITEM_NAME}
		   AND DPD.PACKAGE_NO = #{PACKAGE_NO}
	</select>

	<update id="saveIdsmOsSummaryListCancelMaterial" parameterType="java.util.Map">
		MERGE INTO DESM_PACKING_MST A
		USING DUAL
		ON (A.PROJECT_NO = #{PROJECT_NO} AND A.TRK_ITEM_NAME = #{TRK_ITEM_NAME} AND A.PACKAGE_NO = #{PACKAGE_NO} )
		WHEN MATCHED THEN
		     UPDATE SET
		     A.IS_CONFIRM_MATERIAL = 'N',
		     A.CONFIRM_DATE = ''
	</update>

	<select id="getDesmSiteProjectList" parameterType="java.util.Map" resultType="java.util.HashMap">
		SELECT MST.*
		  FROM (SELECT DISTINCT
		               TO_CHAR(PPA.PROJECT_ID) AS PROJECT_ID,
		               PPA.SEGMENT1,
		               PPA.NAME
		          FROM ZVTS_ITEM_MASTER IM,
		               PA_PROJECTS_ALL_INT PPA
		         WHERE IM.PROJECT_NO = PPA.SEGMENT1
				 <if test='keyword != null and keyword !=""'>
				   AND (UPPER(PPA.SEGMENT1) like '%'|| UPPER(#{keyword}) ||'%' OR UPPER(PPA.NAME) like '%'|| UPPER(#{keyword}) ||'%')
				 </if>
		        ) MST,
		        (SELECT COUNT(*) AS PROJECT_ALL_CNT
		           FROM DESM_USER_PROJECT_ALL
		          WHERE USER_AD = #{USER_AD}  ) DUPA
		 WHERE (DUPA.PROJECT_ALL_CNT = 1 OR
		       (EXISTS (SELECT 1 FROM DESM_USER_PROJECT DUP
		                 WHERE DUP.PROJECT_CODE = MST.SEGMENT1 AND DUP.USER_AD = #{USER_AD})))
		ORDER BY MST.PROJECT_ID
	</select>

	<select id="getDesmSiteProjectUserList" parameterType="java.util.Map" resultType="java.util.HashMap">
		SELECT DU.USER_AD,
	           DU.USER_NAME,
	           DU.DEPT_NAME,
	           DR.ROLE_SEQ,
			   DR.ROLE_NAME,
	           CASE WHEN DUPA.USER_AD IS NOT NULL THEN 1 ELSE 0 END AS ALL_FLAG
	      FROM DESM_SUBCON_USER DSU,
	           DESM_USER DU,
	           DESM_USER_ROLE DUR,
	        	 DESM_ROLE DR,
	           DESM_USER_PROJECT_ALL DUPA
	     WHERE DSU.USER_AD = DU.USER_AD
	       AND DU.USER_AD = DUR.USER_AD
		     AND DUR.ROLE_SEQ = DR.ROLE_SEQ
	       AND DU.USER_AD = DUPA.USER_AD(+)
	 	     AND DR.SITE_YN = 'Y'
	       AND DU.DELEGATE_FLAG = 'N'
	     <if test='USER_NAME != null and USER_NAME !=""'>
	       AND UPPER(DU.USER_NAME) LIKE '%' || UPPER(#{USER_NAME}) || '%'
	     </if>
	     <if test='USER_ID != null and USER_ID !=""'>
	       AND UPPER(DU.USER_AD) LIKE '%' || UPPER(#{USER_ID}) || '%'
	     </if>
	     <if test='PROJECT_NO != null and PROJECT_NO !=""'>
	       AND (DUPA.USER_AD IS NOT NULL OR
				       (EXISTS (SELECT 1 FROM DESM_USER_PROJECT DUP
				        WHERE DUP.PROJECT_CODE = #{PROJECT_NO} AND DUP.USER_AD = DU.USER_AD)))
	     </if>
	    ORDER BY DU.USER_NAME
	</select>

	<select id="getDeleteDesmRsiList" parameterType="java.util.Map" resultType="java.util.HashMap">
		SELECT DRL.RSI_LINE_ID,
		       DRL.MATERIAL_CODE
		  FROM DESM_RSI_HEADER DRH,
		       DESM_RSI_LINE DRL
		 WHERE DRH.RSI_HEADER_ID = DRL.RSI_HEADER_ID
		   AND DRH.RSI_HEADER_ID = #{RSI_HEADER_ID}
	</select>

	<delete id="deleteDesmRsiMst" parameterType="java.util.Map">
		DELETE
		  FROM DESM_RSI_HEADER DUR
		 WHERE RSI_HEADER_ID = #{RSI_HEADER_ID}
	</delete>

	<select id="getDesmRsiViewList" parameterType="java.util.Map" resultType="java.util.HashMap">
		/* MaterialMapper.xml -> getDesmRsiViewList : RSI Summary 조회 */
		SELECT DRH.RSI_NO,
				       DRH.RSI_NAME,
				       DRH.STATUS,
				       DRH.SUBCONTRACTOR,
				       DRL.MATERIAL_CODE,
				       DRL.DESCRIPTION,
				       DPD.UNIT,
				       DRL.REQ_QTY,
				       DPD.LOCATION,
				       DPMGT.TYPE,
					   DPMGT.CATEGORY,DPMGT.SUB_CATEGORY,DPMGT.COMMENTS,DPMGT.FILE_GRP_CD, NVL((SELECT CASE WHEN COUNT(*) = 0 THEN NULL ELSE COUNT(*) END FROM ESAATTH ATT WHERE ATT.GRP_CD  = DPMGT.FILE_GRP_CD  AND ATT.STS != 'D'),0)  ATTH_CNT,
			           DRO.HANDOVER_QTY,
				       TO_CHAR(DRH.HANDOVER_DATE, 'YYYY/MM/DD') AS REQUEST_DATE,
				       DPD.PACKAGE_NO,
				       ZDI.INVOICE_NUM,
				       ZIM.ATTRIBUTE3,
				       DRL.REQ_QTY - NVL(DRO.HANDOVER_QTY, 0) AS BALANCE_QTY
				  FROM ZVTS_ITEM_MASTER ZIM,
	 				   ZVTS_DESM_INVOICE ZDI,
				       DESM_PACKING_MST DPM,
				       DESM_PACKING_DTL DPD,
				       DESM_RSI_LINE DRL,
				       DESM_RSI_HEADER DRH,
				       (SELECT SUM(HANDOVER_QTY) AS HANDOVER_QTY
				          ,RSI_LINE_ID
			              FROM DESM_RSI_OUTGOING
			              GROUP BY RSI_LINE_ID) DRO,
				       DESM_PACKING_MGT DPMGT
				 WHERE ZIM.PROJECT_NO = DPM.PROJECT_NO
				   AND ZIM.TRK_ITEM_NAME = DPM.TRK_ITEM_NAME
				   AND ZIM.TRK_ITEM_SEQ = ZDI.TRK_ITEM_SEQ
				   AND DPM.PACKAGE_NO = DPD.PACKAGE_NO
				   AND DPM.TRK_ITEM_NAME = DPD.TRK_ITEM_NAME -- PACKAGE_NO가 Sh No, Seq 가 달라도 같은 경우가 있음.
				   AND DPD.MATERIAL_CODE = DRL.MATERIAL_CODE
				   AND DRL.RSI_HEADER_ID = DRH.RSI_HEADER_ID
				   AND DRL.RSI_LINE_ID = DRO.RSI_LINE_ID(+)
				   AND DPD.PROJECT_NO = DPMGT.PROJECT_NO(+)
				   AND DPD.MATERIAL_CODE = DPMGT.MATERIAL_CODE(+)
				   AND ZIM.PROJECT_NO = #{PROJECT_NO}
				   AND DPM.IS_CONFIRM_MATERIAL = 'Y'
			     <if test='RSI_NO != null and RSI_NO !=""'>
			       AND UPPER(DRH.RSI_NO) LIKE '%' || UPPER(#{RSI_NO}) || '%'
			     </if>
			     <if test='RSI_NAME != null and RSI_NAME !=""'>
			       AND UPPER(DRH.RSI_NAME) LIKE '%' || UPPER(#{RSI_NAME}) || '%'
			     </if>
			     <if test='SUBCONTRACTOR != null and SUBCONTRACTOR !=""'>
			       AND UPPER(DRH.SUBCONTRACTOR) LIKE '%' || UPPER(#{SUBCONTRACTOR}) || '%'
			     </if>
			     <if test='MATERIAL_CODE != null and MATERIAL_CODE !=""'>
			       AND UPPER(DRL.MATERIAL_CODE) LIKE '%' || UPPER(#{MATERIAL_CODE}) || '%'
			     </if>
			     <if test='START_REQUEST_DATE != null and START_REQUEST_DATE !=""'>
			       AND DRH.HANDOVER_DATE >= TO_DATE(#{START_REQUEST_DATE}, 'YYYY/MM/DD')
			     </if>
			     <if test='END_REQUEST_DATE != null and END_REQUEST_DATE !=""'>
			       AND DRH.HANDOVER_DATE <![CDATA[ < ]]> TO_DATE(#{END_REQUEST_DATE}, 'YYYY/MM/DD') + 1
			     </if>
			     <if test='ATTRIBUTE10 != null and ATTRIBUTE10 !=""'>
			       AND ZIM.ATTRIBUTE10  = #{ATTRIBUTE10}
			     </if>
			     <if test='TYPE != null and TYPE !=""'>
					AND DPMGT.TYPE = #{TYPE}
				 </if>
				 <if test='CATEGORY != null and CATEGORY !=""'>
					AND UPPER(DPMGT.CATEGORY) LIKE '%' || UPPER(#{CATEGORY}) || '%'
				 </if>
				 <if test='SUB_CATEGORY != null and SUB_CATEGORY !=""'>
					AND UPPER(DPMGT.SUB_CATEGORY) LIKE '%' || UPPER(#{SUB_CATEGORY}) || '%'
				 </if>
				 <if test='COMMENTS != null and COMMENTS !=""'>
					AND UPPER(DPMGT.COMMENTS) LIKE '%' || UPPER(#{COMMENTS}) || '%'
				 </if>
	     	    <if test='BALANCE_QTY != null and BALANCE_QTY !=""'>
			       <if test="BALANCE_QTY == 0">
			       	AND (DRL.REQ_QTY - NVL(DRO.HANDOVER_QTY, 0)) = 0
			       </if>
			       <if test="BALANCE_QTY == 1">
			       	AND (DRL.REQ_QTY - NVL(DRO.HANDOVER_QTY, 0)) > 0
			       </if>
			     </if>
			     <if test='PACKING_LIST_NO != null and PACKING_LIST_NO !=""'>
					AND UPPER(DPD.PACKAGE_LIST_NO) LIKE '%' || UPPER(#{PACKING_LIST_NO}) || '%'
				 </if>
		ORDER BY DRH.RSI_NO
	</select>

	<select id="getMailRsiMstData" parameterType="java.util.Map" resultType="java.util.HashMap">
		SELECT DRH.RSI_NO,
		       DRH.RSI_NAME,
		       DRH.LAST_UPDATED_BY,
		       DRH.STATUS,
		       DRH.SUBCONTRACTOR,
		       DRH.REQUESTED_BY,
		       TO_CHAR(DRH.REQUEST_DATE, 'YYYY-MM-DD') AS REQUEST_DATE,
		       DRH.DESCRIPTION,
		       DRH.REMARK,
	           PPAI.SEGMENT1 AS PROJECT_NO,
	           PPAI.NAME AS PROJECT_NAME,
		       (SELECT COUNT(*) FROM DESM_RSI_LINE DRL WHERE DRL.RSI_HEADER_ID = DRH.RSI_HEADER_ID) AS COUNT_RSI_LINE
		  FROM DESM_RSI_HEADER DRH,
		  	   PA_PROJECTS_ALL_INT PPAI
		 WHERE DRH.PROJECT_NO = PPAI.SEGMENT1
		   AND DRH.RSI_HEADER_ID = #{RSI_HEADER_ID}
	</select>

	<select id="getMailRsiDtlData" parameterType="java.util.Map" resultType="java.util.HashMap">
		SELECT *
		  FROM (SELECT DPD.PACKAGE_LIST_NO,
		               DPD.PACKAGE_NO,
		               DPD.MATERIAL_CODE,
		               DPD.PACKAGE_TYPE,
		               DPD.UNIT,
		               DPD.IN_QTY,
	                   DPD.DESCRIPTION,
	                   DPD.TAG_NO,
	                   DPD.DRAWING_NO,
		               DRL.REQ_QTY,
		               ROW_NUMBER() OVER(ORDER BY DRL.RSI_LINE_ID) AS NO
		          FROM ZVTS_ITEM_MASTER ZIM,
		               DESM_PACKING_MST DPM,
		               DESM_PACKING_DTL DPD,
		               DESM_RSI_LINE DRL
		         WHERE ZIM.PROJECT_NO = DPM.PROJECT_NO
		           AND ZIM.TRK_ITEM_NAME = DPM.TRK_ITEM_NAME
		           AND DPM.PROJECT_NO = DPD.PROJECT_NO
		           AND DPM.TRK_ITEM_NAME = DPD.TRK_ITEM_NAME
		           AND DPM.PACKAGE_NO = DPD.PACKAGE_NO
		           AND DPD.MATERIAL_CODE = DRL.MATERIAL_CODE
		           AND DPM.IS_CONFIRM_MATERIAL = 'Y'
		           AND DRL.RSI_HEADER_ID = #{RSI_HEADER_ID})
		 WHERE NO <![CDATA[ <= ]]> 10
	</select>

	<select id="getMailRsiReceiver" parameterType="java.util.Map" resultType="java.util.HashMap">
		SELECT DISTINCT
		       DU.USER_AD,
		       NVL(DU.MAIL, ZE.ZEMAIL) AS EMAIL
		  FROM DESM_USER DU,
		       ZVTS_EMP ZE,
		       (SELECT DISTINCT
		               CASE WHEN STD.LV = 2 AND CHC_BY_STD.ROLE_SEQ IS NOT NULL THEN CHC_BY_STD.USER_AD
		                    WHEN STD.LV = 2 AND CHC_BY_STD.ROLE_SEQ IS NULL THEN STD.USER_AD
		                    WHEN STD.LV = 3 AND CON_BY_STD.USER_AD IS NOT NULL THEN CON_BY_STD.USER_AD
		                    WHEN STD.LV = 3 AND CON_BY_STD.USER_AD IS NULL THEN STD.USER_AD
		                    WHEN STD.LV = 1 AND STD.STATUS != 'Rejected' AND REQ_BY_STD.USER_AD IS NOT NULL THEN REQ_BY_STD.USER_AD
		                    WHEN STD.LV = 1 AND STD.STATUS != 'Rejected' AND REQ_BY_STD.USER_AD IS NULL THEN STD.USER_AD
		                    ELSE STD.USER_AD END AS USER_AD
		          FROM (SELECT TD.USER_AD,
		                       TD.LV,
		                       TD.STATUS,
		                       CASE WHEN DR.ROLE_SEQ IS NOT NULL THEN DR.ROLE_SEQ END AS ROLE_SEQ
		                  FROM (SELECT *
		                          FROM (SELECT CASE WHEN LV.LV = 1 THEN DRH.REQUESTED_BY
		                                            WHEN LV.LV = 2 THEN DRH.CHECKED_BY
		                                            WHEN LV.LV = 3 THEN DRH.CONFIRMED_BY
		                                            WHEN LV.LV = 4 THEN DRH.APPROVED_BY
		                                       END AS USER_AD,
		                                       DRH.STATUS,
		                                       LV.LV
		                                  FROM DESM_RSI_HEADER DRH,
		                                       (SELECT LEVEL AS LV FROM DUAL CONNECT BY LEVEL <![CDATA[ < ]]> 5) LV
		                                 WHERE DRH.RSI_HEADER_ID = #{RSI_HEADER_ID})
		                         WHERE ((STATUS = 'Pre-Checked' AND LV = 2) OR
		                                (STATUS = 'Pre-Confirmed' AND LV = 3) OR
		                                (STATUS = 'Pre-Approved' AND LV = 4) OR
		                                (STATUS = 'Approved' AND LV = 1) OR
		                                (STATUS = 'Rejected' AND ((#{STATUS} = 'Pre-Checked' AND LV <![CDATA[ < ]]> 2) OR
		                                                          (#{STATUS} = 'Pre-Confirmed' AND LV <![CDATA[ < ]]> 3) OR
		                                                          (#{STATUS} = 'Pre-Approved' AND LV <![CDATA[ < ]]> 4))))) TD,
		                       DESM_USER_ROLE DUR,
		                       DESM_ROLE DR
		                 WHERE TD.USER_AD = DUR.USER_AD
		                   AND DUR.ROLE_SEQ = DR.ROLE_SEQ(+)
		                   AND DR.SITE_YN(+) = 'Y') STD,
		               (SELECT DUR.ROLE_SEQ,
		                       DUR.USER_AD,
		                       2 AS LV
		                  FROM DESM_USER_ROLE DUR,
		                       DESM_ROLE DR,
	                           DESM_USER_PROJECT_ALL DUPA,
	                           DESM_USER_DEFAULT_PROJECT DUP
		                 WHERE DUR.ROLE_SEQ = DR.ROLE_SEQ
	                       AND DUR.USER_AD = DUPA.USER_AD(+)
	                       AND DUR.USER_AD = DUP.USER_AD(+)
	                       AND (DUPA.USER_AD IS NOT NULL OR DUP.PROJECT_CODE = (SELECT A.PROJECT_NO FROM DESM_RSI_HEADER A WHERE A.RSI_HEADER_ID = #{RSI_HEADER_ID}))
		                   AND DR.SITE_YN ='Y') CHC_BY_STD,
		               (SELECT '' AS USER_AD,
		                       3 AS LV
		                  FROM DUAL
		                UNION
		                SELECT DUR.USER_AD,
		                       3 AS LV
		                  FROM DESM_USER_ROLE DUR,
	                           DESM_USER_PROJECT_ALL DUPA,
	                           DESM_USER_DEFAULT_PROJECT DUP
		                 WHERE DUR.USER_AD = DUPA.USER_AD(+)
	                       AND DUR.USER_AD = DUP.USER_AD(+)
	                       AND (DUPA.USER_AD IS NOT NULL OR DUP.PROJECT_CODE = (SELECT A.PROJECT_NO FROM DESM_RSI_HEADER A WHERE A.RSI_HEADER_ID = #{RSI_HEADER_ID}))
		                   AND DUR.ROLE_SEQ = 109) CON_BY_STD,
		               (SELECT '' AS USER_AD,
		                       1 AS LV
		                  FROM DUAL
		                UNION
		                SELECT DUR.USER_AD,
		                       1 AS LV
		                  FROM DESM_USER_ROLE DUR,
	                           DESM_USER_PROJECT_ALL DUPA,
	                           DESM_USER_DEFAULT_PROJECT DUP
		                 WHERE DUR.USER_AD = DUPA.USER_AD(+)
	                       AND DUR.USER_AD = DUP.USER_AD(+)
	                       AND (DUPA.USER_AD IS NOT NULL OR DUP.PROJECT_CODE = (SELECT A.PROJECT_NO FROM DESM_RSI_HEADER A WHERE A.RSI_HEADER_ID = #{RSI_HEADER_ID}))
		                   AND DUR.ROLE_SEQ = 191) REQ_BY_STD
		         WHERE STD.ROLE_SEQ = CHC_BY_STD.ROLE_SEQ(+)
		           AND STD.LV = CHC_BY_STD.LV(+)
		           AND STD.LV = CON_BY_STD.LV(+)
		           AND STD.LV = REQ_BY_STD.LV(+)) USR
		 WHERE DU.USER_AD = USR.USER_AD
		   AND DU.USER_AD = ZE.AD_USER_ID(+)
		   AND ZE.ZSTATUS_TYPE(+) = '재직'
		   AND NVL(DU.DELEGATE_FLAG, 'N') != 'Y'
		   AND (DU.MAIL IS NOT NULL OR ZE.ZEMAIL IS NOT NULL)
	</select>

	<update id="saveDesmRsiOutQtyCloseSave" parameterType="java.util.Map">
	      MERGE INTO DESM_RSI_HEADER DRH
	      USING (	SELECT RSI_HEADER_ID,
					       CASE WHEN SUM(REQ_QTY - HANDOVER_QTY - MFR_QTY) <![CDATA[ <= ]]> 0 THEN 'CLOSED' ELSE 'OPEN' END AS CLOSED_CODE
					  FROM (SELECT DRL.RSI_HEADER_ID,
					               DRL.RSI_LINE_ID,
					               DRL.REQ_QTY,
			                        (SELECT NVL(SUM(DML.REQ_RETURN_QTY), 0) AS REQ_RETURN_QTY
			                           FROM DESM_MRF_LINE DML
			                          WHERE DML.RSI_LINE_ID = DRL.RSI_LINE_ID) AS MFR_QTY,
					               SUM(NVL(DRO.HANDOVER_QTY, 0)) AS HANDOVER_QTY
					          FROM DESM_RSI_LINE DRL_T,
					               DESM_RSI_LINE DRL,
					               DESM_RSI_OUTGOING DRO
					         WHERE DRL_T.RSI_HEADER_ID = DRL.RSI_HEADER_ID
					           AND DRL.RSI_LINE_ID = DRO.RSI_LINE_ID(+)
					           AND DRL_T.RSI_LINE_ID = #{RSI_LINE_ID}
					        GROUP BY DRL.RSI_HEADER_ID,
					                 DRL.RSI_LINE_ID,
					                 DRL.REQ_QTY)
					GROUP BY RSI_HEADER_ID) T
	      ON (DRH.RSI_HEADER_ID = T.RSI_HEADER_ID)
	      WHEN MATCHED THEN
	           UPDATE SET DRH.CLOSED_CODE = T.CLOSED_CODE
	</update>

	<update id="saveIdsmOsDetailList" parameterType="java.util.Map">
		UPDATE DESM_PACKING_DTL DPD SET
			   <if test='DESCRIPTION != null and DESCRIPTION !=""'>
			   DPD.DESCRIPTION = #{DESCRIPTION},
			   </if>
		       <if test='DRAWING_NO != null and DRAWING_NO !=""'>
		       DPD.DRAWING_NO = #{DRAWING_NO},
		       </if>
		   	   <if test='TAG_NO != null and TAG_NO !=""'>
		   	   DPD.TAG_NO = #{TAG_NO},
		   	   </if>
		   	   <if test='UNIT != null and UNIT !=""'>
		   	   DPD.UNIT = #{UNIT},
		   	   </if>
		   	   <!-- <if test='IN_QTY != null and IN_QTY !=""'> -->
		   	   <if test="IN_QTY != null and !IN_QTY.equals('')">
		   	   DPD.IN_QTY = #{IN_QTY},
		   	   </if>
		   	   <if test='MATERIAL != null and MATERIAL !=""'>
		   	   DPD.MATERIAL = #{MATERIAL},
		   	   </if>
		   	   DPD.REMARKS = #{REMARKS},
		       DPD.REPORT_SHORT = #{REPORT_SHORT},
		       DPD.REPORT_OVER = #{REPORT_OVER},
		       DPD.REPORT_DMG = #{REPORT_DMG},
		       DPD.REPORT_MISSING = #{REPORT_MISSING},
		       DPD.REPORT_SHORT_QTY = #{REPORT_SHORT_QTY},
		       DPD.REPORT_OVER_QTY = #{REPORT_OVER_QTY},
		       DPD.REPORT_DMG_QTY = #{REPORT_DMG_QTY},
		       DPD.REPORT_MISSING_QTY = #{REPORT_MISSING_QTY}
		 WHERE DPD.PROJECT_NO = #{PROJECT_NO}
		   AND DPD.TRK_ITEM_NAME = #{TRK_ITEM_NAME}
		   AND DPD.MATERIAL_CODE = #{MATERIAL_CODE}
	</update>

	<insert id="saveIdsmOsDetailListLog" parameterType="java.util.Map">
		INSERT INTO DESM_PACKING_DTL_EDIT_LOG
		(PACKAGE_NO,
		DESCRIPTION,
		DRAWING_NO,
		TAG_NO,
		MATERIAL,
		PACKAGE_TYPE,
		GROSS,
		NET,
		RT,
		VOLUME,
		L_CM,
		W_CM,
		H_CM,
		NOS,
		UNIT,
		LOCATION,
		REMARKS,
		PROJECT_NO,
		TRK_ITEM_NAME,
		ATT_ID,
		PACKAGE_LIST_NO,
		MATERIAL_CODE,
		IN_QTY,
		RSI_QTY,
		OUT_QTY,
        REPORT_SHORT,
        REPORT_OVER,
        REPORT_DMG,
        REPORT_MISSING,
        REPORT_SHORT_QTY,
        REPORT_OVER_QTY,
        REPORT_DMG_QTY,
        REPORT_MISSING_QTY,
		CREATED_BY,
		CREATION_DATE,
		LAST_UPDATED_BY,
		LAST_UPDATE_DATE,
		LOC_UPDATE_DATE,
		LOC_UPDATED_BY)
		SELECT  PACKAGE_NO,
		        DESCRIPTION,
		        DRAWING_NO,
		        TAG_NO,
		        MATERIAL,
		        PACKAGE_TYPE,
		        GROSS,
		        NET,
		        RT,
		        VOLUME,
		        L_CM,
		        W_CM,
		        H_CM,
		        NOS,
		        UNIT,
		        LOCATION,
		        REMARKS,
		        PROJECT_NO,
		        TRK_ITEM_NAME,
		        ATT_ID,
		        PACKAGE_LIST_NO,
		        MATERIAL_CODE,
		        IN_QTY,
		        RSI_QTY,
		        OUT_QTY,
		        DPD.REPORT_SHORT,
		        DPD.REPORT_OVER,
		        DPD.REPORT_DMG,
		        DPD.REPORT_MISSING,
		        DPD.REPORT_SHORT_QTY,
		        DPD.REPORT_OVER_QTY,
		        DPD.REPORT_DMG_QTY,
		        DPD.REPORT_MISSING_QTY,
		        #{USER_AD},
		        SYSDATE,
		        #{USER_AD},
		        SYSDATE,
		        LOC_UPDATE_DATE,
				LOC_UPDATED_BY
		  FROM DESM_PACKING_DTL DPD
		 WHERE DPD.PROJECT_NO = #{PROJECT_NO}
		   AND DPD.TRK_ITEM_NAME = #{TRK_ITEM_NAME}
		   AND DPD.MATERIAL_CODE = #{MATERIAL_CODE}
	</insert>

	<select id="getDesmPlDetailEditLogList" parameterType="java.util.Map" resultType="java.util.HashMap">
		SELECT TT.*
		  FROM (SELECT DPD.PACKAGE_LIST_NO,
		                 DPD.PACKAGE_NO,
		                 DPD.DESCRIPTION,
		                 DPD.DRAWING_NO,
		                 DPD.TAG_NO,
		                 DPD.MATERIAL,
		                 DPD.MATERIAL_CODE,
		                 DPD.PACKAGE_TYPE,
		                 DPD.TRK_ITEM_NAME,
		                 DPD.PROJECT_NO,
		                 DPD.CREATED_BY,
		                 TO_CHAR(DPD.CREATION_DATE, 'YYYY/MM/DD') AS CREATION_DATE_TXT,
		                 DPD.CREATION_DATE,
		                 DPD.LOCATION,
		                 DPD.REPORT_SHORT_QTY,
	                      DPD.REPORT_OVER_QTY,
	                      DPD.REPORT_DMG_QTY,
	                      DPD.REPORT_MISSING_QTY,
				         CASE WHEN DPD.REPORT_SHORT = 'Y' THEN 1 ELSE 0 END AS REPORT_SHORT,
				         CASE WHEN DPD.REPORT_OVER = 'Y' THEN 1 ELSE 0 END AS REPORT_OVER,
				         CASE WHEN DPD.REPORT_DMG = 'Y' THEN 1 ELSE 0 END AS REPORT_DMG,
				         CASE WHEN DPD.REPORT_MISSING = 'Y' THEN 1 ELSE 0 END AS REPORT_MISSING,
		                 TO_CHAR(DPD.GROSS, 'FM999,999,999,999,990.0') AS GROSS,
		                 TO_CHAR(DPD.NET, 'FM999,999,999,999,990.0') AS NET,
		                 TO_CHAR(DPD.RT, 'FM999,999,999,999,990.0') AS RT,
		                 TO_CHAR(DPD.L_CM, 'FM999,999,999,999,999') AS L_CM,
		                 TO_CHAR(DPD.W_CM, 'FM999,999,999,999,999') AS W_CM,
		                 TO_CHAR(DPD.H_CM, 'FM999,999,999,999,999') AS H_CM,
		                 TO_CHAR(DPD.VOLUME, 'FM999,999,999,999,990.0') AS VOLUME,
		                 T.ONSITE_ACTUAL_DATE,
		                 DPD.UNIT,
		                 TO_CHAR(DPD.NOS, 'FM999,999,999,999,999') AS NOS,
		                 DPD.IN_QTY AS IN_QTY,
		                 TO_CHAR(DPD.RSI_QTY, 'FM999,999,999,999,999') AS RSI_QTY,
		                 TO_CHAR(DPD.OUT_QTY, 'FM999,999,999,999,999') AS OUT_QTY,
		                   CASE WHEN DPD.RSI_QTY IS NULL AND DPD.OUT_QTY IS NULL THEN NULL
		                        ELSE NVL(DPD.RSI_QTY, 0) - NVL(DPD.OUT_QTY, 0) END  AS BALANCE_QTY,
		                   CASE WHEN DPD.IN_QTY IS NULL AND DPD.OUT_QTY IS NULL THEN NULL
		                        ELSE NVL(DPD.IN_QTY, 0) - NVL(DPD.OUT_QTY, 0) END AS REMAIN_QTY,

		                   DPD.RSI_QTY AS RSI_QTY_NUM,
		                   DPD.OUT_QTY AS OUT_QTY_NUM,
		                   NVL(DPD.RSI_QTY, 0) - NVL(DPD.OUT_QTY, 0) AS BALANCE_QTY_NUM,
		                   NVL(DPD.IN_QTY, 0) - NVL(DPD.OUT_QTY, 0) AS REMAIN_QTY_NUM,
		                 DPD.REMARKS,
		                 TO_CHAR(DPD.LOC_UPDATE_DATE, 'YYYY/MM/DD') AS LOC_UPDATE_DATE,
			   			 DPD.LOC_UPDATED_BY
		          FROM (SELECT ZIM.TRK_ITEM_SEQ,
		                       ZIM.TRK_ITEM_NAME,
		                       ZIM.TRK_ITEM_GROUP,
		                       ZIM.ORGANIZATION_ID,
		                       ZIM.PROJECT_ID,
		                       ZIM.PROJECT_NO,
		                       PPA.NAME as PROJECT_NAME,
		                       ZIM.TASK_ID,
		                       ZIM.TASK_NUMBER,
		                       ZIM.BATCH,
		                       ZIM.OFFSHORE,
		                       ZIM.PRIMAVERA_ID,
		                       TO_CHAR(ZIM.MPS_PLAN_DATE, 'YYYY/MM/DD') as MPS_PLAN_DATE,
		                       TO_CHAR(ZIM.MPS_EXPECTED_DATE, 'YYYY/MM/DD') as MPS_EXPECTED_DATE,
		                       TO_CHAR(ZIM.MPS_ACTUAL_DATE, 'YYYY/MM/DD') as MPS_ACTUAL_DATE,
		                       ZIM.PURCHASE_DURATION,
		                       TO_CHAR(ZIM.PO_PLAN_DATE, 'YYYY/MM/DD') as PO_PLAN_DATE,
		                       TO_CHAR(ZIM.PO_EXPECTED_DATE, 'YYYY/MM/DD') as PO_EXPECTED_DATE,
		                       TO_CHAR(ZIM.PO_ATCUAL_DATE, 'YYYY/MM/DD') as PO_ATCUAL_DATE,
		                       ZIM.MAKE_DURATION,
		                       ZIM.PROGRESS,
		                       TO_CHAR(ZIM.CARGO_PLAN_DATE, 'YYYY/MM/DD') as CARGO_PLAN_DATE,
		                       TO_CHAR(ZIM.CARGO_EXPECTED_DATE, 'YYYY/MM/DD') as CARGO_EXPECTED_DATE,
		                       TO_CHAR(ZIM.CARGO_PROMISED_DATE, 'YYYY/MM/DD') as CARGO_PROMISED_DATE,
		                       TO_CHAR(ZIM.CARGO_ACTUAL_DATE, 'YYYY/MM/DD') as CARGO_ACTUAL_DATE,
		                       ZIM.SHIPMENT_DURATION,
		                       TO_CHAR(ZIM.FOB_PLAN_DATE, 'YYYY/MM/DD') as FOB_PLAN_DATE,
		                       TO_CHAR(ZIM.FOB_EXPECTED_DATE, 'YYYY/MM/DD') as FOB_EXPECTED_DATE,
		                       TO_CHAR(ZIM.FOB_ACTUAL_DATE, 'YYYY/MM/DD') as FOB_ACTUAL_DATE,
		                       ZIM.TRANS_DURATION,
		                       TO_CHAR(ZIM.ONSITE_PLAN_DATE, 'YYYY/MM/DD') as ONSITE_PLAN_DATE,
		                       TO_CHAR(ZIM.ONSITE_EXPECTED_DATE, 'YYYY/MM/DD') as ONSITE_EXPECTED_DATE,
		                       TO_CHAR(ZIM.ONSITE_ACTUAL_DATE, 'YYYY/MM/DD') as ONSITE_ACTUAL_DATE,
		                       ZIM.PAYMENT_MILESTONE,
		                       ZIM.TRK_ITEM_DEFAULT,
		                       ZIM.INVOICE_NUM,
		                       ZIM.ATTRIBUTE1,
		                       ZIM.ATTRIBUTE2,
		                       ZIM.ATTRIBUTE3,
		                       ZIM.ATTRIBUTE4,
		                       ZIM.ATTRIBUTE5,
		                       ZIM.ATTRIBUTE6,
		                       ZIM.ATTRIBUTE7,
		                       ZIM.ATTRIBUTE8,
		                       ZIM.ATTRIBUTE9,
		                       ZIM.ATTRIBUTE10,
		                       CASE WHEN DI.CNT = 1 THEN DI.INVOICE_NUM
		                            WHEN DI.CNT > 1 THEN DI.INVOICE_NUM || ' 외 ' || DI.CALC_CNT || '건' END AS SEL_INVOICE_NUM
		                  FROM ZVTS_ITEM_MASTER ZIM,
		                       PA_PROJECTS_ALL_INT PPA,
		                       (SELECT ZDI.TRK_ITEM_SEQ,
		                               COUNT(*) AS CNT,
		                               COUNT(*) - 1 AS CALC_CNT,
		                               MAX(ZDI.INVOICE_NUM) AS INVOICE_NUM
		                          FROM ZVTS_DESM_INVOICE ZDI
		                        GROUP BY ZDI.TRK_ITEM_SEQ) DI
		                 WHERE ZIM.PROJECT_ID = PPA.PROJECT_ID
		                   AND ZIM.TRK_ITEM_SEQ = DI.TRK_ITEM_SEQ(+)
		                   AND ZIM.PROJECT_NO = UPPER(#{PROJECT_NO})
		                START WITH ZIM.TRK_ITEM_GROUP IS NULL
		                CONNECT BY PRIOR ZIM.TRK_ITEM_SEQ = ZIM.TRK_ITEM_GROUP) T,
		                DESM_PACKING_DTL_EDIT_LOG DPD
		         WHERE T.TRK_ITEM_NAME = DPD.TRK_ITEM_NAME
		           AND T.PROJECT_NO = DPD.PROJECT_NO
		           AND T.PROJECT_NO = #{PROJECT_NO}
		           AND T.TRK_ITEM_NAME = #{TRK_ITEM_NAME}
		           AND DPD.MATERIAL_CODE = #{MATERIAL_CODE} ) TT
		ORDER BY CREATION_DATE DESC,
		     PACKAGE_LIST_NO,
		     TRK_ITEM_NAME,
		     PACKAGE_NO,
		     DRAWING_NO,
		     TAG_NO
	</select>

	<insert id="saveIdsmOsSummaryEditLogList" parameterType="java.util.Map">
		INSERT INTO DESM_PACKING_MST_EDIT_LOG
		(PACKAGE_NO
		,DESCRIPTION
		,PACKAGE_TYPE
		,GROSS
		,NET
		,RT
		,VOLUME
		,L_CM
		,W_CM
		,H_CM
		,COUNTRY
		,REMARKS
		,PROJECT_NO
		,TRK_ITEM_NAME
		,REPORT_SHORT
		,REPORT_OVER
		,REPORT_DMG
		,REPORT_MISSING
		,REPORT_SHORT_QTY
		,REPORT_OVER_QTY
		,REPORT_DMG_QTY
		,REPORT_MISSING_QTY
		,REPORT_LOST
		,REPORT_DESCRIPTION
		,HAZARDOUS_MATERIAL
		,QTY
		,REMARK
		,VENDOR
		,OLD_INF_OF_VENDOR
		,RECEIVED_DATE
		,STORAGE_LOCATION
		,SUB_CONTRACTOR
		,PACKAGE_LIST_NO
		,IS_CONFIRM_MATERIAL
		,CREATED_BY
		,CREATION_DATE
		,LAST_UPDATED_BY
		,LAST_UPDATE_DATE
		,RECEIPT_DATE
		,LOC_UPDATE_DATE
		,LOC_UPDATED_BY)
		SELECT PACKAGE_NO
		       ,DESCRIPTION
		       ,PACKAGE_TYPE
		       ,GROSS
		       ,NET
		       ,RT
		       ,VOLUME
		       ,L_CM
		       ,W_CM
		       ,H_CM
		       ,COUNTRY
		       ,REMARKS
		       ,PROJECT_NO
		       ,TRK_ITEM_NAME
		       ,REPORT_SHORT
		       ,REPORT_OVER
		       ,REPORT_DMG
		       ,REPORT_MISSING
		       ,REPORT_SHORT_QTY
		       ,REPORT_OVER_QTY
		       ,REPORT_DMG_QTY
		       ,REPORT_MISSING_QTY
		       ,REPORT_LOST
		       ,REPORT_DESCRIPTION
		       ,HAZARDOUS_MATERIAL
		       ,QTY
		       ,REMARK
		       ,VENDOR
		       ,OLD_INF_OF_VENDOR
		       ,RECEIVED_DATE
		       ,STORAGE_LOCATION
		       ,SUB_CONTRACTOR
		       ,PACKAGE_LIST_NO
		       ,IS_CONFIRM_MATERIAL
		       ,#{USER_AD}
		       ,SYSDATE
		       ,#{USER_AD}
		       ,SYSDATE
		       ,RECEIPT_DATE
		       ,LOC_UPDATE_DATE
			   ,LOC_UPDATED_BY
		  FROM DESM_PACKING_MST DPM
		 WHERE DPM.PROJECT_NO = #{PROJECT_NO}
		   AND DPM.TRK_ITEM_NAME = #{TRK_ITEM_NAME}
		   AND DPM.PACKAGE_NO = #{PACKAGE_NO}
	</insert>

	<select id="getDesmPlSummaryEditLogList" parameterType="java.util.Map" resultType="java.util.HashMap">
		SELECT DPM.PACKAGE_NO,
		       NVL(DPM.IS_CONFIRM_MATERIAL, 'N') AS IS_CONFIRM_MATERIAL,
		       DPM.PACKAGE_LIST_NO,
		       DPM.DESCRIPTION,
		       DPM.PACKAGE_TYPE,
		       TO_CHAR(DPM.L_CM, 'FM999,999,999,999,999') AS L_CM,
		       TO_CHAR(DPM.W_CM, 'FM999,999,999,999,999') AS W_CM,
		       TO_CHAR(DPM.H_CM, 'FM999,999,999,999,999') AS H_CM,
		       TO_CHAR(DPM.VOLUME, 'FM999,999,999,999,990.0') AS VOLUME,
		       TO_CHAR(DPM.NET, 'FM999,999,999,999,990.0') AS NET,
		       TO_CHAR(DPM.GROSS, 'FM999,999,999,999,990.0') AS GROSS,
		       DPM.REMARKS,
		       DPM.COUNTRY,
		       DPM.TRK_ITEM_NAME,
		       DPM.PROJECT_NO,
                DPM.REPORT_SHORT_QTY,
                DPM.REPORT_OVER_QTY,
                DPM.REPORT_DMG_QTY,
                DPM.REPORT_MISSING_QTY,
		       CASE WHEN DPM.REPORT_SHORT = 'Y' THEN 1 ELSE 0 END AS REPORT_SHORT,
		       CASE WHEN DPM.REPORT_OVER = 'Y' THEN 1 ELSE 0 END AS REPORT_OVER,
		       CASE WHEN DPM.REPORT_DMG = 'Y' THEN 1 ELSE 0 END AS REPORT_DMG,
		       CASE WHEN DPM.REPORT_MISSING = 'Y' THEN 1 ELSE 0 END AS REPORT_MISSING,
		       DPM.REPORT_LOST,
		       DPM.REPORT_DESCRIPTION,
		       DPM.HAZARDOUS_MATERIAL,
		       DPM.QTY,
		       DPM.REMARK,
		       DPM.VENDOR,
		       DPM.OLD_INF_OF_VENDOR,
		       TO_CHAR(DPM.RECEIVED_DATE, 'YYYY-MM-DD') AS RECEIVED_DATE,
		       TO_CHAR( DPM.RECEIPT_DATE, 'YYYY/MM/DD') AS RECEIPT_DATE,
		       DPM.STORAGE_LOCATION,
		       DPM.SUB_CONTRACTOR,
		       T.SEL_INVOICE_NUM,
		       DPM.CREATED_BY,
		       DPM.CREATION_DATE,
		       TO_CHAR(DPM.CREATION_DATE, 'YYYY/MM/DD') AS CREATION_DATE_TXT,
		       TO_CHAR(DPM.LOC_UPDATE_DATE, 'YYYY/MM/DD') AS LOC_UPDATE_DATE,
			   DPM.LOC_UPDATED_BY
		  FROM (SELECT ZIM.TRK_ITEM_SEQ,
		               ZIM.TRK_ITEM_NAME,
		               ZIM.TRK_ITEM_GROUP,
		               ZIM.ORGANIZATION_ID,
		               ZIM.PROJECT_ID,
		               ZIM.PROJECT_NO,
		               PPA.NAME as PROJECT_NAME,
		               ZIM.TASK_ID,
		               ZIM.TASK_NUMBER,
		               ZIM.BATCH,
		               ZIM.OFFSHORE,
		               ZIM.PRIMAVERA_ID,
		               TO_CHAR(ZIM.MPS_PLAN_DATE, 'YYYY/MM/DD') as MPS_PLAN_DATE,
		               TO_CHAR(ZIM.MPS_EXPECTED_DATE, 'YYYY/MM/DD') as MPS_EXPECTED_DATE,
		               TO_CHAR(ZIM.MPS_ACTUAL_DATE, 'YYYY/MM/DD') as MPS_ACTUAL_DATE,
		               ZIM.PURCHASE_DURATION,
		               TO_CHAR(ZIM.PO_PLAN_DATE, 'YYYY/MM/DD') as PO_PLAN_DATE,
		               TO_CHAR(ZIM.PO_EXPECTED_DATE, 'YYYY/MM/DD') as PO_EXPECTED_DATE,
		               TO_CHAR(ZIM.PO_ATCUAL_DATE, 'YYYY/MM/DD') as PO_ATCUAL_DATE,
		               ZIM.MAKE_DURATION,
		               ZIM.PROGRESS,
		               TO_CHAR(ZIM.CARGO_PLAN_DATE, 'YYYY/MM/DD') as CARGO_PLAN_DATE,
		               TO_CHAR(ZIM.CARGO_EXPECTED_DATE, 'YYYY/MM/DD') as CARGO_EXPECTED_DATE,
		               TO_CHAR(ZIM.CARGO_PROMISED_DATE, 'YYYY/MM/DD') as CARGO_PROMISED_DATE,
		               TO_CHAR(ZIM.CARGO_ACTUAL_DATE, 'YYYY/MM/DD') as CARGO_ACTUAL_DATE,
		               ZIM.SHIPMENT_DURATION,
		               TO_CHAR(ZIM.FOB_PLAN_DATE, 'YYYY/MM/DD') as FOB_PLAN_DATE,
		               TO_CHAR(ZIM.FOB_EXPECTED_DATE, 'YYYY/MM/DD') as FOB_EXPECTED_DATE,
		               TO_CHAR(ZIM.FOB_ACTUAL_DATE, 'YYYY/MM/DD') as FOB_ACTUAL_DATE,
		               ZIM.TRANS_DURATION,
		               TO_CHAR(ZIM.ONSITE_PLAN_DATE, 'YYYY/MM/DD') as ONSITE_PLAN_DATE,
		               TO_CHAR(ZIM.ONSITE_EXPECTED_DATE, 'YYYY/MM/DD') as ONSITE_EXPECTED_DATE,
		               TO_CHAR(ZIM.ONSITE_ACTUAL_DATE, 'YYYY/MM/DD') as ONSITE_ACTUAL_DATE,
		               ZIM.PAYMENT_MILESTONE,
		               ZIM.TRK_ITEM_DEFAULT,
		               ZIM.INVOICE_NUM,
		               ZIM.ATTRIBUTE1,
		               ZIM.ATTRIBUTE2,
		               ZIM.ATTRIBUTE3,
		               ZIM.ATTRIBUTE4,
		               ZIM.ATTRIBUTE5,
		               ZIM.ATTRIBUTE6,
		               ZIM.ATTRIBUTE7,
		               ZIM.ATTRIBUTE8,
		               ZIM.ATTRIBUTE9,
		               ZIM.ATTRIBUTE10,
		               CASE WHEN DI.CNT = 1 THEN DI.INVOICE_NUM
		                    WHEN DI.CNT > 1 THEN DI.INVOICE_NUM || ' 외 ' || DI.CALC_CNT || '건' END AS SEL_INVOICE_NUM
		          FROM ZVTS_ITEM_MASTER ZIM,
		               PA_PROJECTS_ALL_INT PPA,
		               (SELECT ZDI.TRK_ITEM_SEQ,
		                       COUNT(*) AS CNT,
		                       COUNT(*) - 1 AS CALC_CNT,
		                       MAX(ZDI.INVOICE_NUM) AS INVOICE_NUM
		                  FROM ZVTS_DESM_INVOICE ZDI
		                GROUP BY ZDI.TRK_ITEM_SEQ) DI
		         WHERE ZIM.PROJECT_ID = PPA.PROJECT_ID
		           AND ZIM.TRK_ITEM_SEQ = DI.TRK_ITEM_SEQ(+)
		           AND ZIM.PROJECT_NO = UPPER(#{PROJECT_NO})
		        START WITH ZIM.TRK_ITEM_GROUP IS NULL
		        CONNECT BY PRIOR ZIM.TRK_ITEM_SEQ = ZIM.TRK_ITEM_GROUP) T,
		        DESM_PACKING_MST_EDIT_LOG DPM
		WHERE T.TRK_ITEM_NAME = DPM.TRK_ITEM_NAME
		  AND T.PROJECT_NO = DPM.PROJECT_NO
		  AND DPM.PACKAGE_NO = #{PACKAGE_NO}
		  AND DPM.PROJECT_NO = #{PROJECT_NO}
		  AND DPM.TRK_ITEM_NAME = #{TRK_ITEM_NAME}
		ORDER BY DPM.CREATION_DATE DESC, T.SEL_INVOICE_NUM, DPM.PACKAGE_NO
	</select>

	<select id="getDesmMrfPlDetailList" parameterType="java.util.Map" resultType="java.util.HashMap">
		SELECT *
		  FROM (SELECT DT.*,
		               DPD.DESCRIPTION,
		               DPD.DRAWING_NO,
		               DPD.TAG_NO,
		               DPD.IN_QTY,
		               DPD.MATERIAL,
		               DPD.PACKAGE_LIST_NO,
		               DPD.PACKAGE_NO,
		               DPD.UNIT,
		               DPMGT.TYPE,
					   DPMGT.CATEGORY,
					   DPMGT.SUB_CATEGORY,
					   DPMGT.COMMENTS,
					   DPMGT.FILE_GRP_CD,
					   NVL((SELECT CASE WHEN COUNT(*) = 0 THEN NULL ELSE COUNT(*) END FROM ESAATTH ATT WHERE ATT.GRP_CD  = DPMGT.FILE_GRP_CD  AND ATT.STS != 'D'),0)  ATTH_CNT,
		               CASE WHEN RETURN_TYPE = 'RSI Cancel' THEN DT.REQ_QTY - DT.HANDOVER_QTY - DT.MRF_QTY
		                    WHEN RETURN_TYPE = 'Outgoing Return' THEN DT.HANDOVER_QTY - DT.MRF_QTY
		                    END  AS RETURN_AVAILABLE_QTY,
		               DPD.ITEM_SIZE
		          FROM ZVTS_ITEM_MASTER ZIM,
		               DESM_PACKING_MST DPM,
		               DESM_PACKING_DTL DPD,
		               DESM_PACKING_MGT DPMGT,
		               (SELECT DRL.RSI_LINE_ID,
		                       NULL AS RSI_OUTGOING_ID,
		                       DRH.RSI_NO,
		                       DRH.RSI_NAME,
		                       DRH.SUBCONTRACTOR,
		                       TO_CHAR(DRH.APPROVED_DATE, 'YYYY/MM/DD') AS APPROVED_DATE,
		                       DRL.MATERIAL_CODE,
		                       DRL.REQ_QTY,
		                       (SELECT NVL(SUM(HANDOVER_QTY), 0)
		                           FROM DESM_RSI_OUTGOING
		                          WHERE RSI_LINE_ID = DRL.RSI_LINE_ID) AS HANDOVER_QTY,
		                       (SELECT NVL(SUM(REQ_RETURN_QTY), 0)
		                          FROM DESM_MRF_LINE
		                         WHERE RSI_LINE_ID = DRL.RSI_LINE_ID
		                           AND RSI_OUTGOING_ID IS NULL) AS MRF_QTY,
		                       'RSI Cancel' AS RETURN_TYPE
		                  FROM DESM_RSI_HEADER DRH,
		                       DESM_RSI_LINE DRL
		                 WHERE DRH.RSI_HEADER_ID = DRL.RSI_HEADER_ID
		                   AND DRH.STATUS = 'Approved'
		                UNION ALL
		                SELECT DRL.RSI_LINE_ID,
		                       DRO.RSI_OUTGOING_ID,
		                       DRH.RSI_NO,
		                       DRH.RSI_NAME,
		                       DRH.SUBCONTRACTOR,
		                       TO_CHAR(DRH.APPROVED_DATE, 'YYYY/MM/DD') AS APPROVED_DATE,
		                       DRL.MATERIAL_CODE,
		                       DRL.REQ_QTY,
		                       NVL(DRO.HANDOVER_QTY, 0) AS HANDOVER_QTY,
		                       (SELECT NVL(SUM(REQ_RETURN_QTY), 0)
		                          FROM DESM_MRF_LINE
		                         WHERE RSI_OUTGOING_ID = DRO.RSI_OUTGOING_ID) AS MRF_QTY,
		                       'Outgoing Return' AS RETURN_TYPE
		                  FROM DESM_RSI_HEADER DRH,
		                       DESM_RSI_LINE DRL,
		                       DESM_RSI_OUTGOING DRO
		                 WHERE DRH.RSI_HEADER_ID = DRL.RSI_HEADER_ID
		                   AND DRL.RSI_LINE_ID = DRO.RSI_LINE_ID
		                   AND DRH.STATUS = 'Approved') DT
		         WHERE ZIM.PROJECT_NO = DPM.PROJECT_NO
		           AND ZIM.TRK_ITEM_NAME = DPM.TRK_ITEM_NAME
		           AND DPM.PROJECT_NO = DPD.PROJECT_NO
		           AND DPM.TRK_ITEM_NAME = DPD.TRK_ITEM_NAME
		           AND DPM.PACKAGE_NO = DPD.PACKAGE_NO
		           AND DPD.MATERIAL_CODE = DT.MATERIAL_CODE
		           AND DPD.PROJECT_NO = DPMGT.PROJECT_NO(+)
				   AND DPD.MATERIAL_CODE = DPMGT.MATERIAL_CODE(+)
		           AND DPM.IS_CONFIRM_MATERIAL = 'Y'
		           AND ZIM.PROJECT_NO = #{PROJECT_NO}
			     <if test='RSI_NAME != null and RSI_NAME !=""'>
			       AND UPPER(DT.RSI_NAME) LIKE '%' || UPPER(#{RSI_NAME}) || '%'
			     </if>
			     <if test='RSI_NO != null and RSI_NO !=""'>
			       AND UPPER(DT.RSI_NO) LIKE '%' || UPPER(#{RSI_NO}) || '%'
			     </if>
			     <if test='SUBCONTRACTOR != null and SUBCONTRACTOR != ""'>
				    AND UPPER(DT.SUBCONTRACTOR) LIKE '%' || UPPER(#{SUBCONTRACTOR}) || '%'
				 </if>
			     <if test='DESCRIPTION != null and DESCRIPTION !=""'>
			       AND UPPER(DPD.DESCRIPTION) LIKE '%' || UPPER(#{DESCRIPTION}) || '%'
			     </if>
			     <if test='PACKAGE_LIST_NO != null and PACKAGE_LIST_NO !=""'>
			       AND UPPER(DPM.PACKAGE_LIST_NO) LIKE '%' || UPPER(#{PACKAGE_LIST_NO}) || '%'
			     </if>
			     <if test='TAG_NO != null and TAG_NO !=""'>
			       AND UPPER(DPD.TAG_NO) LIKE '%' || UPPER(#{TAG_NO}) || '%'
			     </if>
			     <if test='ATTRIBUTE10 != null and ATTRIBUTE10 !=""'>
			       AND ZIM.ATTRIBUTE10 = #{ATTRIBUTE10}
			     </if>
			     <if test='MATERIAL_CODE != null and MATERIAL_CODE !=""'>
			       AND UPPER(DPD.MATERIAL_CODE) LIKE '%' || UPPER(#{MATERIAL_CODE}) || '%'
			     </if>
			     <if test='SIZE != null and SIZE !=""'>
			       AND UPPER(DPD.ITEM_SIZE) LIKE '%' || UPPER(#{SIZE}) || '%'
			     </if>
			     <if test='TYPE != null and TYPE !=""'>
					AND DPMGT.TYPE = #{TYPE}
				 </if>
				 <if test='CATEGORY != null and CATEGORY !=""'>
					AND UPPER(DPMGT.CATEGORY) LIKE '%' || UPPER(#{CATEGORY}) || '%'
				 </if>
				 <if test='SUB_CATEGORY != null and SUB_CATEGORY !=""'>
					AND UPPER(DPMGT.SUB_CATEGORY) LIKE '%' || UPPER(#{SUB_CATEGORY}) || '%'
				 </if>
				 <if test='COMMENTS != null and COMMENTS !=""'>
					AND UPPER(DPMGT.COMMENTS) LIKE '%' || UPPER(#{COMMENTS}) || '%'
				 </if>
		)
		WHERE RETURN_AVAILABLE_QTY > 0
		ORDER BY MATERIAL_CODE, RSI_NAME, RSI_NO
	</select>

	<select id="getDesmMrfHeaderData" parameterType="java.util.Map" resultType="java.util.HashMap">
	    SELECT 'MRF' || TO_CHAR(SYSDATE,'YYYY') || LPAD(MRF_NO_NUM, 6, '0') AS MRF_NO,
	           SEQ_DESM_MRF_HEADER.NEXTVAL AS MRF_HEADER_ID
	      FROM (SELECT CASE WHEN MAX(MRF_NO) IS NULL THEN 1
	                        ELSE TO_NUMBER(SUBSTR(MAX(MRF_NO), -6)) + 1 END AS MRF_NO_NUM
	              FROM DESM_MRF_HEADER
	             WHERE MRF_NO LIKE 'MRF' || TO_CHAR(SYSDATE,'YYYY') || '%')
	</select>

	<select id="getDesmMrfLineQtyList" parameterType="java.util.Map" resultType="java.util.HashMap">
		SELECT DT.*,
		       CASE WHEN DT.RETURN_TYPE = 'RSI Cancel' THEN DT.REQ_QTY - DT.HANDOVER_QTY - DT.MRF_QTY
		            WHEN DT.RETURN_TYPE = 'Outgoing Return' THEN DT.HANDOVER_QTY - DT.MRF_QTY
		            END  AS RETURN_AVAILABLE_QTY,
		       DPD.DESCRIPTION,
		       DPD.REMARKS
		  FROM DESM_PACKING_MST DPM,
       		   DESM_PACKING_DTL DPD,
		       (SELECT DRH.RSI_HEADER_ID,
		       		   DRL.RSI_LINE_ID,
		               NULL AS RSI_OUTGOING_ID,
		               DRL.MATERIAL_CODE,
		               DRL.REQ_QTY,
		               (SELECT NVL(SUM(HANDOVER_QTY), 0)
		                   FROM DESM_RSI_OUTGOING
		                  WHERE RSI_LINE_ID = DRL.RSI_LINE_ID) AS HANDOVER_QTY,
		               (SELECT NVL(SUM(REQ_RETURN_QTY), 0)
		                  FROM DESM_MRF_LINE
		                 WHERE RSI_LINE_ID = DRL.RSI_LINE_ID
		                   AND MRF_LINE_ID != #{MRF_LINE_ID}
		                   AND RSI_OUTGOING_ID IS NULL) AS MRF_QTY,
		               'RSI Cancel' AS RETURN_TYPE
		          FROM DESM_RSI_HEADER DRH,
		               DESM_RSI_LINE DRL
		         WHERE DRH.RSI_HEADER_ID = DRL.RSI_HEADER_ID
		           AND DRH.STATUS = 'Approved'
		        UNION ALL
		        SELECT DRH.RSI_HEADER_ID,
		               DRL.RSI_LINE_ID,
		               DRO.RSI_OUTGOING_ID,
		               DRL.MATERIAL_CODE,
		               DRL.REQ_QTY,
		               NVL(DRO.HANDOVER_QTY, 0) AS HANDOVER_QTY,
		               (SELECT NVL(SUM(REQ_RETURN_QTY), 0)
		                  FROM DESM_MRF_LINE
		                 WHERE RSI_OUTGOING_ID = DRO.RSI_OUTGOING_ID
		                   AND MRF_LINE_ID != #{MRF_LINE_ID}) AS MRF_QTY,
		               'Outgoing Return' AS RETURN_TYPE
		          FROM DESM_RSI_HEADER DRH,
		               DESM_RSI_LINE DRL,
		               DESM_RSI_OUTGOING DRO
		         WHERE DRH.RSI_HEADER_ID = DRL.RSI_HEADER_ID
		           AND DRL.RSI_LINE_ID = DRO.RSI_LINE_ID
		           AND DRH.STATUS = 'Approved') DT
		 WHERE DPM.PROJECT_NO = DPD.PROJECT_NO
		   AND DPM.TRK_ITEM_NAME = DPD.TRK_ITEM_NAME
		   AND DPM.PACKAGE_NO = DPD.PACKAGE_NO
		   AND DPD.MATERIAL_CODE = DT.MATERIAL_CODE
		   AND DPM.IS_CONFIRM_MATERIAL = 'Y'
		   AND DPM.PROJECT_NO = #{PROJECT_NO}
		   AND DT.RSI_LINE_ID = #{RSI_LINE_ID}
		   AND DT.RETURN_TYPE = #{RETURN_TYPE}
	     <if test='RSI_OUTGOING_ID != null and RSI_OUTGOING_ID !=""'>
	       AND DT.RSI_OUTGOING_ID = #{RSI_OUTGOING_ID}
	     </if>
	</select>

	<update id="saveDesmMrfLineSave" parameterType="java.util.Map">
		MERGE INTO DESM_MRF_LINE
		USING DUAL
		ON (MRF_LINE_ID = #{MRF_LINE_ID})
		WHEN MATCHED THEN
		     UPDATE SET
		     	    MATERIAL_CODE = #{MATERIAL_CODE},
		     	    DESCRIPTION = #{DESCRIPTION},
		            REQ_RETURN_QTY = #{REQ_RETURN_QTY},
		            REMARK = #{REMARK},
		            LAST_UPDATED_BY = #{USER_AD},
		            LAST_UPDATE_DATE = SYSDATE
		WHEN NOT MATCHED THEN
		     INSERT
		     (MRF_HEADER_ID
		     ,MRF_LINE_ID
		     ,RSI_HEADER_ID
		     ,RSI_LINE_ID
		     ,RSI_OUTGOING_ID
		     ,MATERIAL_CODE
		     ,DESCRIPTION
		     ,REQ_RETURN_QTY
		     ,REMARK
		     ,CREATED_BY
		     ,CREATION_DATE
		     ,LAST_UPDATED_BY
		     ,LAST_UPDATE_DATE)
		     VALUES
		     (#{MRF_HEADER_ID}
		     ,SEQ_DESM_MRF_LINE.NEXTVAL
		     ,#{RSI_HEADER_ID}
		     ,#{RSI_LINE_ID}
		     ,#{RSI_OUTGOING_ID}
		     ,#{MATERIAL_CODE}
		     ,#{DESCRIPTION}
		     ,#{REQ_RETURN_QTY}
		     ,#{REMARK}
		     ,#{USER_AD}
		     ,SYSDATE
		     ,#{USER_AD}
		     ,SYSDATE)
	</update>

	<update id="saveDesmMrfQtySave" parameterType="java.util.Map">
	    MERGE INTO DESM_PACKING_DTL TTD
	    USING (SELECT DPD.PROJECT_NO,
				       DPD.TRK_ITEM_NAME,
				       DPD.PACKAGE_NO,
				       DPD.MATERIAL_CODE,
				       SUM(NVL(DML.REQ_RETURN_QTY, 0)) AS REQ_RETURN_QTY
				  FROM DESM_PACKING_MST DPM,
				       DESM_PACKING_DTL DPD,
				       DESM_RSI_LINE DRL,
				       DESM_MRF_LINE DML
				 WHERE DPM.PROJECT_NO = DPD.PROJECT_NO
				   AND DPM.TRK_ITEM_NAME = DPD.TRK_ITEM_NAME
				   AND DPM.PACKAGE_NO = DPD.PACKAGE_NO
				   AND DPD.MATERIAL_CODE = DRL.MATERIAL_CODE(+)
				   AND DRL.RSI_LINE_ID = DML.RSI_LINE_ID(+)
				   AND DPM.IS_CONFIRM_MATERIAL = 'Y'
				   AND DPD.MATERIAL_CODE = #{MATERIAL_CODE}
				   AND DPM.PROJECT_NO = #{PROJECT_NO}
				GROUP BY DPD.PROJECT_NO,
				         DPD.TRK_ITEM_NAME,
				         DPD.PACKAGE_NO,
				         DPD.MATERIAL_CODE) TD
	    ON (TTD.PROJECT_NO = TD.PROJECT_NO AND TTD.TRK_ITEM_NAME = TD.TRK_ITEM_NAME AND TTD.PACKAGE_NO = TD.PACKAGE_NO AND TTD.MATERIAL_CODE = TD.MATERIAL_CODE)
	    WHEN MATCHED THEN
	         UPDATE SET TTD.MRF_QTY = TD.REQ_RETURN_QTY
	</update>

	<update id="saveDesmMrfHeaderSave" parameterType="java.util.Map">
		MERGE INTO DESM_MRF_HEADER
		USING DUAL
		ON (MRF_HEADER_ID = #{MRF_HEADER_ID})
		WHEN MATCHED THEN
		     UPDATE SET
		         <if test='REQUESTED_BY != null and REQUESTED_BY != ""'>
		            REQUESTED_BY = #{REQUESTED_BY},
		            <if test='STATUS != null and STATUS == "Pre-Checked"'>
		            REQUEST_DATE = SYSDATE,
		            </if>
		         </if>
		         <if test='CHECKED_BY != null and CHECKED_BY != ""'>
		            CHECKED_BY = #{CHECKED_BY},
		            <if test='STATUS != null and STATUS == "Pre-Confirmed"'>
		            CHECKED_DATE = SYSDATE,
		            </if>
		         </if>
		         <if test='CONFIRMED_BY != null and CONFIRMED_BY != ""'>
		            CONFIRMED_BY = #{CONFIRMED_BY},
		            <if test='STATUS != null and STATUS == "Pre-Approved"'>
		            CONFIRMED_DATE = SYSDATE,
		            </if>
		         </if>
		         <if test='APPROVED_BY != null and APPROVED_BY != ""'>
		            APPROVED_BY = #{APPROVED_BY},
		            <if test='STATUS != null and STATUS == "Approved"'>
		            APPROVED_DATE = SYSDATE,
		            </if>
		         </if>
		         	MRF_NAME = #{MRF_NAME},
		            STATUS = #{STATUS},
		            SUBCONTRACTOR = #{SUBCONTRACTOR},
		            RETURN_REQ_DATE = #{RETURN_REQ_DATE},
		            REMARK = #{REMARK},
		            ATTACH_GRP_CD = #{ATTACH_GRP_CD},
		            DESCRIPTION = #{DESCRIPTION},
		            PROJECT_NO = #{PROJECT_NO},
		            LAST_UPDATED_BY = #{USER_AD},
		            LAST_UPDATE_DATE = SYSDATE
		WHEN NOT MATCHED THEN
		     INSERT
		     (MRF_HEADER_ID
		     ,MRF_NO
	       <if test='REQUESTED_BY != null and REQUESTED_BY != ""'>
	         ,REQUESTED_BY
             <if test='STATUS != null and STATUS == "Pre-Checked"'>
	         ,REQUEST_DATE
             </if>
	       </if>
	       <if test='CHECKED_BY != null and CHECKED_BY != ""'>
	         ,CHECKED_BY
             <if test='STATUS != null and STATUS == "Pre-Confirmed"'>
	         ,CHECKED_DATE
             </if>
	       </if>
	       <if test='CONFIRMED_BY != null and CONFIRMED_BY != ""'>
	         ,CONFIRMED_BY
             <if test='STATUS != null and STATUS == "Pre-Approved"'>
	         ,CONFIRMED_DATE
             </if>
	       </if>
	       <if test='APPROVED_BY != null and APPROVED_BY != ""'>
	         ,APPROVED_BY
             <if test='STATUS != null and STATUS == "Approved"'>
	         ,APPROVED_DATE
             </if>
	       </if>
	         ,MRF_NAME
		     ,STATUS
		     ,SUBCONTRACTOR
		     ,RETURN_REQ_DATE
		     ,REMARK
		     ,ATTACH_GRP_CD
		     ,DESCRIPTION
		     ,PROJECT_NO
		     ,CREATED_BY
		     ,CREATION_DATE
		     ,LAST_UPDATED_BY
		     ,LAST_UPDATE_DATE)
		     VALUES
		     (#{MRF_HEADER_ID}
		     ,#{MRF_NO}
	       <if test='REQUESTED_BY != null and REQUESTED_BY != ""'>
	         ,#{REQUESTED_BY}
             <if test='STATUS != null and STATUS == "Pre-Checked"'>
	         ,SYSDATE
             </if>
	       </if>
	       <if test='CHECKED_BY != null and CHECKED_BY != ""'>
	         ,#{CHECKED_BY}
             <if test='STATUS != null and STATUS == "Pre-Confirmed"'>
	         ,SYSDATE
             </if>
	       </if>
	       <if test='CONFIRMED_BY != null and CONFIRMED_BY != ""'>
	         ,#{CONFIRMED_BY}
             <if test='STATUS != null and STATUS == "Pre-Approved"'>
	         ,SYSDATE
             </if>
	       </if>
	       <if test='APPROVED_BY != null and APPROVED_BY != ""'>
	         ,#{APPROVED_BY}
             <if test='STATUS != null and STATUS == "Approved"'>
	         ,SYSDATE
             </if>
	       </if>
	         ,#{MRF_NAME}
		     ,#{STATUS}
		     ,#{SUBCONTRACTOR}
		     ,#{RETURN_REQ_DATE}
		     ,#{REMARK}
		     ,#{ATTACH_GRP_CD}
		     ,#{DESCRIPTION}
		     ,#{PROJECT_NO}
		     ,#{USER_AD}
		     ,SYSDATE
		     ,#{USER_AD}
		     ,SYSDATE)
	</update>

	<select id="getDesmMrfList" parameterType="java.util.Map" resultType="java.util.HashMap">
		SELECT DMH.MRF_HEADER_ID,
		       DMH.MRF_NO,
		       DMH.MRF_NAME,
		       DMH.STATUS,
		       DMH.DESCRIPTION,
		       DMH.SUBCONTRACTOR,
		       DMH.SUBCON_MANAGER,
	           DMH.CREATED_BY,
	           TO_CHAR(DMH.CREATION_DATE + CT.OPERATOR / (24 * 60), 'YYYY/MM/DD HH24:MI:SS') AS CREATION_DATE,
	           DMH.LAST_UPDATED_BY,
	           TO_CHAR(DMH.LAST_UPDATE_DATE + CT.OPERATOR / (24 * 60), 'YYYY/MM/DD HH24:MI:SS') AS LAST_UPDATE_DATE,
		       TO_CHAR(DMH.REQUEST_DATE, 'YYYY/MM/DD') AS REQUEST_DATE,
		       TO_CHAR(DMH.RETURN_REQ_DATE, 'YYYY/MM/DD') AS RETURN_REQ_DATE,
		       TO_CHAR(DMH.APPROVED_DATE, 'YYYY/MM/DD') AS APPROVED_DATE,
		       DMH.REMARK,
		       DMH.ATTACH_GRP_CD,
	           CASE WHEN DMH.REQUEST_DATE IS NOT NULL THEN DMH.REQUESTED_BY END AS REQUESTED_BY,
	           CASE WHEN DMH.CHECKED_DATE IS NOT NULL THEN DMH.CHECKED_BY END AS CHECKED_BY,
	           CASE WHEN DMH.CONFIRMED_DATE IS NOT NULL THEN DMH.CONFIRMED_BY END AS CONFIRMED_BY,
	           CASE WHEN DMH.APPROVED_DATE IS NOT NULL THEN DMH.APPROVED_BY END AS APPROVED_BY,
		       (SELECT COUNT(*)
		          FROM ESAATTH A
		         WHERE A.SYS_ID = 'EMRO'
		           AND A.STS  <![CDATA[ <> ]]>   'D'
		           AND A.GRP_CD = DMH.ATTACH_GRP_CD) AS ATT_CNT
		  FROM DESM_MRF_HEADER DMH,
	           (SELECT NVL(TO_NUMBER(MAX(DCD.DTL_NAME_KO)), 0) AS OPERATOR
	              FROM DESM_USER_DEFAULT_COUNTRY DUDC,
	                   DESM_CODE_DTL DCD
	             WHERE DUDC.COUNTRY_CODE = DCD.DTL_CODE
	               AND DCD.DELEGATE_FLAG = 'N'
	               AND DUDC.USER_AD = #{USER_AD}) CT
	     WHERE 1 = 1
		 <if test='STATUS != null and STATUS != ""'>
		   AND DMH.STATUS = #{STATUS}
		 </if>
		 <if test='CLOSED_CODE != null and CLOSED_CODE != ""'>
		   AND NVL(DMH.CLOSED_CODE, 'OPEN') = #{CLOSED_CODE}
		 </if>
		 <if test='MRF_NO != null and MRF_NO != ""'>
		   AND UPPER(DMH.MRF_NO) LIKE '%' || UPPER(#{MRF_NO}) || '%'
		 </if>
		 <if test='MRF_NAME != null and MRF_NAME != ""'>
		   AND UPPER(DMH.MRF_NAME) LIKE '%' || UPPER(#{MRF_NAME}) || '%'
		 </if>
		 <if test='DESCRIPTION != null and DESCRIPTION != ""'>
		   AND UPPER(DMH.DESCRIPTION) LIKE '%' || UPPER(#{DESCRIPTION}) || '%'
		 </if>
		 <if test='SUBCONTRACTOR != null and SUBCONTRACTOR != ""'>
		   AND UPPER(DMH.SUBCONTRACTOR) LIKE '%' || UPPER(#{SUBCONTRACTOR}) || '%'
		 </if>
		 <if test='START_REQUEST_DATE != null and START_REQUEST_DATE != ""'>
		   AND DMH.RETURN_REQ_DATE >= TO_DATE(#{START_REQUEST_DATE}, 'YYYY/MM/DD')
		 </if>
		 <if test='END_REQUEST_DATE != null and END_REQUEST_DATE != ""'>
		   AND DMH.RETURN_REQ_DATE <![CDATA[ < ]]> TO_DATE(#{END_REQUEST_DATE}, 'YYYY/MM/DD') + 1
		 </if>
		 <if test='PROJECT_NO != null and PROJECT_NO != ""'>
		   AND DMH.PROJECT_NO = #{PROJECT_NO}
		 </if>
		 <if test='MATERIAL_TYPE != null and MATERIAL_TYPE != ""'>
           AND EXISTS (SELECT 1
                         FROM DESM_USER_ROLE DUR
                        WHERE DUR.ROLE_SEQ = #{MATERIAL_TYPE}
                          AND DUR.USER_AD = DMH.CHECKED_BY)
		 </if>
		ORDER BY DMH.MRF_HEADER_ID DESC
	</select>

	<select id="getDesmMrfHeaderList" parameterType="java.util.Map" resultType="java.util.HashMap">
	    SELECT DMH.MRF_HEADER_ID,
	           DMH.MRF_NO,
	           DMH.MRF_NAME,
	           DMH.STATUS,
	           DMH.DESCRIPTION,
	           DMH.SUBCONTRACTOR,
	           DMH.SUBCON_MANAGER,
	           TO_CHAR(DMH.RETURN_REQ_DATE, 'YYYY/MM/DD') AS RETURN_REQ_DATE,
	           DMH.REMARK,
	           DMH.ATTACH_GRP_CD,
	           TO_CHAR(DMH.REQUEST_DATE + CT.OPERATOR / (24 * 60), 'YYYY/MM/DD HH24:MI:SS') AS REQUEST_DATE,
	           DMH.REQUESTED_BY,
	           TO_CHAR(DMH.CHECKED_DATE + CT.OPERATOR / (24 * 60), 'YYYY/MM/DD HH24:MI:SS') AS CHECKED_DATE,
	           DMH.CHECKED_BY,
	           TO_CHAR(DMH.CONFIRMED_DATE + CT.OPERATOR / (24 * 60), 'YYYY/MM/DD HH24:MI:SS') AS CONFIRMED_DATE,
	           DMH.CONFIRMED_BY,
	           TO_CHAR(DMH.APPROVED_DATE + CT.OPERATOR / (24 * 60), 'YYYY/MM/DD HH24:MI:SS') AS APPROVED_DATE,
	           DMH.APPROVED_BY
		  FROM DESM_MRF_HEADER DMH,
		       (SELECT NVL(TO_NUMBER(MAX(DCD.DTL_NAME_KO)), 0) AS OPERATOR
		          FROM DESM_USER_DEFAULT_COUNTRY DUDC,
		               DESM_CODE_DTL DCD
		         WHERE DUDC.COUNTRY_CODE = DCD.DTL_CODE
		           AND DCD.DELEGATE_FLAG = 'N'
		           AND DUDC.USER_AD = #{USER_AD}) CT
		 WHERE DMH.MRF_HEADER_ID = #{MRF_HEADER_ID}
	</select>

	<select id="getDesmMrfLineList" parameterType="java.util.Map" resultType="java.util.HashMap">
		SELECT DT.*,
		       DPD.DESCRIPTION,
		       DPD.DRAWING_NO,
		       DPD.TAG_NO,
		       DPD.IN_QTY,
		       DPD.MATERIAL,
		       DPD.PACKAGE_LIST_NO,
		       DPD.PACKAGE_NO,
		       DPD.UNIT,
		       DPMGT.TYPE,
			   DPMGT.CATEGORY,DPMGT.SUB_CATEGORY,DPMGT.COMMENTS,DPMGT.FILE_GRP_CD, NVL((SELECT CASE WHEN COUNT(*) = 0 THEN NULL ELSE COUNT(*) END FROM ESAATTH ATT WHERE ATT.GRP_CD  = DPMGT.FILE_GRP_CD  AND ATT.STS != 'D'),0)  ATTH_CNT,
		       CASE WHEN RETURN_TYPE = 'RSI Cancel' THEN DT.REQ_QTY - DT.HANDOVER_QTY - DT.MRF_QTY
		            WHEN RETURN_TYPE = 'Outgoing Return' THEN DT.HANDOVER_QTY - DT.MRF_QTY
		            END  AS RETURN_AVAILABLE_QTY,
		       ROW_NUMBER() OVER(ORDER BY DT.MRF_LINE_ID) AS NO
		  FROM ZVTS_ITEM_MASTER ZIM,
		       DESM_PACKING_MST DPM,
		       DESM_PACKING_DTL DPD,
		       DESM_PACKING_MGT DPMGT,
		       (SELECT DML.MRF_HEADER_ID,
		               DML.MRF_LINE_ID,
		               DML.RSI_HEADER_ID,
		               DML.RSI_LINE_ID,
		               DML.RSI_OUTGOING_ID,
		               DRH.RSI_NO,
		               DRH.RSI_NAME,
		               DRH.SUBCONTRACTOR,
		               TO_CHAR(DRH.APPROVED_DATE, 'YYYY/MM/DD') AS APPROVED_DATE,
		               DRL.MATERIAL_CODE,
		               DRL.REQ_QTY,
		               (SELECT NVL(SUM(HANDOVER_QTY), 0)
		                   FROM DESM_RSI_OUTGOING
		                  WHERE RSI_LINE_ID = DRL.RSI_LINE_ID) AS HANDOVER_QTY,
		               (SELECT NVL(SUM(REQ_RETURN_QTY), 0)
		                  FROM DESM_MRF_LINE
		                 WHERE RSI_LINE_ID = DRL.RSI_LINE_ID
		                   AND MRF_LINE_ID != DML.MRF_LINE_ID
		                   AND RSI_OUTGOING_ID IS NULL) AS MRF_QTY,
		               DML.REQ_RETURN_QTY AS RETURN_QTY,
		               'RSI Cancel' AS RETURN_TYPE
		          FROM DESM_RSI_HEADER DRH,
		               DESM_RSI_LINE DRL,
		               DESM_MRF_LINE DML
		         WHERE DRH.RSI_HEADER_ID = DRL.RSI_HEADER_ID
		           AND DRL.RSI_LINE_ID = DML.RSI_LINE_ID
		           AND DML.RSI_OUTGOING_ID IS NULL
		           AND DML.MRF_HEADER_ID = #{MRF_HEADER_ID}
		           AND DRH.STATUS = 'Approved'
		        UNION ALL
		        SELECT DML.MRF_HEADER_ID,
		               DML.MRF_LINE_ID,
		               DML.RSI_HEADER_ID,
		               DML.RSI_LINE_ID,
		               DML.RSI_OUTGOING_ID,
		               DRH.RSI_NO,
		               DRH.RSI_NAME,
		               DRH.SUBCONTRACTOR,
		               TO_CHAR(DRH.APPROVED_DATE, 'YYYY/MM/DD') AS APPROVED_DATE,
		               DRL.MATERIAL_CODE,
		               DRL.REQ_QTY,
		               NVL(DRO.HANDOVER_QTY, 0) AS HANDOVER_QTY,
		               (SELECT NVL(SUM(REQ_RETURN_QTY), 0)
		                  FROM DESM_MRF_LINE
		                 WHERE RSI_OUTGOING_ID = DRO.RSI_OUTGOING_ID
		                   AND MRF_LINE_ID != DML.MRF_LINE_ID) AS MRF_QTY,
		               DML.REQ_RETURN_QTY AS RETURN_QTY,
		               'Outgoing Return' AS RETURN_TYPE
		          FROM DESM_RSI_HEADER DRH,
		               DESM_RSI_LINE DRL,
		               DESM_RSI_OUTGOING DRO,
		               DESM_MRF_LINE DML
		         WHERE DRH.RSI_HEADER_ID = DRL.RSI_HEADER_ID
		           AND DRL.RSI_LINE_ID = DRO.RSI_LINE_ID
		           AND DRO.RSI_LINE_ID = DML.RSI_LINE_ID
		           AND DRO.RSI_OUTGOING_ID = DML.RSI_OUTGOING_ID
		           AND DML.MRF_HEADER_ID = #{MRF_HEADER_ID}
		           AND DRH.STATUS = 'Approved') DT
		 WHERE ZIM.PROJECT_NO = DPM.PROJECT_NO
		   AND ZIM.TRK_ITEM_NAME = DPM.TRK_ITEM_NAME
		   AND DPM.PROJECT_NO = DPD.PROJECT_NO
		   AND DPM.TRK_ITEM_NAME = DPD.TRK_ITEM_NAME
		   AND DPM.PACKAGE_NO = DPD.PACKAGE_NO
		   AND DPD.MATERIAL_CODE = DT.MATERIAL_CODE
		   AND DPD.PROJECT_NO = DPMGT.PROJECT_NO(+)
		   AND DPD.MATERIAL_CODE = DPMGT.MATERIAL_CODE(+)
		   AND DPM.IS_CONFIRM_MATERIAL = 'Y'
		   AND ZIM.PROJECT_NO = #{PROJECT_NO}
	</select>

	<update id="saveDesmMrfReject" parameterType="java.util.Map">
		UPDATE DESM_MRF_HEADER
		   SET STATUS = 'Rejected',
		   	   REQUEST_DATE = '',
		   	   CHECKED_DATE = '',
		   	   CONFIRMED_DATE = '',
		   	   APPROVED_DATE = ''
			 <if test='REMARK != null and REMARK != ""'>
			   ,REMARK = #{REMARK}
			 </if>
		 WHERE MRF_HEADER_ID = #{MRF_HEADER_ID}
	</update>

	<delete id="deleteDesmMrfDtl" parameterType="java.util.Map">
		DELETE FROM DESM_MRF_LINE
		 WHERE MRF_LINE_ID = #{MRF_LINE_ID}
	</delete>

	<update id="saveDesmMrfFileGrpCd" parameterType="java.util.Map">
		UPDATE DESM_MRF_HEADER
		   SET ATTACH_GRP_CD = #{FILE_GRP_CD}
		 WHERE MRF_HEADER_ID = #{MRF_HEADER_ID}
	</update>

	<update id="saveDesmMaterialManagementFileGrpCd" parameterType="java.util.Map">
		UPDATE DESM_PACKING_MGT
		   SET FILE_GRP_CD = #{FILE_GRP_CD}
		 WHERE PROJECT_NO = #{PROJECT_NO}
		 AND MATERIAL_CODE = #{MATERIAL_CODE}
	</update>

	<select id="getDeleteDesmMrfList" parameterType="java.util.Map" resultType="java.util.HashMap">
		SELECT DML.MRF_LINE_ID,
		       DML.MATERIAL_CODE,
		       DML.RSI_LINE_ID
		  FROM DESM_MRF_HEADER DMH,
		       DESM_MRF_LINE DML
		 WHERE DMH.MRF_HEADER_ID = DML.MRF_HEADER_ID
		   AND DMH.MRF_HEADER_ID = #{MRF_HEADER_ID}
	</select>

	<delete id="deleteDesmMrfMst" parameterType="java.util.Map">
		DELETE
		  FROM DESM_MRF_HEADER
		 WHERE MRF_HEADER_ID = #{MRF_HEADER_ID}
	</delete>

	<select id="getDesmReturnCreationList" parameterType="java.util.Map" resultType="java.util.HashMap">
		SELECT DT.*,
       		   DT.RETURN_AVAILABLE_QTY AS RETURN_QTY
       	  FROM (SELECT DMH.MRF_NO,
				       DMH.MRF_NAME,
				       DMH.SUBCONTRACTOR,
				       DMH.RETURN_REQ_DATE,
				       DML.MATERIAL_CODE,
				       DML.REQ_RETURN_QTY,
				       DML.REQ_RETURN_QTY - (SELECT NVL(SUM(RETURN_QTY), 0)
				                               FROM DESM_MRF_RETURN
				                              WHERE MRF_LINE_ID = DML.MRF_LINE_ID) AS RETURN_AVAILABLE_QTY,
				       TO_CHAR(SYSDATE - 1, 'YYYY/MM/DD') AS RETURN_DATE,
				       DPD.PACKAGE_NO,
				       DPD.DESCRIPTION,
				       DPD.DRAWING_NO,
				       DPMGT.TYPE,
					   DPMGT.CATEGORY,DPMGT.SUB_CATEGORY,DPMGT.COMMENTS,DPMGT.FILE_GRP_CD, NVL((SELECT CASE WHEN COUNT(*) = 0 THEN NULL ELSE COUNT(*) END FROM ESAATTH ATT WHERE ATT.GRP_CD  = DPMGT.FILE_GRP_CD  AND ATT.STS != 'D'),0)  ATTH_CNT,
				       DML.MRF_HEADER_ID,
				       DML.MRF_LINE_ID,
				       DML.RSI_HEADER_ID,
				       DML.RSI_LINE_ID,
				       DML.RSI_OUTGOING_ID
				  FROM DESM_MRF_HEADER DMH,
				       DESM_MRF_LINE DML,
				       DESM_PACKING_DTL DPD,
				       DESM_PACKING_MGT DPMGT,
				       DESM_PACKING_MST DPM,
				       ZVTS_ITEM_MASTER ZIM
				 WHERE DMH.MRF_HEADER_ID = DML.MRF_HEADER_ID
				   AND DML.MATERIAL_CODE = DPD.MATERIAL_CODE
				   AND DPD.PROJECT_NO = DPM.PROJECT_NO
				   AND DPD.TRK_ITEM_NAME = DPM.TRK_ITEM_NAME
				   AND DPD.PACKAGE_NO = DPM.PACKAGE_NO
				   AND DPD.PROJECT_NO = DPMGT.PROJECT_NO(+)
		   		   AND DPD.MATERIAL_CODE = DPMGT.MATERIAL_CODE(+)
				   AND DPM.PROJECT_NO = ZIM.PROJECT_NO
				   AND DPM.TRK_ITEM_NAME = ZIM.TRK_ITEM_NAME
				   AND DMH.STATUS = 'Approved'
				   AND DPM.IS_CONFIRM_MATERIAL = 'Y'
				   AND ZIM.PROJECT_NO = #{PROJECT_NO}
			     <if test='PACKAGE_NO != null and PACKAGE_NO !=""'>
			       AND UPPER(DPD.PACKAGE_NO) LIKE '%' || UPPER(#{PACKAGE_NO}) || '%'
			     </if>
			     <if test='MRF_NO != null and MRF_NO !=""'>
			       AND UPPER(DMH.MRF_NO) LIKE '%' || UPPER(#{MRF_NO}) || '%'
			     </if>
			     <if test='MATERIAL_CODE != null and MATERIAL_CODE !=""'>
			       AND UPPER(DML.MATERIAL_CODE) LIKE '%' || UPPER(#{MATERIAL_CODE}) || '%'
			     </if>
			     <if test='ATTRIBUTE10 != null and ATTRIBUTE10 !=""'>
			       AND ZIM.ATTRIBUTE10 = #{ATTRIBUTE10}
			     </if>
			     <if test='REQUEST_START_DATE != null and REQUEST_START_DATE !=""'>
			       AND DMH.RETURN_REQ_DATE >= TO_DATE(#{REQUEST_START_DATE}, 'YYYY/MM/DD')
			     </if>
			     <if test='REQUEST_END_DATE != null and REQUEST_END_DATE !=""'>
			       AND DMH.RETURN_REQ_DATE <![CDATA[ < ]]> TO_DATE(#{REQUEST_END_DATE}, 'YYYY/MM/DD') + 1
			     </if>
			     <if test='TYPE != null and TYPE !=""'>
					AND DPMGT.TYPE = #{TYPE}
				 </if>
				 <if test='CATEGORY != null and CATEGORY !=""'>
					AND UPPER(DPMGT.CATEGORY) LIKE '%' || UPPER(#{CATEGORY}) || '%'
				 </if>
			   ) DT
	     WHERE DT.RETURN_AVAILABLE_QTY > 0
		ORDER BY MATERIAL_CODE, MRF_HEADER_ID, MRF_LINE_ID
	</select>

	<select id="getDesmMrfLineReturnList" parameterType="java.util.Map" resultType="java.util.HashMap">
	    SELECT DML.MRF_LINE_ID,
	           DML.REQ_RETURN_QTY -
	           SUM(NVL(DMR.RETURN_QTY, 0)) OVER(PARTITION BY DML.MRF_LINE_ID ORDER BY DML.MRF_LINE_ID) AS RETURN_AVAILABLE_QTY
	      FROM DESM_MRF_LINE DML,
	           DESM_MRF_RETURN DMR
	     WHERE DML.MRF_LINE_ID = DMR.MRF_LINE_ID(+)
	       AND DML.MRF_LINE_ID = #{MRF_LINE_ID}
	</select>

	<insert id="saveDesmMrfReturnSave" parameterType="java.util.Map">
		INSERT INTO DESM_MRF_RETURN
		(MRF_HEADER_ID
		,MRF_LINE_ID
		,MRF_RETURN_ID
		,RETURN_QTY
		,RETURN_DATE
		,CREATED_BY
		,CREATION_DATE
		,LAST_UPDATED_BY
		,LAST_UPDATE_DATE)
		VALUES
		(#{MRF_HEADER_ID}
		,#{MRF_LINE_ID}
		,SEQ_DESM_MRF_RETURN.NEXTVAL
		,#{RETURN_QTY}
		,TO_DATE(#{RETURN_DATE}, 'YYYY/MM/DD')
		,#{USER_AD}
		,SYSDATE
		,#{USER_AD}
		,SYSDATE)
	</insert>

	<update id="saveDesmMrfReturnQtySave" parameterType="java.util.Map">
        MERGE INTO DESM_PACKING_DTL DPD
        USING (SELECT DPD.PROJECT_NO,
                      DPD.TRK_ITEM_NAME,
                      DPD.PACKAGE_NO,
                      DPD.MATERIAL_CODE,
                      SUM(CASE WHEN DML.RSI_OUTGOING_ID IS NOT NULL THEN NVL(DMR.RETURN_QTY, 0) ELSE 0 END) AS RETURN_QTY,
                      SUM(CASE WHEN DML.RSI_OUTGOING_ID IS NULL THEN NVL(DMR.RETURN_QTY, 0) ELSE 0 END) AS RSI_CANCEL_QTY
                 FROM DESM_PACKING_MST DPM,
                      DESM_PACKING_DTL DPD,
                      DESM_MRF_LINE DML,
                      DESM_MRF_RETURN DMR
                WHERE DPM.PROJECT_NO = DPD.PROJECT_NO
                  AND DPM.TRK_ITEM_NAME = DPD.TRK_ITEM_NAME
                  AND DPM.PACKAGE_NO = DPD.PACKAGE_NO
                  AND DPD.MATERIAL_CODE = DML.MATERIAL_CODE
                  AND DPM.IS_CONFIRM_MATERIAL = 'Y'
                  AND DML.MRF_LINE_ID = DMR.MRF_LINE_ID(+)
                  AND DML.MATERIAL_CODE = #{MATERIAL_CODE}
                  --AND DPM.PROJECT_NO = PROJECT_NO
               GROUP BY DPD.PROJECT_NO,
                        DPD.TRK_ITEM_NAME,
                        DPD.PACKAGE_NO,
                        DPD.MATERIAL_CODE) T
        ON (DPD.PROJECT_NO = T.PROJECT_NO AND DPD.TRK_ITEM_NAME = T.TRK_ITEM_NAME AND DPD.PACKAGE_NO = T.PACKAGE_NO AND DPD.MATERIAL_CODE = T.MATERIAL_CODE)
        WHEN MATCHED THEN
             UPDATE SET DPD.RETURN_QTY = T.RETURN_QTY,
             			DPD.RSI_CANCEL_QTY = T.RSI_CANCEL_QTY
	</update>

	<update id="saveDesmMrfReturnQtyCloseSave" parameterType="java.util.Map">
	        MERGE INTO DESM_MRF_HEADER DMH
	        USING ( SELECT MRF_HEADER_ID,
	                 CASE WHEN SUM(REQ_RETURN_QTY - RETURN_QTY) <![CDATA[ <= ]]> 0 THEN 'CLOSED' ELSE 'OPEN' END AS CLOSED_CODE
	            FROM (SELECT DML.MRF_HEADER_ID,
	                         DML.MRF_LINE_ID,
	                         DML.REQ_RETURN_QTY,
	                         SUM(NVL(DMR.RETURN_QTY, 0)) AS RETURN_QTY
	                    FROM DESM_MRF_LINE DML_T,
	                         DESM_MRF_LINE DML,
	                         DESM_MRF_RETURN DMR
	                   WHERE DML_T.MRF_HEADER_ID = DML.MRF_HEADER_ID
	                     AND DML.MRF_LINE_ID = DMR.MRF_LINE_ID(+)
	                     AND DML_T.MRF_LINE_ID = #{MRF_LINE_ID}
	                  GROUP BY DML.MRF_HEADER_ID,
	                           DML.MRF_LINE_ID,
	                           DML.REQ_RETURN_QTY)
	          GROUP BY MRF_HEADER_ID) T
	        ON (DMH.MRF_HEADER_ID = T.MRF_HEADER_ID)
	        WHEN MATCHED THEN
	             UPDATE SET DMH.CLOSED_CODE = T.CLOSED_CODE
	</update>

	<select id="getDesmMrfLineReturnQtyList" parameterType="java.util.Map" resultType="java.util.HashMap">
		SELECT DML.MRF_HEADER_ID,
		       DML.MRF_LINE_ID,
		       DML.RSI_LINE_ID,
		       DML.MATERIAL_CODE,
		       DML.REQ_RETURN_QTY AS RETURN_QTY,
		       TO_CHAR(SYSDATE, 'YYYY/MM/DD') AS RETURN_DATE
		  FROM DESM_MRF_LINE DML
		 WHERE DML.MRF_HEADER_ID = #{MRF_HEADER_ID}
		   AND DML.RSI_OUTGOING_ID IS NULL
	</select>

	<select id="getDesmMrfReturnList" parameterType="java.util.Map" resultType="java.util.HashMap">
		SELECT DMH.MRF_NO,
		       DMH.MRF_NAME,
		       DRH.RSI_NAME,
		       TO_CHAR(DMH.RETURN_REQ_DATE, 'YYYY/MM/DD') AS RETURN_REQ_DATE,
		       DMH.SUBCONTRACTOR,
		       DML.MATERIAL_CODE,
   	       	   DPMGT.TYPE,
			   DPMGT.CATEGORY,DPMGT.SUB_CATEGORY,DPMGT.COMMENTS,DPMGT.FILE_GRP_CD, NVL((SELECT CASE WHEN COUNT(*) = 0 THEN NULL ELSE COUNT(*) END FROM ESAATTH ATT WHERE ATT.GRP_CD  = DPMGT.FILE_GRP_CD  AND ATT.STS != 'D'),0)  ATTH_CNT,
		       TO_CHAR(DMR.RETURN_DATE, 'YYYY/MM/DD') AS RETURN_DATE,
		       DPD.IN_QTY,
		       DRL.REQ_QTY,
		       DML.REQ_RETURN_QTY,
		       DMR.RETURN_QTY,
		       CASE WHEN DML.RSI_OUTGOING_ID IS NULL THEN 'RSI Cancel' ELSE 'Outgoing Return' END AS RETURN_TYPE,
		       DPD.PACKAGE_NO,
		       DPD.DRAWING_NO,
		       DPD.TAG_NO,
		       DMR.MRF_RETURN_ID,
		       DMR.MRF_HEADER_ID,
		       DMR.MRF_LINE_ID,
		       DRL.RSI_LINE_ID,
		       ROW_NUMBER() OVER(ORDER BY DML.MATERIAL_CODE, DMR.MRF_RETURN_ID DESC) AS RN
		  FROM DESM_MRF_RETURN DMR,
		       DESM_MRF_LINE DML,
		       DESM_MRF_HEADER DMH,
		       DESM_RSI_HEADER DRH,
		       DESM_RSI_LINE DRL,
		       DESM_PACKING_DTL DPD,
		       DESM_PACKING_MGT DPMGT,
		       DESM_PACKING_MST DPM,
		       ZVTS_ITEM_MASTER ZIM
		 WHERE DMR.MRF_LINE_ID = DML.MRF_LINE_ID
		   AND DML.MRF_HEADER_ID = DMH.MRF_HEADER_ID
		   AND DML.RSI_HEADER_ID = DRH.RSI_HEADER_ID
		   AND DML.RSI_LINE_ID = DRL.RSI_LINE_ID
		   AND DML.MATERIAL_CODE = DPD.MATERIAL_CODE
		   AND DPD.PROJECT_NO = DPM.PROJECT_NO
		   AND DPD.TRK_ITEM_NAME = DPM.TRK_ITEM_NAME
		   AND DPD.PACKAGE_NO = DPM.PACKAGE_NO
		   AND DPD.PROJECT_NO = DPMGT.PROJECT_NO(+)
		   AND DPD.MATERIAL_CODE = DPMGT.MATERIAL_CODE(+)
		   AND DPM.PROJECT_NO = ZIM.PROJECT_NO
		   AND DPM.TRK_ITEM_NAME = ZIM.TRK_ITEM_NAME
		   AND DPM.IS_CONFIRM_MATERIAL = 'Y'
		 <if test='PROJECT_NO != null and PROJECT_NO != ""'>
		   AND DPM.PROJECT_NO = #{PROJECT_NO}
		 </if>
		 <if test='PACKAGE_NO != null and PACKAGE_NO != ""'>
		   AND UPPER(DPD.PACKAGE_NO) LIKE '%' || UPPER(#{PACKAGE_NO}) || '%'
		 </if>
		 <if test='SUBCONTRACTOR != null and SUBCONTRACTOR != ""'>
		   AND UPPER(DMH.SUBCONTRACTOR) LIKE '%' || UPPER(#{SUBCONTRACTOR}) || '%'
		 </if>
		 <if test='MRF_NO != null and MRF_NO != ""'>
		   AND UPPER(DMH.MRF_NO) LIKE '%' || UPPER(#{MRF_NO}) || '%'
		 </if>
		 <if test='MRF_NAME != null and MRF_NAME != ""'>
		   AND UPPER(DMH.MRF_NAME) LIKE '%' || UPPER(#{MRF_NAME}) || '%'
		 </if>
		 <if test='MATERIAL_CODE != null and MATERIAL_CODE != ""'>
		   AND UPPER(DPD.MATERIAL_CODE) LIKE '%' || UPPER(#{MATERIAL_CODE}) || '%'
		 </if>
		 <if test='START_HANDOVER_DATE != null and START_HANDOVER_DATE != ""'>
		   AND DMR.RETURN_DATE >= TO_DATE(#{START_HANDOVER_DATE}, 'YYYY/MM/DD')
		 </if>
		 <if test='END_HANDOVER_DATE != null and END_HANDOVER_DATE != ""'>
		   AND DMR.RETURN_DATE <![CDATA[ < ]]> TO_DATE(#{END_HANDOVER_DATE}, 'YYYY/MM/DD') + 1
		 </if>
		 <if test='ATTRIBUTE10 != null and ATTRIBUTE10 != ""'>
		   AND ZIM.ATTRIBUTE10 = #{ATTRIBUTE10}
		 </if>
		 <if test='TYPE != null and TYPE !=""'>
			AND DPMGT.TYPE = #{TYPE}
		 </if>
		 <if test='CATEGORY != null and CATEGORY !=""'>
			AND UPPER(DPMGT.CATEGORY) LIKE '%' || UPPER(#{CATEGORY}) || '%'
		 </if>
	</select>

	<delete id="deleteDesmMrfReturn" parameterType="java.util.Map">
		DELETE FROM DESM_MRF_RETURN
		 WHERE MRF_RETURN_ID = #{MRF_RETURN_ID}
	</delete>

	<select id="getCheckMrfList" parameterType="java.util.Map" resultType="java.util.HashMap">
		SELECT DRO.RSI_OUTGOING_ID
		  FROM DESM_RSI_OUTGOING DRO,
		       DESM_MRF_LINE DML
		 WHERE DRO.RSI_LINE_ID = DML.RSI_LINE_ID
		   AND DRO.RSI_OUTGOING_ID = DML.RSI_OUTGOING_ID
		   AND DRO.RSI_OUTGOING_ID = #{RSI_OUTGOING_ID}
	</select>

	<delete id="deleteIdsmQrCodeList" parameterType="java.util.Map">
		DELETE FROM DESM_PACKING_QR_CODE
		 WHERE CREATED_BY = #{USER_AD}
	</delete>

	<insert id="saveIdsmQrCodeList" parameterType="java.util.Map">
		INSERT INTO DESM_PACKING_QR_CODE
		(PACKAGE_NO
		,PROJECT_NO
		,TRK_ITEM_NAME
	 <if test='MATERIAL_CODE != null and MATERIAL_CODE != ""'>
	    ,MATERIAL_CODE
	 </if>
		,CODE_TYPE
		,CREATED_BY
		,CREATION_DATE)
		VALUES
		(#{PACKAGE_NO}
		,#{PROJECT_NO}
		,#{TRK_ITEM_NAME}
	 <if test='MATERIAL_CODE != null and MATERIAL_CODE != ""'>
	    ,#{MATERIAL_CODE}
	 </if>
		,#{CODE_TYPE}
		,#{USER_AD}
		,SYSDATE)
	</insert>

	<select id="getMailMrfMstData" parameterType="java.util.Map" resultType="java.util.HashMap">
		SELECT DMH.MRF_NO,
		       DMH.MRF_NAME,
		       DMH.LAST_UPDATED_BY,
		       DMH.STATUS,
		       DMH.SUBCONTRACTOR,
		       DMH.REQUESTED_BY,
		       TO_CHAR(DMH.REQUEST_DATE, 'YYYY-MM-DD') AS REQUEST_DATE,
		       DMH.DESCRIPTION,
		       DMH.REMARK,
	           PPAI.SEGMENT1 AS PROJECT_NO,
	           PPAI.NAME AS PROJECT_NAME,
		       (SELECT COUNT(*) FROM DESM_MRF_LINE DML WHERE DML.MRF_HEADER_ID = DMH.MRF_HEADER_ID) AS COUNT_MRF_LINE
		  FROM DESM_MRF_HEADER DMH,
		       PA_PROJECTS_ALL_INT PPAI
		 WHERE DMH.PROJECT_NO = PPAI.SEGMENT1
		   AND DMH.MRF_HEADER_ID = #{MRF_HEADER_ID}
	</select>

	<select id="getMailMrfDtlData" parameterType="java.util.Map" resultType="java.util.HashMap">
		SELECT *
		  FROM (SELECT DPD.PACKAGE_LIST_NO,
		               DPD.PACKAGE_NO,
		               DPD.MATERIAL_CODE,
		               DPD.PACKAGE_TYPE,
		               DPD.UNIT,
		               DRH.RSI_NAME,
		               CASE WHEN DML.RSI_OUTGOING_ID IS NULL THEN 'RSI Cancel' ELSE 'Outgoing Return' END AS RETURN_TYPE,
		               DPD.IN_QTY,
		               DML.REQ_RETURN_QTY,
		               ROW_NUMBER() OVER(ORDER BY DML.MRF_LINE_ID) AS NO
		          FROM ZVTS_ITEM_MASTER ZIM,
		               DESM_PACKING_MST DPM,
		               DESM_PACKING_DTL DPD,
		               DESM_MRF_LINE DML,
		               DESM_RSI_LINE DRL,
		               DESM_RSI_HEADER DRH
		         WHERE ZIM.PROJECT_NO = DPM.PROJECT_NO
		           AND ZIM.TRK_ITEM_NAME = DPM.TRK_ITEM_NAME
		           AND DPM.PROJECT_NO = DPD.PROJECT_NO
		           AND DPM.TRK_ITEM_NAME = DPD.TRK_ITEM_NAME
		           AND DPM.PACKAGE_NO = DPD.PACKAGE_NO
		           AND DPD.MATERIAL_CODE = DML.MATERIAL_CODE
		           AND DML.RSI_LINE_ID = DRL.RSI_LINE_ID
		           AND DRL.RSI_HEADER_ID = DRH.RSI_HEADER_ID
		           AND DPM.IS_CONFIRM_MATERIAL = 'Y'
		           AND DML.MRF_HEADER_ID = #{MRF_HEADER_ID})
		 WHERE NO <![CDATA[ <= ]]> 10
	</select>

	<select id="getMailMrfReceiver" parameterType="java.util.Map" resultType="java.util.HashMap">
		SELECT DISTINCT
		       DU.USER_AD,
		       NVL(DU.MAIL, ZE.ZEMAIL) AS EMAIL
		  FROM DESM_USER DU,
		       ZVTS_EMP ZE,
		       (SELECT DISTINCT
		               CASE WHEN STD.LV = 2 AND CHC_BY_STD.ROLE_SEQ IS NOT NULL THEN CHC_BY_STD.USER_AD
		                    WHEN STD.LV = 2 AND CHC_BY_STD.ROLE_SEQ IS NULL THEN STD.USER_AD
		                    WHEN STD.LV = 3 AND CON_BY_STD.USER_AD IS NOT NULL THEN CON_BY_STD.USER_AD
		                    WHEN STD.LV = 3 AND CON_BY_STD.USER_AD IS NULL THEN STD.USER_AD
		                    WHEN STD.LV = 1 AND STD.STATUS != 'Rejected' AND REQ_BY_STD.USER_AD IS NOT NULL THEN REQ_BY_STD.USER_AD
		                    WHEN STD.LV = 1 AND STD.STATUS != 'Rejected' AND REQ_BY_STD.USER_AD IS NULL THEN STD.USER_AD
		                    ELSE STD.USER_AD END AS USER_AD
		          FROM (SELECT TD.USER_AD,
		                       TD.LV,
		                       TD.STATUS,
		                       CASE WHEN DR.ROLE_SEQ IS NOT NULL THEN DR.ROLE_SEQ END AS ROLE_SEQ
		                  FROM (SELECT *
		                          FROM (SELECT CASE WHEN LV.LV = 1 THEN DMH.REQUESTED_BY
		                                            WHEN LV.LV = 2 THEN DMH.CHECKED_BY
		                                            WHEN LV.LV = 3 THEN DMH.CONFIRMED_BY
		                                            WHEN LV.LV = 4 THEN DMH.APPROVED_BY
		                                       END AS USER_AD,
		                                       DMH.STATUS,
		                                       LV.LV
		                                  FROM DESM_MRF_HEADER DMH,
		                                       (SELECT LEVEL AS LV FROM DUAL CONNECT BY LEVEL <![CDATA[ < ]]> 5) LV
		                                 WHERE DMH.MRF_HEADER_ID = #{MRF_HEADER_ID})
		                         WHERE ((STATUS = 'Pre-Checked' AND LV = 2) OR
		                                (STATUS = 'Pre-Confirmed' AND LV = 3) OR
		                                (STATUS = 'Pre-Approved' AND LV = 4) OR
		                                (STATUS = 'Approved' AND LV = 1) OR
		                                (STATUS = 'Rejected' AND ((#{STATUS} = 'Pre-Checked' AND LV <![CDATA[ < ]]> 2) OR
		                                                          (#{STATUS} = 'Pre-Confirmed' AND LV <![CDATA[ < ]]> 3) OR
		                                                          (#{STATUS} = 'Pre-Approved' AND LV <![CDATA[ < ]]> 4))))) TD,
		                       DESM_USER_ROLE DUR,
		                       DESM_ROLE DR
		                 WHERE TD.USER_AD = DUR.USER_AD
		                   AND DUR.ROLE_SEQ = DR.ROLE_SEQ(+)
		                   AND DR.SITE_YN(+) = 'Y') STD,
		               (SELECT DUR.ROLE_SEQ,
		                       DUR.USER_AD,
		                       2 AS LV
		                  FROM DESM_USER_ROLE DUR,
		                       DESM_ROLE DR,
		                       DESM_USER_PROJECT_ALL DUPA,
                               DESM_USER_PROJECT DUP
		                 WHERE DUR.ROLE_SEQ = DR.ROLE_SEQ
		                   AND DUR.USER_AD = DUPA.USER_AD(+)
                           AND DUR.USER_AD = DUP.USER_AD(+)
                           AND (DUPA.USER_AD IS NOT NULL OR DUP.PROJECT_CODE = (SELECT A.PROJECT_NO FROM DESM_MRF_HEADER A WHERE A.MRF_HEADER_ID = #{MRF_HEADER_ID}))
		                   AND DR.SITE_YN ='Y') CHC_BY_STD,
		               (SELECT '' AS USER_AD,
		                       3 AS LV
		                  FROM DUAL
		                UNION
		                SELECT DUR.USER_AD,
		                       3 AS LV
		                  FROM DESM_USER_ROLE DUR,
		                       DESM_USER_PROJECT_ALL DUPA,
                               DESM_USER_PROJECT DUP
		                 WHERE DUR.USER_AD = DUPA.USER_AD(+)
                           AND DUR.USER_AD = DUP.USER_AD(+)
                           AND (DUPA.USER_AD IS NOT NULL OR DUP.PROJECT_CODE = (SELECT A.PROJECT_NO FROM DESM_MRF_HEADER A WHERE A.MRF_HEADER_ID = #{MRF_HEADER_ID}))
		                   AND DUR.ROLE_SEQ = 109) CON_BY_STD,
		               (SELECT '' AS USER_AD,
		                       1 AS LV
		                  FROM DUAL
		                UNION
		                SELECT DUR.USER_AD,
		                       1 AS LV
		                  FROM DESM_USER_ROLE DUR,
		                  	   DESM_USER_PROJECT_ALL DUPA,
                               DESM_USER_PROJECT DUP
		                 WHERE DUR.USER_AD = DUPA.USER_AD(+)
                           AND DUR.USER_AD = DUP.USER_AD(+)
                           AND (DUPA.USER_AD IS NOT NULL OR DUP.PROJECT_CODE = (SELECT A.PROJECT_NO FROM DESM_MRF_HEADER A WHERE A.MRF_HEADER_ID = #{MRF_HEADER_ID}))
		                   AND DUR.ROLE_SEQ = 191) REQ_BY_STD
		         WHERE STD.ROLE_SEQ = CHC_BY_STD.ROLE_SEQ(+)
		           AND STD.LV = CHC_BY_STD.LV(+)
		           AND STD.LV = CON_BY_STD.LV(+)
		           AND STD.LV = REQ_BY_STD.LV(+)) USR
		 WHERE DU.USER_AD = USR.USER_AD
		   AND DU.USER_AD = ZE.AD_USER_ID(+)
		   AND ZE.ZSTATUS_TYPE(+) = '재직'
		   AND (DU.MAIL IS NOT NULL OR ZE.ZEMAIL IS NOT NULL)
	</select>

	<update id="saveDesmMapCreation" parameterType="java.util.Map">
		MERGE INTO DESM_MAP_MST A
		USING DUAL
		ON (A.MAP_MST_ID = #{MAP_MST_ID})
		WHEN MATCHED THEN
		     UPDATE SET
		     A.MAP_NAME = #{MAP_NAME},
		     A.MAP_PATH = #{MAP_PATH},
		     A.LAST_UPDATE_DATE = SYSDATE,
		     A.LAST_UPDATED_BY = #{USER_AD}
		WHEN NOT MATCHED THEN
		     INSERT
		     (A.MAP_MST_ID
		     ,A.MAP_NAME
		     ,A.MAP_PATH
		     ,A.PROJECT_NO
		     ,A.LAST_UPDATE_DATE
		     ,A.LAST_UPDATED_BY
		     ,A.CREATION_DATE
		     ,A.CREATED_BY)
		     VALUES
		     (SEQ_DESM_MAP_MST.NEXTVAL
		     ,#{MAP_NAME}
		     ,#{MAP_PATH}
		     ,#{PROJECT_NO}
		     ,SYSDATE
		     ,#{USER_AD}
		     ,SYSDATE
		     ,#{USER_AD})
	</update>

	<select id="getDesmMapCreationList" parameterType="java.util.Map" resultType="java.util.HashMap">
		SELECT A.MAP_MST_ID,
		       A.MAP_NAME,
		       A.MAP_PATH,
		       A.PROJECT_NO
		  FROM DESM_MAP_MST A
		 WHERE A.PROJECT_NO = #{PROJECT_NO}
		   AND A.DELETE_FLAG = 'N'
		 <if test='MAP_MST_ID != null and MAP_MST_ID != ""'>
		   AND A.MAP_MST_ID = #{MAP_MST_ID}
		 </if>
		ORDER BY A.MAP_MST_ID
	</select>

	<update id="deleteDesmMapCreation" parameterType="java.util.Map">
		UPDATE DESM_MAP_MST A
		   SET A.DELETE_FLAG = 'Y',
		       A.LAST_UPDATE_DATE = SYSDATE,
		       A.LAST_UPDATED_BY = #{USER_AD}
         WHERE A.MAP_MST_ID = #{MAP_MST_ID}
	</update>

	<select id="getDesmMapMstInfoList" parameterType="java.util.Map" resultType="java.util.HashMap">
		SELECT A.MAP_MST_ID,
		       A.MAP_NAME,
		       A.MAP_PATH,
		       A.PROJECT_NO
		  FROM DESM_MAP_MST A
		 WHERE A.MAP_MST_ID = #{MAP_MST_ID}
		   AND A.DELETE_FLAG = 'N'
		ORDER BY A.MAP_MST_ID
	</select>

	<select id="getDesmMapDtlInfoList" parameterType="java.util.Map" resultType="java.util.HashMap">
		SELECT A.MAP_DTL_ID,
		       A.MAP_MST_ID,
		       A.MAP_NAME,
		       A.MAP_TYPE,
		       A.MAP_POSITION
		  FROM DESM_MAP_DTL A
		 WHERE A.MAP_MST_ID = #{MAP_MST_ID}
		   AND A.DELETE_FLAG = 'N'
		ORDER BY A.MAP_DTL_ID
	</select>

	<insert id="saveDesmMapAreaCreation" parameterType="java.util.Map">
		INSERT INTO DESM_MAP_DTL
		(MAP_DTL_ID
		,MAP_MST_ID
		,MAP_NAME
		,MAP_TYPE
		,MAP_POSITION
		,CREATED_BY
		,CREATION_DATE
		,LAST_UPDATED_BY
		,LAST_UPDATE_DATE)
		VALUES
		(SEQ_DESM_MAP_DTL.NEXTVAL
		,#{MAP_MST_ID}
		,#{MAP_NAME}
		,#{MAP_TYPE}
		,#{MAP_POSITION}
		,#{USER_AD}
		,SYSDATE
		,#{USER_AD}
		,SYSDATE)
	</insert>

	<update id="deleteDesmMapAreaCreation" parameterType="java.util.Map">
		UPDATE DESM_MAP_DTL
		   SET DELETE_FLAG = 'Y',
		   	   LAST_UPDATED_BY = #{USER_AD},
		   	   LAST_UPDATE_DATE = SYSDATE
		 WHERE MAP_DTL_ID = #{MAP_DTL_ID}
	</update>

	<update id="saveDesmLocation" parameterType="java.util.Map">
		MERGE INTO DESM_MAP_LOCATION A
		USING DUAL
		ON (A.PROJECT_NO = #{PROJECT_NO}
		    AND A.TRK_ITEM_NAME = #{TRK_ITEM_NAME}
		    <if test='CODE_TYPE == "SUMMARY"'>
		    AND A.PACKAGE_NO = #{PACKAGE_NO}
		    </if>
		    <if test='CODE_TYPE == "DETAIL"'>
		    AND A.MATERIAL_CODE = #{MATERIAL_CODE}
		    </if>
		    )
		WHEN MATCHED THEN
		     UPDATE SET A.MAP_MST_ID = #{MAP_MST_ID},
		                A.MAP_DTL_ID = #{MAP_DTL_ID},
		                A.LAST_UPDATED_BY = #{USER_AD},
		                A.LAST_UPDATE_DATE = SYSDATE
		WHEN NOT MATCHED THEN
		     INSERT
		     (A.LOCATION_ID
		     ,A.MAP_MST_ID
		     ,A.MAP_DTL_ID
		     ,A.PROJECT_NO
		     ,A.TRK_ITEM_NAME
		     <if test='CODE_TYPE == "SUMMARY"'>
		     ,A.PACKAGE_NO
		     </if>
		     <if test='CODE_TYPE == "DETAIL"'>
		     ,A.MATERIAL_CODE
		     </if>
		     ,A.CODE_TYPE
		     ,A.CREATED_BY
		     ,A.CREATION_DATE
		     ,A.LAST_UPDATED_BY
		     ,A.LAST_UPDATE_DATE)
		     VALUES
		     (SEQ_DESM_MAP_LOCATION.NEXTVAL
		     ,#{MAP_MST_ID}
		     ,#{MAP_DTL_ID}
		     ,#{PROJECT_NO}
		     ,#{TRK_ITEM_NAME}
		     <if test='CODE_TYPE == "SUMMARY"'>
		     ,#{PACKAGE_NO}
		     </if>
		     <if test='CODE_TYPE == "DETAIL"'>
		     ,#{MATERIAL_CODE}
		     </if>
		     ,#{CODE_TYPE}
		     ,#{USER_AD}
		     ,SYSDATE
		     ,#{USER_AD}
		     ,SYSDATE)
	</update>

	<select id="getDesmDesmMapLocationSummaryList" parameterType="java.util.Map" resultType="java.util.HashMap">
		SELECT DPM.PACKAGE_NO,
		       DPM.PACKAGE_LIST_NO,
		       DPM.DESCRIPTION,
		       DPM.PACKAGE_TYPE,
		       TO_CHAR(DPM.L_CM, 'FM999,999,999,999,999') AS L_CM,
		       TO_CHAR(DPM.W_CM, 'FM999,999,999,999,999') AS W_CM,
		       TO_CHAR(DPM.H_CM, 'FM999,999,999,999,999') AS H_CM,
		       TO_CHAR(DPM.RT, 'FM999,999,999,999,990.0') AS RT,
		       TO_CHAR(DPM.VOLUME, 'FM999,999,999,999,990.0') AS VOLUME,
		       TO_CHAR(DPM.NET, 'FM999,999,999,999,990.0') AS NET,
		       TO_CHAR(DPM.GROSS, 'FM999,999,999,999,990.0') AS GROSS,
		       DPM.TRK_ITEM_NAME,
		       DPM.PROJECT_NO
		  FROM DESM_MAP_LOCATION DML,
		       DESM_PACKING_MST DPM
		 WHERE DML.PROJECT_NO = DPM.PROJECT_NO
		   AND DML.TRK_ITEM_NAME = DPM.TRK_ITEM_NAME
		   AND DML.PACKAGE_NO = DPM.PACKAGE_NO
		   AND DML.MAP_DTL_ID = #{MAP_DTL_ID}
		   AND DML.CODE_TYPE = 'SUMMARY'
		ORDER BY DPM.PACKAGE_NO
	</select>

	<select id="getDesmDesmMapLocationDetailList" parameterType="java.util.Map" resultType="java.util.HashMap">
		SELECT DPD.PACKAGE_LIST_NO,
		       DPD.PACKAGE_NO,
		       DPD.DESCRIPTION,
		       DPD.DRAWING_NO,
		       DPD.TAG_NO,
		       DPD.MATERIAL,
		       DPD.MATERIAL_CODE,
		       DPD.PACKAGE_TYPE,
		       DPD.TRK_ITEM_NAME,
		       DPD.PROJECT_NO,
		       DPD.LOCATION,
		       TO_CHAR(DPD.GROSS, 'FM999,999,999,999,990.0') AS GROSS,
		       TO_CHAR(DPD.NET, 'FM999,999,999,999,990.0') AS NET,
		       TO_CHAR(DPD.RT, 'FM999,999,999,999,990.0') AS RT,
		       TO_CHAR(DPD.L_CM, 'FM999,999,999,999,999') AS L_CM,
		       TO_CHAR(DPD.W_CM, 'FM999,999,999,999,999') AS W_CM,
		       TO_CHAR(DPD.H_CM, 'FM999,999,999,999,999') AS H_CM,
		       TO_CHAR(DPD.VOLUME, 'FM999,999,999,999,990.0') AS VOLUME,
		       DPD.UNIT,
		       TO_CHAR(DPD.NOS, 'FM999,999,999,999,999') AS NOS
		  FROM DESM_MAP_LOCATION DML,
		       DESM_PACKING_DTL DPD
		 WHERE DML.PROJECT_NO = DPD.PROJECT_NO
		   AND DML.TRK_ITEM_NAME = DPD.TRK_ITEM_NAME
		   AND DML.MATERIAL_CODE = DPD.MATERIAL_CODE
		   AND DML.MAP_DTL_ID = #{MAP_DTL_ID}
		   AND DML.CODE_TYPE = 'DETAIL'
		ORDER BY DPD.MATERIAL_CODE,
		         DPD.PACKAGE_LIST_NO,
		         DPD.PACKAGE_NO,
		         DPD.DRAWING_NO,
		         DPD.TAG_NO
	</select>

	<update id="saveDesmLocationSummary" parameterType="java.util.Map">
		MERGE INTO DESM_PACKING_MST DPM
		USING (SELECT DML.CODE_TYPE,
		              DML.PROJECT_NO,
		              DML.TRK_ITEM_NAME,
		              DML.PACKAGE_NO,
		              DML.MATERIAL_CODE,
		              DMM.MAP_NAME || ' - ' || DMD.MAP_NAME AS LC
		         FROM DESM_MAP_LOCATION DML,
		              DESM_MAP_DTL DMD,
		              DESM_MAP_MST DMM
		        WHERE DML.MAP_DTL_ID = DMD.MAP_DTL_ID
		          AND DMD.MAP_MST_ID = DMM.MAP_MST_ID
		          AND DML.CODE_TYPE = 'SUMMARY'
		          AND DML.PROJECT_NO = #{PROJECT_NO}
		          AND DML.TRK_ITEM_NAME = #{TRK_ITEM_NAME}
		          AND DML.PACKAGE_NO = #{PACKAGE_NO}) L
		ON (DPM.PROJECT_NO = L.PROJECT_NO AND
		    DPM.TRK_ITEM_NAME = L.TRK_ITEM_NAME AND
		    DPM.PACKAGE_NO = L.PACKAGE_NO)
		WHEN MATCHED THEN
		     UPDATE
		        SET DPM.STORAGE_LOCATION = L.LC
		        ,DPM.LOC_UPDATE_DATE = SYSDATE
				,DPM.LOC_UPDATED_BY = #{USER_AD}
	</update>

	<select id="saveDesmLocationSummaryDetailCheck"  parameterType="java.util.Map" resultType="java.util.HashMap">
		SELECT * FROM DESM_PACKING_DTL
		WHERE PACKAGE_NO = #{PACKAGE_NO}
		AND PROJECT_NO = #{PROJECT_NO}
		AND TRK_ITEM_NAME = #{TRK_ITEM_NAME}
		AND (NVL(IN_QTY, 0) - NVL(OUT_QTY, 0) + NVL(RETURN_QTY, 0)) != 0
	</select>

	<update id="saveDesmLocationSummaryDetail" parameterType="java.util.Map">
		MERGE INTO DESM_PACKING_DTL DPD
		USING (SELECT DML.CODE_TYPE,
		              DML.PROJECT_NO,
		              DML.TRK_ITEM_NAME,
		              DML.PACKAGE_NO,
		              DML.MATERIAL_CODE,
		              DMM.MAP_NAME || ' - ' || DMD.MAP_NAME AS LC
		         FROM DESM_MAP_LOCATION DML,
		              DESM_MAP_DTL DMD,
		              DESM_MAP_MST DMM
		        WHERE DML.MAP_DTL_ID = DMD.MAP_DTL_ID
		          AND DMD.MAP_MST_ID = DMM.MAP_MST_ID
		          AND DML.CODE_TYPE = 'SUMMARY'
		          AND DML.PROJECT_NO = #{PROJECT_NO}
		          AND DML.TRK_ITEM_NAME = #{TRK_ITEM_NAME}
		          AND DML.PACKAGE_NO = #{PACKAGE_NO}) L
		ON (DPD.PROJECT_NO = L.PROJECT_NO AND
		    DPD.TRK_ITEM_NAME = L.TRK_ITEM_NAME AND
		    DPD.PACKAGE_NO = L.PACKAGE_NO AND
		    (NVL(DPD.IN_QTY, 0) - NVL(DPD.OUT_QTY, 0) + NVL(DPD.RETURN_QTY, 0)) != 0
		    )
		WHEN MATCHED THEN
		     UPDATE
		        SET DPD.LOCATION = L.LC
		        ,DPD.LOC_UPDATE_DATE = SYSDATE
				,DPD.LOC_UPDATED_BY = #{USER_AD}

	</update>

	<update id="saveDesmLocationDetail" parameterType="java.util.Map">
		MERGE INTO DESM_PACKING_DTL DPD
		USING (SELECT DML.CODE_TYPE,
		              DML.PROJECT_NO,
		              DML.TRK_ITEM_NAME,
		              DML.PACKAGE_NO,
		              DML.MATERIAL_CODE,
		              DMM.MAP_NAME || ' - ' || DMD.MAP_NAME AS LC
		         FROM DESM_MAP_LOCATION DML,
		              DESM_MAP_DTL DMD,
		              DESM_MAP_MST DMM
		        WHERE DML.MAP_DTL_ID = DMD.MAP_DTL_ID
		          AND DMD.MAP_MST_ID = DMM.MAP_MST_ID
		          AND DML.CODE_TYPE = 'DETAIL'
		          AND DML.PROJECT_NO = #{PROJECT_NO}
		          AND DML.TRK_ITEM_NAME = #{TRK_ITEM_NAME}
		          AND DML.MATERIAL_CODE = #{MATERIAL_CODE}) L
		ON (DPD.PROJECT_NO = L.PROJECT_NO AND
		    DPD.TRK_ITEM_NAME = L.TRK_ITEM_NAME AND
		    DPD.MATERIAL_CODE = L.MATERIAL_CODE AND
		    (NVL(DPD.IN_QTY, 0) - NVL(DPD.OUT_QTY, 0) + NVL(DPD.RETURN_QTY, 0)) != 0)
		WHEN MATCHED THEN
		     UPDATE
		        SET DPD.LOCATION = L.LC
		        ,DPD.LOC_UPDATE_DATE = SYSDATE
				,DPD.LOC_UPDATED_BY = #{USER_AD}
	</update>

	<select id="getDesmLocationCheckDetail" parameterType="java.util.Map" resultType="java.util.HashMap">
		 SELECT DPD.LOCATION
		  FROM DESM_PACKING_MST DPM,
		       DESM_PACKING_DTL DPD
		 WHERE DPM.PROJECT_NO = DPD.PROJECT_NO
		   AND DPM.TRK_ITEM_NAME = DPD.TRK_ITEM_NAME
		   AND DPM.PACKAGE_NO = DPD.PACKAGE_NO
		   AND DPM.PROJECT_NO = #{PROJECT_NO}
		   AND DPM.TRK_ITEM_NAME = #{TRK_ITEM_NAME}
		   AND DPM.PACKAGE_NO = #{PACKAGE_NO}
	</select>

	<select id="getDesmMapSearchSummaryMstInfoList" parameterType="java.util.Map" resultType="java.util.HashMap">
		SELECT DMM.MAP_PATH,
			   DML.MAP_MST_ID
		  FROM DESM_MAP_LOCATION DML,
		       DESM_MAP_MST DMM
		 WHERE DML.MAP_MST_ID = DMM.MAP_MST_ID
		   AND DMM.DELETE_FLAG = 'N'
		   AND DML.CODE_TYPE = #{CODE_TYPE}
		   AND DML.PROJECT_NO = #{PROJECT_NO}
		   <if test='TRK_ITEM_NAME != null and TRK_ITEM_NAME != ""'>
		   AND DML.TRK_ITEM_NAME = #{TRK_ITEM_NAME}
		   </if>
		   AND DML.PACKAGE_NO = #{PACKAGE_NO}
	</select>

	<select id="getDesmMapSearchSummaryDtlInfoList" parameterType="java.util.Map" resultType="java.util.HashMap">
		SELECT DMD.MAP_DTL_ID,
		       DMD.MAP_MST_ID,
		       DMD.MAP_TYPE,
		       DMD.MAP_POSITION
		  FROM DESM_MAP_LOCATION DML,
		       DESM_MAP_DTL DMD
		 WHERE DML.MAP_DTL_ID = DMD.MAP_DTL_ID
		   AND DMD.DELETE_FLAG = 'N'
		   AND DML.CODE_TYPE = #{CODE_TYPE}
		   AND DML.PROJECT_NO = #{PROJECT_NO}
		   <if test='TRK_ITEM_NAME != null and TRK_ITEM_NAME != ""'>
		   AND DML.TRK_ITEM_NAME = #{TRK_ITEM_NAME}
		   </if>
		   AND DML.PACKAGE_NO = #{PACKAGE_NO}
	</select>

	<select id="getDesmMapSearchDetailMstInfoList" parameterType="java.util.Map" resultType="java.util.HashMap">
		SELECT CASE WHEN D_DML.LOCATION_ID IS NOT NULL THEN D_DMM.MAP_PATH ELSE S_DMM.MAP_PATH END AS MAP_PATH,
			   CASE WHEN D_DML.LOCATION_ID IS NOT NULL THEN D_DMM.MAP_MST_ID ELSE S_DMM.MAP_MST_ID END AS MAP_MST_ID
		  FROM DESM_PACKING_DTL DPD,
		       DESM_MAP_LOCATION S_DML,
		       DESM_MAP_LOCATION D_DML,
		       DESM_MAP_MST S_DMM,
		       DESM_MAP_MST D_DMM
		 WHERE DPD.PROJECT_NO = S_DML.PROJECT_NO(+)
		   AND DPD.TRK_ITEM_NAME = S_DML.TRK_ITEM_NAME(+)
		   AND DPD.PACKAGE_NO = S_DML.PACKAGE_NO(+)
		   AND DPD.PROJECT_NO = D_DML.PROJECT_NO(+)
		   AND DPD.TRK_ITEM_NAME = D_DML.TRK_ITEM_NAME(+)
		   AND DPD.MATERIAL_CODE = D_DML.MATERIAL_CODE(+)
		   AND S_DML.MAP_MST_ID = S_DMM.MAP_MST_ID(+)
		   AND D_DML.MAP_MST_ID = D_DMM.MAP_MST_ID(+)
		   AND S_DML.CODE_TYPE(+) = 'SUMMARY'
		   AND D_DML.CODE_TYPE(+) = 'DETAIL'
		   AND DPD.PROJECT_NO = #{PROJECT_NO}
		   <if test='TRK_ITEM_NAME != null and TRK_ITEM_NAME != ""'>
		   AND DPD.TRK_ITEM_NAME =  #{TRK_ITEM_NAME}
		   </if>
		   AND DPD.MATERIAL_CODE = #{MATERIAL_CODE}
	</select>

	<select id="getDesmMapSearchDetailDtlInfoList" parameterType="java.util.Map" resultType="java.util.HashMap">
		SELECT CASE WHEN D_DML.LOCATION_ID IS NOT NULL THEN D_DMD.MAP_TYPE ELSE S_DMD.MAP_TYPE END AS MAP_TYPE,
		       CASE WHEN D_DML.LOCATION_ID IS NOT NULL THEN D_DMD.MAP_POSITION ELSE S_DMD.MAP_POSITION END AS MAP_POSITION,
		       CASE WHEN D_DML.LOCATION_ID IS NOT NULL THEN D_DMD.MAP_DTL_ID ELSE S_DMD.MAP_DTL_ID END AS MAP_DTL_ID
		  FROM DESM_PACKING_DTL DPD,
		       DESM_MAP_LOCATION S_DML,
		       DESM_MAP_LOCATION D_DML,
		       DESM_MAP_DTL S_DMD,
		       DESM_MAP_DTL D_DMD
		 WHERE DPD.PROJECT_NO = S_DML.PROJECT_NO(+)
		   AND DPD.TRK_ITEM_NAME = S_DML.TRK_ITEM_NAME(+)
		   AND DPD.PACKAGE_NO = S_DML.PACKAGE_NO(+)
		   AND DPD.PROJECT_NO = D_DML.PROJECT_NO(+)
		   AND DPD.TRK_ITEM_NAME = D_DML.TRK_ITEM_NAME(+)
		   AND DPD.MATERIAL_CODE = D_DML.MATERIAL_CODE(+)
		   AND S_DML.MAP_DTL_ID = S_DMD.MAP_DTL_ID(+)
		   AND D_DML.MAP_DTL_ID = D_DMD.MAP_DTL_ID(+)
		   AND S_DML.CODE_TYPE(+) = 'SUMMARY'
		   AND D_DML.CODE_TYPE(+) = 'DETAIL'
		   AND DPD.PROJECT_NO = #{PROJECT_NO}
		   <if test='TRK_ITEM_NAME != null and TRK_ITEM_NAME != ""'>
		   AND DPD.TRK_ITEM_NAME =  #{TRK_ITEM_NAME}
		   </if>
		   AND DPD.MATERIAL_CODE = #{MATERIAL_CODE}
	</select>

	<delete id="deleteDesmLocationSummary" parameterType="java.util.Map">
		 DELETE
		  FROM DESM_MAP_LOCATION DML
		 WHERE DML.CODE_TYPE = 'SUMMARY'
		   AND DML.PROJECT_NO = #{PROJECT_NO}
		   AND DML.TRK_ITEM_NAME = #{TRK_ITEM_NAME}
		   AND DML.PACKAGE_NO = #{PACKAGE_NO}
	</delete>

	<update id="updateDesmLocationSummary" parameterType="java.util.Map">
		UPDATE DESM_PACKING_MST DPM
		   SET DPM.STORAGE_LOCATION = ''
		   ,DPM.LOC_UPDATE_DATE = SYSDATE
		   ,DPM.LOC_UPDATED_BY = #{USER_AD}
		 WHERE DPM.PROJECT_NO = #{PROJECT_NO}
		   AND DPM.TRK_ITEM_NAME = #{TRK_ITEM_NAME}
		   AND DPM.PACKAGE_NO = #{PACKAGE_NO}
	</update>

	<delete id="deleteDesmLocationDetail" parameterType="java.util.Map">
		 DELETE
		  FROM DESM_MAP_LOCATION DML
		 WHERE DML.CODE_TYPE = 'DETAIL'
		   AND DML.PROJECT_NO = #{PROJECT_NO}
		   AND DML.TRK_ITEM_NAME = #{TRK_ITEM_NAME}
		   AND DML.MATERIAL_CODE = #{MATERIAL_CODE}
	</delete>

	<update id="updateDesmLocationDetail" parameterType="java.util.Map">
	    UPDATE DESM_PACKING_DTL DPD
	       SET DPD.LOCATION = ''
	       ,DPD.LOC_UPDATE_DATE = SYSDATE
		   ,DPD.LOC_UPDATED_BY = #{USER_AD}
	     WHERE DPD.PROJECT_NO = #{PROJECT_NO}
	       AND DPD.TRK_ITEM_NAME = #{TRK_ITEM_NAME}
	       AND DPD.MATERIAL_CODE = #{MATERIAL_CODE}
	</update>

	<select id="getDesmDesmMapLocationDataList" parameterType="java.util.Map" resultType="java.util.HashMap">
		SELECT DPD.PACKAGE_LIST_NO,
		       DPD.PACKAGE_NO,
		       DPD.DESCRIPTION,
		       DPD.DRAWING_NO,
		       DPD.TAG_NO,
		       DPD.MATERIAL,
		       DPD.MATERIAL_CODE,
		       DPD.PACKAGE_TYPE,
		       DPD.TRK_ITEM_NAME,
		       DPD.PROJECT_NO,
		       DPD.LOCATION,
		       DPMGT.TYPE,
			   DPMGT.CATEGORY,DPMGT.SUB_CATEGORY,DPMGT.COMMENTS,DPMGT.FILE_GRP_CD, NVL((SELECT CASE WHEN COUNT(*) = 0 THEN NULL ELSE COUNT(*) END FROM ESAATTH ATT WHERE ATT.GRP_CD  = DPMGT.FILE_GRP_CD  AND ATT.STS != 'D'),0)  ATTH_CNT,
		       TO_CHAR(DPD.GROSS, 'FM999,999,999,999,990.0') AS GROSS,
		       TO_CHAR(DPD.NET, 'FM999,999,999,999,990.0') AS NET,
		       TO_CHAR(DPD.RT, 'FM999,999,999,999,990.0') AS RT,
		       TO_CHAR(DPD.L_CM, 'FM999,999,999,999,999') AS L_CM,
		       TO_CHAR(DPD.W_CM, 'FM999,999,999,999,999') AS W_CM,
		       TO_CHAR(DPD.H_CM, 'FM999,999,999,999,999') AS H_CM,
		       TO_CHAR(DPD.VOLUME, 'FM999,999,999,999,990.0') AS VOLUME,
		       DPD.UNIT,
		       TO_CHAR(DPD.NOS, 'FM999,999,999,999,999') AS NOS
		  FROM DESM_PACKING_MST DPM,
		       DESM_PACKING_DTL DPD,
		       DESM_PACKING_MGT DPMGT,
		       DESM_MAP_LOCATION DML_S,
		       DESM_MAP_LOCATION DML_D
		 WHERE DPM.PROJECT_NO = DPD.PROJECT_NO
		   AND DPM.TRK_ITEM_NAME = DPD.TRK_ITEM_NAME
		   AND DPM.PACKAGE_NO = DPD.PACKAGE_NO
		   AND DPM.PROJECT_NO = DML_S.PROJECT_NO(+)
		   AND DPM.TRK_ITEM_NAME = DML_S.TRK_ITEM_NAME(+)
		   AND DPM.PACKAGE_NO = DML_S.PACKAGE_NO(+)
		   AND DPD.PROJECT_NO = DML_D.PROJECT_NO(+)
		   AND DPD.TRK_ITEM_NAME = DML_D.TRK_ITEM_NAME(+)
		   AND DPD.MATERIAL_CODE = DML_D.MATERIAL_CODE(+)
		   AND DPD.PROJECT_NO = DPMGT.PROJECT_NO(+)
		   AND DPD.MATERIAL_CODE = DPMGT.MATERIAL_CODE(+)
		   AND DPD.LOCATION IS NOT NULL
		   AND DML_S.CODE_TYPE(+) = 'SUMMARY'
		   AND DML_D.CODE_TYPE(+) = 'DETAIL'
		   AND DML_S.MAP_DTL_ID(+) = #{MAP_DTL_ID}
		   AND DML_D.MAP_DTL_ID(+) = #{MAP_DTL_ID}
		   AND (DML_S.LOCATION_ID IS NOT NULL OR DML_D.LOCATION_ID IS NOT NULL)
		ORDER BY DPD.MATERIAL_CODE,
		         DPD.PACKAGE_LIST_NO,
		         DPD.PACKAGE_NO,
		         DPD.DRAWING_NO,
		         DPD.TAG_NO
	</select>

	<select id="getLocationCodeList" parameterType="java.util.Map" resultType="java.util.HashMap">
		SELECT DMM.MAP_NAME || ' - ' || DMD.MAP_NAME AS CODE,
		       DMM.MAP_NAME || ' - ' || DMD.MAP_NAME AS NAME
		  FROM DESM_MAP_MST DMM,
		       DESM_MAP_DTL DMD
		 WHERE DMM.MAP_MST_ID = DMD.MAP_MST_ID
		   AND DMM.DELETE_FLAG = 'N'
		   AND DMD.DELETE_FLAG = 'N'
		   AND DMM.PROJECT_NO = #{PROJECT_NO}
		ORDER BY DMD.MAP_MST_ID, DMD.MAP_DTL_ID
	</select>

	<update id="saveIdsmOsSummaryReport" parameterType="java.util.Map">
		MERGE INTO DESM_PACKING_MST DPM
		USING (SELECT DPM.PROJECT_NO,
		              DPM.TRK_ITEM_NAME,
		              DPM.PACKAGE_NO,
		              MAX(DPM.REPORT_SHORT) AS REPORT_SHORT,
		              MAX(DPM.REPORT_OVER) AS REPORT_OVER,
		              MAX(DPM.REPORT_DMG) AS REPORT_DMG,
		              MAX(DPM.REPORT_MISSING) AS REPORT_MISSING,
		              SUM(DPM.REPORT_SHORT_QTY) AS REPORT_SHORT_QTY,
		              SUM(DPM.REPORT_OVER_QTY) AS REPORT_OVER_QTY,
		              SUM(DPM.REPORT_DMG_QTY) AS REPORT_DMG_QTY,
		              SUM(DPM.REPORT_MISSING_QTY) AS REPORT_MISSING_QTY
		         FROM DESM_PACKING_DTL DPM
		        WHERE DPM.PROJECT_NO = #{PROJECT_NO}
		          AND DPM.TRK_ITEM_NAME = #{TRK_ITEM_NAME}
		          AND DPM.PACKAGE_NO = #{PACKAGE_NO}
		       GROUP BY DPM.PROJECT_NO,
		                DPM.TRK_ITEM_NAME,
		                DPM.PACKAGE_NO) DT
		ON (DPM.PROJECT_NO = DT.PROJECT_NO AND DPM.TRK_ITEM_NAME = DT.TRK_ITEM_NAME AND DPM.PACKAGE_NO = DT.PACKAGE_NO)
		WHEN MATCHED THEN
		     UPDATE SET DPM.REPORT_SHORT = DT.REPORT_SHORT,
		                DPM.REPORT_OVER = DT.REPORT_OVER,
		                DPM.REPORT_DMG = DT.REPORT_DMG,
		                DPM.REPORT_MISSING = DT.REPORT_MISSING ,
		                DPM.REPORT_SHORT_QTY = DT.REPORT_SHORT_QTY,
		                DPM.REPORT_OVER_QTY = DT.REPORT_OVER_QTY,
		                DPM.REPORT_DMG_QTY = DT.REPORT_DMG_QTY,
		                DPM.REPORT_MISSING_QTY = DT.REPORT_MISSING_QTY
	</update>

	<select id="getDesmDetailItemCreationMaterialCode" parameterType="java.util.Map" resultType="java.util.HashMap">
		SELECT SUBSTR(MATERIAL_CODE, 1, INSTR(MATERIAL_CODE, '-', -1)) ||
		       LPAD(TO_NUMBER(SUBSTR(MATERIAL_CODE, INSTR(MATERIAL_CODE, '-', -1) + 1)) + 1, 5, '0') AS MATERIAL_CODE
		  FROM (SELECT MAX(DPD.MATERIAL_CODE) AS MATERIAL_CODE
		          FROM DESM_PACKING_DTL DPD
		         WHERE DPD.PROJECT_NO = #{PROJECT_NO}
		           AND DPD.TRK_ITEM_NAME = #{TRK_ITEM_NAME})
	</select>

	<insert id="saveDesmDetailItemCreation" parameterType="java.util.Map">
		INSERT INTO DESM_PACKING_DTL DPD
		(DPD.PACKAGE_NO
		,DPD.DESCRIPTION
		,DPD.DRAWING_NO
		,DPD.TAG_NO
		,DPD.MATERIAL
		,DPD.GROSS
		,DPD.NET
		,DPD.NOS
		,DPD.UNIT
		,DPD.PROJECT_NO
		,DPD.TRK_ITEM_NAME
		,DPD.PACKAGE_LIST_NO
		,DPD.MATERIAL_CODE
		,DPD.IN_QTY
		,DPD.LOCATION
		,DPD.REPORT_OVER
		 <if test='LOCATION != null and LOCATION != ""'>
		 ,DPD.LOC_UPDATE_DATE
		 ,DPD.LOC_UPDATED_BY
		 </if>
		)
		VALUES
		(#{PACKAGE_NO}
		,#{DESCRIPTION}
		,#{DRAWING_NO}
		,#{TAG_NO}
		,#{MATERIAL}
		,#{GROSS}
		,#{NET}
		,#{NOS}
		,#{UNIT}
		,#{PROJECT_NO}
		,#{TRK_ITEM_NAME}
		,#{PACKAGE_LIST_NO}
		,#{MATERIAL_CODE}
		,#{IN_QTY}
		,#{LOCATION}
		,#{REPORT_OVER}
		<if test='LOCATION != null and LOCATION != ""'>
		 ,SYSDATE
		 ,#{USER_AD}
		 </if>
		)
	</insert>

	<insert id="saveDesmLocationSummaryDetailLog" parameterType="java.util.Map">
		INSERT INTO DESM_PACKING_DTL_EDIT_LOG
		(PACKAGE_NO,
		DESCRIPTION,
		DRAWING_NO,
		TAG_NO,
		MATERIAL,
		PACKAGE_TYPE,
		GROSS,
		NET,
		RT,
		VOLUME,
		L_CM,
		W_CM,
		H_CM,
		NOS,
		UNIT,
		LOCATION,
		REMARKS,
		PROJECT_NO,
		TRK_ITEM_NAME,
		ATT_ID,
		PACKAGE_LIST_NO,
		MATERIAL_CODE,
		IN_QTY,
		RSI_QTY,
		OUT_QTY,
        REPORT_SHORT,
        REPORT_OVER,
        REPORT_DMG,
        REPORT_MISSING,
		CREATED_BY,
		CREATION_DATE,
		LAST_UPDATED_BY,
		LAST_UPDATE_DATE,
		LOC_UPDATE_DATE,
		LOC_UPDATED_BY)
		SELECT  PACKAGE_NO,
		        DESCRIPTION,
		        DRAWING_NO,
		        TAG_NO,
		        MATERIAL,
		        PACKAGE_TYPE,
		        GROSS,
		        NET,
		        RT,
		        VOLUME,
		        L_CM,
		        W_CM,
		        H_CM,
		        NOS,
		        UNIT,
		        LOCATION,
		        REMARKS,
		        PROJECT_NO,
		        TRK_ITEM_NAME,
		        ATT_ID,
		        PACKAGE_LIST_NO,
		        MATERIAL_CODE,
		        IN_QTY,
		        RSI_QTY,
		        OUT_QTY,
		        DPD.REPORT_SHORT,
		        DPD.REPORT_OVER,
		        DPD.REPORT_DMG,
		        DPD.REPORT_MISSING,
		        #{USER_AD},
		        SYSDATE,
		        #{USER_AD},
		        SYSDATE,
		        LOC_UPDATE_DATE,
				LOC_UPDATED_BY
		  FROM DESM_PACKING_DTL DPD
		 WHERE DPD.PROJECT_NO = #{PROJECT_NO}
		   AND DPD.TRK_ITEM_NAME = #{TRK_ITEM_NAME}
		   AND DPD.PACKAGE_NO = #{PACKAGE_NO}
		   AND (NVL(DPD.IN_QTY, 0) - NVL(DPD.OUT_QTY, 0) + NVL(DPD.RETURN_QTY, 0)) != 0
	</insert>

	<update id="deleteDesmLocationSummaryDetail" parameterType="java.util.Map">
	    MERGE INTO DESM_PACKING_DTL DPD
	    USING (SELECT DPD.PROJECT_NO,
	                  DPD.TRK_ITEM_NAME,
	                  DPD.PACKAGE_NO,
	                  DPD.MATERIAL_CODE,
	                  '' AS LC
	             FROM DESM_PACKING_DTL DPD,
	                  DESM_MAP_LOCATION DML
	            WHERE DPD.PROJECT_NO = DML.PROJECT_NO(+)
	              AND DPD.TRK_ITEM_NAME = DML.TRK_ITEM_NAME(+)
	              AND DPD.MATERIAL_CODE = DML.MATERIAL_CODE(+)
	              AND DPD.PROJECT_NO = #{PROJECT_NO}
	              AND DPD.TRK_ITEM_NAME = #{TRK_ITEM_NAME}
	              AND DPD.PACKAGE_NO = #{PACKAGE_NO}
	              AND DML.CODE_TYPE(+) = 'DETAIL'
	              AND DML.LOCATION_ID IS NULL) L
	    ON (DPD.PROJECT_NO = L.PROJECT_NO AND
	        DPD.TRK_ITEM_NAME = L.TRK_ITEM_NAME AND
	        DPD.MATERIAL_CODE = L.MATERIAL_CODE)
	    WHEN MATCHED THEN
	         UPDATE
	            SET DPD.LOCATION = L.LC
	            ,DPD.LOC_UPDATE_DATE = SYSDATE
				,DPD.LOC_UPDATED_BY = #{USER_AD}
	</update>

	<select id="backup_getDesmSubconList" parameterType="java.util.Map" resultType="java.util.HashMap">
		/* MaterialMapper.backup_getDesmSubconList : Subcon 사용자 정보 생성, Subcon User / Site Role / Project */
		SELECT DU.USER_AD,
		       DU.USER_NAME,
		       DU.DEPT_NAME,
		       DU.MAIL,
		       DR.ROLE_SEQ,
		       DR.ROLE_NAME
		  FROM DESM_SUBCON_USER DSU,
		       DESM_USER DU,
		       DESM_USER_ROLE DUR,
           	   DESM_ROLE DR
	     WHERE DSU.USER_AD = DU.USER_AD
	       AND DU.USER_AD = DUR.USER_AD
	       AND DUR.ROLE_SEQ = DR.ROLE_SEQ
	       AND DR.SITE_YN = 'Y'
		 <if test='P_USER_AD != null and P_USER_AD != ""'>
		   AND DU.USER_AD LIKE '%' || UPPER(#{P_USER_AD}) || '%'
		 </if>
		 <if test='USER_NAME != null and USER_NAME != ""'>
		   AND DU.USER_NAME LIKE '%' || UPPER(#{USER_NAME}) || '%'
		 </if>
		 <if test='DEPT_NAME != null and DEPT_NAME != ""'>
		   AND DU.DEPT_NAME LIKE '%' || UPPER(#{DEPT_NAME}) || '%'
		 </if>
		 <if test='E_USER_AD != null and E_USER_AD != ""'>
		   AND DU.USER_AD = #{E_USER_AD}
		 </if>
	</select>

	<select id="getDesmSubconList_back20220820" parameterType="java.util.Map" resultType="java.util.HashMap">
		/* MaterialMapper.getDesmSubconList_back20220820 : Subcon 사용자 정보 생성, Subcon User / Site Role / Project */
		SELECT DU.USER_AD,
		       DU.USER_NAME,
		       DU.DEPT_NAME,
		       DU.MAIL,
		       DR.ROLE_SEQ,
		       DR.ROLE_NAME,
		       DSU.GUBUN,
		       DU.IDCS_YN,
	           (SELECT NVL(MAX(DCD.DTL_CODE), 'South Korea') AS COUNTRY
	              FROM DESM_USER_DEFAULT_COUNTRY DUDC,
	                   DESM_CODE_DTL DCD
	             WHERE DUDC.COUNTRY_CODE = DCD.DTL_CODE
	               AND DCD.DELEGATE_FLAG = 'N'
	               AND DUDC.USER_AD = DU.USER_AD) AS COUNTRY
		  FROM (SELECT 'SITE' AS GUBUN, TT.* FROM DESM_SUBCON_USER TT) DSU,
		       DESM_USER DU,
		       DESM_USER_ROLE DUR,
           	   DESM_ROLE DR
	     WHERE DSU.USER_AD(+) = DU.USER_AD
	       AND DU.USER_AD = DUR.USER_AD
	       AND DUR.ROLE_SEQ = DR.ROLE_SEQ
	       AND DR.SITE_YN = 'Y'
	       AND DU.DELEGATE_FLAG = 'N'
		 <if test='P_USER_AD != null and P_USER_AD != ""'>
		   AND DU.USER_AD LIKE '%' || UPPER(#{P_USER_AD}) || '%'
		 </if>
		 <if test='USER_NAME != null and USER_NAME != ""'>
		   AND DU.USER_NAME LIKE '%' || UPPER(#{USER_NAME}) || '%'
		 </if>
		 <if test='DEPT_NAME != null and DEPT_NAME != ""'>
		   AND DU.DEPT_NAME LIKE '%' || UPPER(#{DEPT_NAME}) || '%'
		 </if>
		 <if test='E_USER_AD != null and E_USER_AD != ""'>
		   AND DU.USER_AD = #{E_USER_AD}
		 </if>
	</select>



	<select id="getIdsmOsManageList" parameterType="java.util.Map" resultType="java.util.HashMap">
		SELECT *
		      FROM (SELECT DPD.PACKAGE_LIST_NO,
		      			  T.ATTRIBUTE3,
						  T.ATTRIBUTE9,
						  T.ATTRIBUTE10,
	                       DPD.PACKAGE_NO,
	                       DPD.DESCRIPTION,
	                       DPD.DRAWING_NO,
	                       DPD.TAG_NO,
                         	DPD.MATERIAL,
                         	DPD.MATERIAL_CODE,
	                       DPD.PACKAGE_TYPE,
						  DPD.TRK_ITEM_NAME,
		                  DPD.PROJECT_NO,
		                  DPD.LOCATION,
		                  DPD.REPORT_SHORT_QTY,
	                      DPD.REPORT_OVER_QTY,
	                      DPD.REPORT_DMG_QTY,
	                      DPD.REPORT_MISSING_QTY,
				       CASE WHEN DPD.REPORT_SHORT = 'Y' THEN 1 ELSE 0 END AS REPORT_SHORT,
				       CASE WHEN DPD.REPORT_OVER = 'Y' THEN 1 ELSE 0 END AS REPORT_OVER,
				       CASE WHEN DPD.REPORT_DMG = 'Y' THEN 1 ELSE 0 END AS REPORT_DMG,
				       CASE WHEN DPD.REPORT_MISSING = 'Y' THEN 1 ELSE 0 END AS REPORT_MISSING,
                         TO_CHAR(DPD.GROSS, 'FM999,999,999,999,990.0') AS GROSS,
                         TO_CHAR(DPD.NET, 'FM999,999,999,999,990.0') AS NET,
                         TO_CHAR(DPD.RT, 'FM999,999,999,999,990.0') AS RT,
                         TO_CHAR(DPD.L_CM, 'FM999,999,999,999,999') AS L_CM,
                         TO_CHAR(DPD.W_CM, 'FM999,999,999,999,999') AS W_CM,
                         TO_CHAR(DPD.H_CM, 'FM999,999,999,999,999') AS H_CM,
                         TO_CHAR(DPD.VOLUME, 'FM999,999,999,999,990.0') AS VOLUME,
	                       T.ONSITE_ACTUAL_DATE,
	                       DPD.UNIT,
	                       TO_CHAR(DPD.NOS, 'FM999,999,999,999,999') AS NOS,
	                       DPD.IN_QTY AS IN_QTY,
	                       DPD.RSI_QTY AS RSI_QTY,
	                       TO_CHAR(DPD.OUT_QTY, 'FM999,999,999,999,999') AS OUT_QTY,
                           NVL(DPD.RSI_QTY, 0) - NVL(DPD.OUT_QTY, 0) - NVL(DPD.RSI_CANCEL_QTY, 0) AS BALANCE_QTY,
                           NVL(DPD.IN_QTY, 0) - NVL(DPD.OUT_QTY, 0) + NVL(DPD.RETURN_QTY, 0) AS REMAIN_QTY,
                           DPD.RSI_QTY AS RSI_QTY_NUM,
                           DPD.OUT_QTY AS OUT_QTY_NUM,
                           NVL(DPD.RSI_QTY, 0) - NVL(DPD.OUT_QTY, 0) - NVL(DPD.RSI_CANCEL_QTY, 0) AS BALANCE_QTY_NUM,
                           NVL(DPD.IN_QTY, 0) - NVL(DPD.OUT_QTY, 0)  + NVL(DPD.RETURN_QTY, 0) AS REMAIN_QTY_NUM,
                           DPD.MRF_QTY,
                           DPD.RSI_CANCEL_QTY,
                           DPD.RETURN_QTY,
                           NVL(DPD.MRF_QTY, 0) - NVL(DPD.RSI_CANCEL_QTY, 0) - NVL(DPD.RETURN_QTY, 0) AS MRF_BALANCE_QTY,
	                       DPD.REMARKS,
	                       DPM.IS_CONFIRM_MATERIAL,
	                       DPD.ITEM_SIZE,
	                       DPMGT.TYPE,
	                       DPMGT.CATEGORY,
	                       DPMGT.SUB_CATEGORY,
	                       DPMGT.COMMENTS,
	                       NVL((SELECT CASE WHEN COUNT(*) = 0 THEN NULL ELSE COUNT(*) END
					              FROM ESAATTH ATT
					             WHERE 1=1
					               AND ATT.GRP_CD  = DPMGT.FILE_GRP_CD
					               AND ATT.STS != 'D'),0)  ATTH_CNT,
					       DPMGT.FILE_GRP_CD,
	                       DPMGT.IS_RSI_CONFIRM,
	                       DPMGT.RSI_CONFIRM_QTY,
	                       DPMGT.COM_SUBCON,
	                       T2.LAST_RSI,
						   T2.LAST_RSI_SUBCON,
						   TO_CHAR(T3.LAST_OUTGOING_DATE, 'YYYY/MM/DD') AS LAST_OUTGOING_DATE,
						   TO_CHAR(DPMGT.EXPIRED_DATE, 'YYYY/MM/DD') AS EXPIRED_DATE,
						   --CASE WHEN DPMGT.IS_RSI_CONFIRM = 'Y'
						   --     THEN NVL(DPMGT.RSI_CONFIRM_QTY,0) - NVL(DPD.OUT_QTY, 0) + NVL(DPD.RSI_CANCEL_QTY, 0) + NVL(DPD.RETURN_QTY, 0)
						   --		ELSE 0 END AS RSI_CONFIRM_REMAIN_QTY,
						   CASE WHEN DPMGT.IS_RSI_CONFIRM = 'Y' THEN NVL(DPMGT.RSI_CONFIRM_QTY,0) - NVL(DPD.OUT_QTY, 0) + NVL(DPD.RETURN_QTY, 0)
						   		ELSE 0 END AS RSI_CONFIRM_REMAIN_QTY,
	                       TO_CHAR(DPD.LOC_UPDATE_DATE, 'YYYY/MM/DD') AS LOC_UPDATE_DATE,
			   			   DPD.LOC_UPDATED_BY,
		                   TO_CHAR(DPM.RECEIPT_DATE, 'YYYY/MM/DD') as RECEIPT_DATE
		              FROM (SELECT ZIM.TRK_ITEM_SEQ,
		                           ZIM.TRK_ITEM_NAME,
		                           ZIM.TRK_ITEM_GROUP,
		                           ZIM.ORGANIZATION_ID,
		                           ZIM.PROJECT_ID,
		                           ZIM.PROJECT_NO,
		                           PPA.NAME as PROJECT_NAME,
		                           ZIM.TASK_ID,
		                           ZIM.TASK_NUMBER,
		                           ZIM.BATCH,
		                           ZIM.OFFSHORE,
		                           ZIM.PRIMAVERA_ID,
		                           TO_CHAR(ZIM.MPS_PLAN_DATE, 'YYYY/MM/DD') as MPS_PLAN_DATE,
		                           TO_CHAR(ZIM.MPS_EXPECTED_DATE, 'YYYY/MM/DD') as MPS_EXPECTED_DATE,
		                           TO_CHAR(ZIM.MPS_ACTUAL_DATE, 'YYYY/MM/DD') as MPS_ACTUAL_DATE,
		                           ZIM.PURCHASE_DURATION,
		                           TO_CHAR(ZIM.PO_PLAN_DATE, 'YYYY/MM/DD') as PO_PLAN_DATE,
		                           TO_CHAR(ZIM.PO_EXPECTED_DATE, 'YYYY/MM/DD') as PO_EXPECTED_DATE,
		                           TO_CHAR(ZIM.PO_ATCUAL_DATE, 'YYYY/MM/DD') as PO_ATCUAL_DATE,
		                           ZIM.MAKE_DURATION,
		                           ZIM.PROGRESS,
		                           TO_CHAR(ZIM.CARGO_PLAN_DATE, 'YYYY/MM/DD') as CARGO_PLAN_DATE,
		                           TO_CHAR(ZIM.CARGO_EXPECTED_DATE, 'YYYY/MM/DD') as CARGO_EXPECTED_DATE,
		                           TO_CHAR(ZIM.CARGO_PROMISED_DATE, 'YYYY/MM/DD') as CARGO_PROMISED_DATE,
		                           TO_CHAR(ZIM.CARGO_ACTUAL_DATE, 'YYYY/MM/DD') as CARGO_ACTUAL_DATE,
		                           ZIM.SHIPMENT_DURATION,
		                           TO_CHAR(ZIM.FOB_PLAN_DATE, 'YYYY/MM/DD') as FOB_PLAN_DATE,
		                           TO_CHAR(ZIM.FOB_EXPECTED_DATE, 'YYYY/MM/DD') as FOB_EXPECTED_DATE,
		                           TO_CHAR(ZIM.FOB_ACTUAL_DATE, 'YYYY/MM/DD') as FOB_ACTUAL_DATE,
		                           ZIM.TRANS_DURATION,
		                           TO_CHAR(ZIM.ONSITE_PLAN_DATE, 'YYYY/MM/DD') as ONSITE_PLAN_DATE,
		                           TO_CHAR(ZIM.ONSITE_EXPECTED_DATE, 'YYYY/MM/DD') as ONSITE_EXPECTED_DATE,
		                           TO_CHAR(ZIM.ONSITE_ACTUAL_DATE, 'YYYY/MM/DD') as ONSITE_ACTUAL_DATE,
		                           ZIM.PAYMENT_MILESTONE,
		                           ZIM.TRK_ITEM_DEFAULT,
		                           ZIM.INVOICE_NUM,
		                           ZIM.ATTRIBUTE1,
		                           ZIM.ATTRIBUTE2,
		                           ZIM.ATTRIBUTE3,
		                           ZIM.ATTRIBUTE4,
		                           ZIM.ATTRIBUTE5,
		                           ZIM.ATTRIBUTE6,
		                           ZIM.ATTRIBUTE7,
		                           ZIM.ATTRIBUTE8,
		                           ZIM.ATTRIBUTE9,
		                           ZIM.ATTRIBUTE10,
		                           CASE WHEN DI.CNT = 1 THEN DI.INVOICE_NUM
		                                WHEN DI.CNT > 1 THEN DI.INVOICE_NUM || ' 외 ' || DI.CALC_CNT || '건' END AS SEL_INVOICE_NUM
		                      FROM ZVTS_ITEM_MASTER ZIM,
		                           PA_PROJECTS_ALL_INT PPA,
		                           (SELECT ZDI.TRK_ITEM_SEQ,
		                                   COUNT(*) AS CNT,
		                                   COUNT(*) - 1 AS CALC_CNT,
		                                   MAX(ZDI.INVOICE_NUM) AS INVOICE_NUM
		                              FROM ZVTS_DESM_INVOICE ZDI
		                            GROUP BY ZDI.TRK_ITEM_SEQ) DI
		                     WHERE ZIM.PROJECT_ID = PPA.PROJECT_ID
		                       AND ZIM.TRK_ITEM_SEQ = DI.TRK_ITEM_SEQ(+)
		                       AND ZIM.PROJECT_NO = UPPER(#{PROJECT_NO})
		                    START WITH ZIM.TRK_ITEM_GROUP IS NULL
		                    CONNECT BY PRIOR ZIM.TRK_ITEM_SEQ = ZIM.TRK_ITEM_GROUP) T,
		                    (SELECT
								 MAX(H.RSI_NO) KEEP(DENSE_RANK LAST ORDER BY H.CREATION_DATE) AS LAST_RSI
								,MAX(H.SUBCONTRACTOR) KEEP(DENSE_RANK LAST ORDER BY H.CREATION_DATE) AS LAST_RSI_SUBCON
								,H.PROJECT_NO
								,L.MATERIAL_CODE
							FROM DESM_RSI_HEADER H
							JOIN DESM_RSI_LINE L ON H.RSI_HEADER_ID = L.RSI_HEADER_ID
							 GROUP BY H.PROJECT_NO
									 ,L.MATERIAL_CODE
							) T2,
		                    (SELECT MAX(O.HANDOVER_DATE) AS LAST_OUTGOING_DATE
							,H.PROJECT_NO
							,L.MATERIAL_CODE
						FROM DESM_RSI_HEADER H
						JOIN DESM_RSI_LINE L ON H.RSI_HEADER_ID = L.RSI_HEADER_ID
						JOIN DESM_RSI_OUTGOING O ON L.RSI_HEADER_ID = O.RSI_HEADER_ID AND L.RSI_LINE_ID  = O.RSI_LINE_ID
						GROUP BY H.PROJECT_NO
								 ,L.MATERIAL_CODE) T3,
		                    DESM_PACKING_DTL DPD,
		                    DESM_PACKING_MST DPM,
		                	DESM_PACKING_MGT DPMGT
		             WHERE T.TRK_ITEM_NAME = DPD.TRK_ITEM_NAME
		               AND T.PROJECT_NO = DPD.PROJECT_NO
	                   AND DPD.PROJECT_NO = DPM.PROJECT_NO
	                   AND DPD.TRK_ITEM_NAME = DPM.TRK_ITEM_NAME
	                   AND DPD.PACKAGE_NO = DPM.PACKAGE_NO
	                   AND T.PROJECT_NO = DPMGT.PROJECT_NO
					   AND DPD.MATERIAL_CODE = DPMGT.MATERIAL_CODE
					   AND DPMGT.PROJECT_NO = T2.PROJECT_NO(+)
					   AND DPMGT.MATERIAL_CODE = T2.MATERIAL_CODE(+)
					   AND DPMGT.PROJECT_NO = T3.PROJECT_NO(+)
					   AND DPMGT.MATERIAL_CODE = T3.MATERIAL_CODE(+)
		             ) TT
			  WHERE 1 = 1
			<if test='PACKAGE_LIST_NO != null and PACKAGE_LIST_NO != ""'>
				AND UPPER(PACKAGE_LIST_NO) LIKE '%' || UPPER(#{PACKAGE_LIST_NO}) || '%'
			</if>
			<if test='PACKAGE_NO != null and PACKAGE_NO != ""'>
				AND UPPER(PACKAGE_NO) LIKE '%' || UPPER(#{PACKAGE_NO}) || '%'
			</if>
			<if test='DESCRIPTION != null and DESCRIPTION != ""'>
				AND UPPER(DESCRIPTION) LIKE '%' || UPPER(#{DESCRIPTION}) || '%'
			</if>
			<if test='DRAWING_NO != null and DRAWING_NO != ""'>
				AND UPPER(DRAWING_NO) LIKE '%' || UPPER(#{DRAWING_NO}) || '%'
			</if>
			<if test='TAG_NO != null and TAG_NO != ""'>
				AND UPPER(TAG_NO) LIKE '%' || UPPER(#{TAG_NO}) || '%'
			</if>
			<if test='MATERIAL_CODE != null and MATERIAL_CODE != ""'>
				AND UPPER(MATERIAL_CODE) LIKE '%' || UPPER(#{MATERIAL_CODE}) || '%'
			</if>
			<if test='VENDOR != null and VENDOR !=""'>
				AND UPPER(ATTRIBUTE3) LIKE '%' || UPPER(#{VENDOR}) || '%'
			</if>
			<if test='SEQUENCE != null and SEQUENCE !=""'>
				AND ATTRIBUTE9 = #{SEQUENCE}
			</if>
			<if test='SCHEDULE != null and SCHEDULE !=""'>
				AND ATTRIBUTE10 = #{SCHEDULE}
			</if>
			<if test='COMMENTS != null and COMMENTS != ""'>
				AND UPPER(COMMENTS) LIKE '%' || UPPER(#{COMMENTS}) || '%'
			</if>
			<if test='TYPE != null and TYPE != ""'>
				AND TYPE = #{TYPE}
			</if>
			<if test='CATEGORY != null and CATEGORY != ""'>
				AND UPPER(CATEGORY) LIKE '%' || UPPER(#{CATEGORY}) || '%'
			</if>
			<if test='SUB_CATEGORY != null and SUB_CATEGORY != ""'>
				AND UPPER(SUB_CATEGORY) LIKE '%' || UPPER(#{SUB_CATEGORY}) || '%'
			</if>
			<if test='RSI_CONFIRM != null and RSI_CONFIRM != ""'>
				AND IS_RSI_CONFIRM = #{RSI_CONFIRM}
			</if>
			<if test='START_LOCATION_UPDATE != null and START_LOCATION_UPDATE != ""'>
				AND LOC_UPDATE_DATE >= #{START_LOCATION_UPDATE}
			</if>
			<if test='END_LOCATION_UPDATE != null and END_LOCATION_UPDATE != ""'>
				AND LOC_UPDATE_DATE &lt;= #{END_LOCATION_UPDATE}
			</if>



			<if test='LOCATION_LIST != null'>
				AND LOCATION IN
				<foreach collection="LOCATION_LIST" item="list" separator="," open="(" close=")">
					#{list.LOCATION}
				</foreach>
			</if>
		ORDER BY (SELECT DTL_ORDER FROM DESM_CODE_DTL WHERE DTL_CODE = TYPE),
				 MATERIAL_CODE,
				 PACKAGE_LIST_NO,
				 TRK_ITEM_NAME,
		         PACKAGE_NO,
		         DRAWING_NO,
		         TAG_NO
	</select>


	<select id="getDesmMaterialManageCreationList" parameterType="java.util.Map" resultType="java.util.HashMap">
		SELECT TT.*
		      FROM (SELECT DPD.PACKAGE_LIST_NO,
		      			  T.ATTRIBUTE3,
						  T.ATTRIBUTE9,
						  T.ATTRIBUTE10,
	                       DPD.PACKAGE_NO,
	                       DPD.DESCRIPTION,
	                       DPD.DRAWING_NO,
	                       DPD.TAG_NO,
                         	DPD.MATERIAL,
                         	DPD.MATERIAL_CODE,
	                       DPD.PACKAGE_TYPE,
						  DPD.TRK_ITEM_NAME,
		                  DPD.PROJECT_NO,
		                  DPD.LOCATION,
		                  DPD.REPORT_SHORT_QTY,
	                      DPD.REPORT_OVER_QTY,
	                      DPD.REPORT_DMG_QTY,
	                      DPD.REPORT_MISSING_QTY,
				       CASE WHEN DPD.REPORT_SHORT = 'Y' THEN 1 ELSE 0 END AS REPORT_SHORT,
				       CASE WHEN DPD.REPORT_OVER = 'Y' THEN 1 ELSE 0 END AS REPORT_OVER,
				       CASE WHEN DPD.REPORT_DMG = 'Y' THEN 1 ELSE 0 END AS REPORT_DMG,
				       CASE WHEN DPD.REPORT_MISSING = 'Y' THEN 1 ELSE 0 END AS REPORT_MISSING,
                         TO_CHAR(DPD.GROSS, 'FM999,999,999,999,990.0') AS GROSS,
                         TO_CHAR(DPD.NET, 'FM999,999,999,999,990.0') AS NET,
                         TO_CHAR(DPD.RT, 'FM999,999,999,999,990.0') AS RT,
                         TO_CHAR(DPD.L_CM, 'FM999,999,999,999,999') AS L_CM,
                         TO_CHAR(DPD.W_CM, 'FM999,999,999,999,999') AS W_CM,
                         TO_CHAR(DPD.H_CM, 'FM999,999,999,999,999') AS H_CM,
                         TO_CHAR(DPD.VOLUME, 'FM999,999,999,999,990.0') AS VOLUME,
	                       T.ONSITE_ACTUAL_DATE,
	                       DPD.UNIT,
	                       TO_CHAR(DPD.NOS, 'FM999,999,999,999,999') AS NOS,
	                       DPD.IN_QTY AS IN_QTY,
	                       DPD.RSI_QTY AS RSI_QTY,
	                       TO_CHAR(DPD.OUT_QTY, 'FM999,999,999,999,999') AS OUT_QTY,
                           NVL(DPD.RSI_QTY, 0) - NVL(DPD.OUT_QTY, 0) - NVL(DPD.RSI_CANCEL_QTY, 0) AS BALANCE_QTY,
                           NVL(DPD.IN_QTY, 0) - NVL(DPD.OUT_QTY, 0) + NVL(DPD.RETURN_QTY, 0) AS REMAIN_QTY,
                           DPD.RSI_QTY AS RSI_QTY_NUM,
                           DPD.OUT_QTY AS OUT_QTY_NUM,
                           NVL(DPD.RSI_QTY, 0) - NVL(DPD.OUT_QTY, 0) - NVL(DPD.RSI_CANCEL_QTY, 0) AS BALANCE_QTY_NUM,
                           NVL(DPD.IN_QTY, 0) - NVL(DPD.OUT_QTY, 0)  + NVL(DPD.RETURN_QTY, 0) AS REMAIN_QTY_NUM,
                           DPD.MRF_QTY,
                           DPD.RSI_CANCEL_QTY,
                           DPD.RETURN_QTY,
                           NVL(DPD.MRF_QTY, 0) - NVL(DPD.RSI_CANCEL_QTY, 0) - NVL(DPD.RETURN_QTY, 0) AS MRF_BALANCE_QTY,
	                       DPD.REMARKS,
	                       DPM.IS_CONFIRM_MATERIAL,
	                       DPD.ITEM_SIZE
		              FROM (SELECT ZIM.TRK_ITEM_SEQ,
		                           ZIM.TRK_ITEM_NAME,
		                           ZIM.TRK_ITEM_GROUP,
		                           ZIM.ORGANIZATION_ID,
		                           ZIM.PROJECT_ID,
		                           ZIM.PROJECT_NO,
		                           PPA.NAME as PROJECT_NAME,
		                           ZIM.TASK_ID,
		                           ZIM.TASK_NUMBER,
		                           ZIM.BATCH,
		                           ZIM.OFFSHORE,
		                           ZIM.PRIMAVERA_ID,
		                           TO_CHAR(ZIM.MPS_PLAN_DATE, 'YYYY/MM/DD') as MPS_PLAN_DATE,
		                           TO_CHAR(ZIM.MPS_EXPECTED_DATE, 'YYYY/MM/DD') as MPS_EXPECTED_DATE,
		                           TO_CHAR(ZIM.MPS_ACTUAL_DATE, 'YYYY/MM/DD') as MPS_ACTUAL_DATE,
		                           ZIM.PURCHASE_DURATION,
		                           TO_CHAR(ZIM.PO_PLAN_DATE, 'YYYY/MM/DD') as PO_PLAN_DATE,
		                           TO_CHAR(ZIM.PO_EXPECTED_DATE, 'YYYY/MM/DD') as PO_EXPECTED_DATE,
		                           TO_CHAR(ZIM.PO_ATCUAL_DATE, 'YYYY/MM/DD') as PO_ATCUAL_DATE,
		                           ZIM.MAKE_DURATION,
		                           ZIM.PROGRESS,
		                           TO_CHAR(ZIM.CARGO_PLAN_DATE, 'YYYY/MM/DD') as CARGO_PLAN_DATE,
		                           TO_CHAR(ZIM.CARGO_EXPECTED_DATE, 'YYYY/MM/DD') as CARGO_EXPECTED_DATE,
		                           TO_CHAR(ZIM.CARGO_PROMISED_DATE, 'YYYY/MM/DD') as CARGO_PROMISED_DATE,
		                           TO_CHAR(ZIM.CARGO_ACTUAL_DATE, 'YYYY/MM/DD') as CARGO_ACTUAL_DATE,
		                           ZIM.SHIPMENT_DURATION,
		                           TO_CHAR(ZIM.FOB_PLAN_DATE, 'YYYY/MM/DD') as FOB_PLAN_DATE,
		                           TO_CHAR(ZIM.FOB_EXPECTED_DATE, 'YYYY/MM/DD') as FOB_EXPECTED_DATE,
		                           TO_CHAR(ZIM.FOB_ACTUAL_DATE, 'YYYY/MM/DD') as FOB_ACTUAL_DATE,
		                           ZIM.TRANS_DURATION,
		                           TO_CHAR(ZIM.ONSITE_PLAN_DATE, 'YYYY/MM/DD') as ONSITE_PLAN_DATE,
		                           TO_CHAR(ZIM.ONSITE_EXPECTED_DATE, 'YYYY/MM/DD') as ONSITE_EXPECTED_DATE,
		                           TO_CHAR(ZIM.ONSITE_ACTUAL_DATE, 'YYYY/MM/DD') as ONSITE_ACTUAL_DATE,
		                           ZIM.PAYMENT_MILESTONE,
		                           ZIM.TRK_ITEM_DEFAULT,
		                           ZIM.INVOICE_NUM,
		                           ZIM.ATTRIBUTE1,
		                           ZIM.ATTRIBUTE2,
		                           ZIM.ATTRIBUTE3,
		                           ZIM.ATTRIBUTE4,
		                           ZIM.ATTRIBUTE5,
		                           ZIM.ATTRIBUTE6,
		                           ZIM.ATTRIBUTE7,
		                           ZIM.ATTRIBUTE8,
		                           ZIM.ATTRIBUTE9,
		                           ZIM.ATTRIBUTE10,
		                           CASE WHEN DI.CNT = 1 THEN DI.INVOICE_NUM
		                                WHEN DI.CNT > 1 THEN DI.INVOICE_NUM || ' 외 ' || DI.CALC_CNT || '건' END AS SEL_INVOICE_NUM
		                      FROM ZVTS_ITEM_MASTER ZIM,
		                           PA_PROJECTS_ALL_INT PPA,
		                           (SELECT ZDI.TRK_ITEM_SEQ,
		                                   COUNT(*) AS CNT,
		                                   COUNT(*) - 1 AS CALC_CNT,
		                                   MAX(ZDI.INVOICE_NUM) AS INVOICE_NUM
		                              FROM ZVTS_DESM_INVOICE ZDI
		                            GROUP BY ZDI.TRK_ITEM_SEQ) DI
		                     WHERE ZIM.PROJECT_ID = PPA.PROJECT_ID
		                       AND ZIM.TRK_ITEM_SEQ = DI.TRK_ITEM_SEQ(+)
		                       AND ZIM.PROJECT_NO = UPPER(#{PROJECT_NO})
		                    START WITH ZIM.TRK_ITEM_GROUP IS NULL
		                    CONNECT BY PRIOR ZIM.TRK_ITEM_SEQ = ZIM.TRK_ITEM_GROUP) T,
		                    DESM_PACKING_DTL DPD,
		                    DESM_PACKING_MST DPM
		             WHERE T.TRK_ITEM_NAME = DPD.TRK_ITEM_NAME
		               AND T.PROJECT_NO = DPD.PROJECT_NO
	                   AND DPD.PROJECT_NO = DPM.PROJECT_NO
	                   AND DPD.TRK_ITEM_NAME = DPM.TRK_ITEM_NAME
	                   AND DPD.PACKAGE_NO = DPM.PACKAGE_NO
					<if test='ATTRIBUTE10 != null and ATTRIBUTE10 != ""'>
						AND T.ATTRIBUTE10  = #{ATTRIBUTE10}
					</if>
		             ) TT
		      LEFT OUTER JOIN DESM_PACKING_MGT DPMGT ON TT.PROJECT_NO = DPMGT.PROJECT_NO AND TT.MATERIAL_CODE = DPMGT.MATERIAL_CODE
			  WHERE 1 = 1
			  AND DPMGT.PROJECT_NO IS NULL
			<if test='PACKAGE_LIST_NO != null and PACKAGE_LIST_NO != ""'>
				AND UPPER(TT.PACKAGE_LIST_NO) LIKE '%' || UPPER(#{PACKAGE_LIST_NO}) || '%'
			</if>
			<if test='PACKAGE_NO != null and PACKAGE_NO != ""'>
				AND UPPER(TT.PACKAGE_NO) LIKE '%' || UPPER(#{PACKAGE_NO}) || '%'
			</if>
			<if test='DESCRIPTION != null and DESCRIPTION != ""'>
				AND UPPER(TT.${DESCRIPTION_TYPE}) LIKE '%' || UPPER(#{DESCRIPTION}) || '%'
			</if>
			<if test='DRAWING_NO != null and DRAWING_NO != ""'>
				AND UPPER(TT.DRAWING_NO) LIKE '%' || UPPER(#{DRAWING_NO}) || '%'
			</if>
			<if test='TAG_NO != null and TAG_NO != ""'>
				AND UPPER(TT.TAG_NO) LIKE '%' || UPPER(#{TAG_NO}) || '%'
			</if>
			<if test='MATERIAL_CODE != null and MATERIAL_CODE != ""'>
				AND UPPER(TT.MATERIAL_CODE) LIKE '%' || UPPER(#{MATERIAL_CODE}) || '%'
			</if>
			<if test='VENDOR != null and VENDOR !=""'>
				AND UPPER(TT.ATTRIBUTE3) LIKE '%' || UPPER(#{VENDOR}) || '%'
			</if>
			<if test='SEQUENCE != null and SEQUENCE !=""'>
				AND TT.ATTRIBUTE9 = #{SEQUENCE}
			</if>
			<if test='SCHEDULE != null and SCHEDULE !=""'>
				AND TT.ATTRIBUTE10 = #{SCHEDULE}
			</if>

			<if test='LOCATION_LIST != null'>
				AND TT.LOCATION IN
				<foreach collection="LOCATION_LIST" item="list" separator="," open="(" close=")">
					#{list.LOCATION}
				</foreach>
			</if>
		ORDER BY TT.MATERIAL_CODE,
				 TT.PACKAGE_LIST_NO,
				 TT.TRK_ITEM_NAME,
		         TT.PACKAGE_NO,
		         TT.DRAWING_NO,
		         TT.TAG_NO
	</select>

	<select id="getRsiReqQty" parameterType="java.util.Map" resultType="java.util.HashMap">
		SELECT
			L.MATERIAL_CODE
			,SUM(L.REQ_QTY ) AS REQ_QTY
		FROM DESM_RSI_HEADER H
		JOIN DESM_RSI_LINE L ON H.RSI_HEADER_ID = L.RSI_HEADER_ID
		WHERE H.PROJECT_NO = #{PROJECT_NO}
		AND L.MATERIAL_CODE = #{MATERIAL_CODE}
		GROUP BY L.MATERIAL_CODE
	</select>

	<insert id="saveDesmMaterialManageSave" parameterType="java.util.Map">
		INSERT INTO DESM_PACKING_MGT (
			PROJECT_NO
			,MATERIAL_CODE
			,"TYPE"
			<if test='CATEGORY != null and CATEGORY !=""'>
			,CATEGORY
			</if>
			<if test='SUB_CATEGORY != null and SUB_CATEGORY !=""'>
			,SUB_CATEGORY
			</if>
			<if test='COMMENTS != null and COMMENTS !=""'>
			,COMMENTS
			</if>
			<if test='IS_RSI_CONFIRM != null and IS_RSI_CONFIRM !=""'>
			,IS_RSI_CONFIRM
			,RSI_CONFIRM_QTY
			</if>
			,CREATED_BY
			,CREATION_DATE
			)
		VALUES (
			#{PROJECT_NO}
			,#{MATERIAL_CODE}
			,#{TYPE}
			<if test='CATEGORY != null and CATEGORY !=""'>
			,#{CATEGORY}
			</if>
			<if test='SUB_CATEGORY != null and SUB_CATEGORY !=""'>
			,#{SUB_CATEGORY}
			</if>
			<if test='COMMENTS != null and COMMENTS !=""'>
			,#{COMMENTS}
			</if>
			<if test='IS_RSI_CONFIRM != null and IS_RSI_CONFIRM !=""'>
			,#{IS_RSI_CONFIRM}
			,#{RSI_CONFIRM_QTY}
			</if>
			,#{USER_AD}
			,SYSDATE
			)
	</insert>

	<update id="saveIdsmOsManageList" parameterType="java.util.Map">
		UPDATE DESM_PACKING_MGT
		SET "TYPE" = #{TYPE}
			,LAST_UPDATED_BY = #{USER_AD}
			,LAST_UPDATE_DATE = SYSDATE
			<if test='CATEGORY != null '>
			,CATEGORY = #{CATEGORY}
			</if>
			<if test='SUB_CATEGORY != null '>
			,SUB_CATEGORY = #{SUB_CATEGORY}
			</if>
			<if test='COMMENTS != null '>
			,COMMENTS = #{COMMENTS}
			</if>
			<if test='COM_SUBCON != null '>
			,COM_SUBCON = #{COM_SUBCON}
			</if>
			<if test='IS_RSI_CONFIRM != null and IS_RSI_CONFIRM !=""'>
			,IS_RSI_CONFIRM = #{IS_RSI_CONFIRM}
			,RSI_CONFIRM_QTY = #{RSI_CONFIRM_QTY, jdbcType=INTEGER}
			</if>
			<if test='FILE_GRP_CD != null and FILE_GRP_CD !=""'>
			,FILE_GRP_CD = #{FILE_GRP_CD}
			</if>
			<if test='EXPIRED_DATE != null and EXPIRED_DATE !=""'>
			,EXPIRED_DATE = #{EXPIRED_DATE}
			</if>
		WHERE PROJECT_NO = #{PROJECT_NO}
			AND MATERIAL_CODE = #{MATERIAL_CODE}
	</update>

	<delete id="deleteMaterialManage" parameterType="java.util.Map">
		DELETE FROM DESM_PACKING_MGT WHERE  PROJECT_NO = #{PROJECT_NO} AND MATERIAL_CODE = #{MATERIAL_CODE}
	</delete>

	<select id="getDesmRsiOutPackageQtyList" parameterType="java.util.Map" resultType="java.util.HashMap">
 			SELECT * FROM DESM_PACKING_DTL
		   WHERE package_no = (SELECT PACKAGE_NO  FROM DESM_PACKING_DTL WHERE MATERIAL_CODE = #{MATERIAL_CODE} AND PROJECT_NO = #{PROJECT_NO})
		   AND (NVL(IN_QTY, 0) - NVL(OUT_QTY, 0) + NVL(RETURN_QTY, 0)) != 0
		  	UNION ALL
		  	SELECT * FROM DESM_PACKING_DTL
		   WHERE MATERIAL_CODE = #{MATERIAL_CODE}
	</select>
	
	<select id="getDesmRsiOutPackageQtyListM" parameterType="java.util.Map" resultType="java.util.HashMap">
 			SELECT * FROM DESM_PACKING_DTL
		   WHERE package_no = (SELECT PACKAGE_NO  FROM DESM_PACKING_DTL WHERE MATERIAL_CODE = #{MATERIAL_CODE})
		   AND (NVL(IN_QTY, 0) - NVL(OUT_QTY, 0) + NVL(RETURN_QTY, 0)) != 0
		  	UNION ALL
		  	SELECT * FROM DESM_PACKING_DTL
		   WHERE MATERIAL_CODE = #{MATERIAL_CODE}
	</select>

	<update id="updateDesmRsiOpen"  parameterType="java.util.Map">
	 UPDATE DESM_RSI_HEADER SET
	 CLOSED_CODE = 'OPEN'
     WHERE RSI_HEADER_ID = ( SELECT DRH.RSI_HEADER_ID
						     FROM DESM_PACKING_DTL DPD,
			                 DESM_RSI_LINE DRL,
			                 DESM_RSI_HEADER DRH
			                 WHERE DRH.RSI_HEADER_ID = DRL.RSI_HEADER_ID
			                 AND DPD.MATERIAL_CODE = DRL.MATERIAL_CODE
			                 AND DPD.PROJECT_NO = DRH.PROJECT_NO
			                 AND DPD.MATERIAL_CODE = #{MATERIAL_CODE}
			                 AND DRL.RSI_LINE_ID = #{RSI_LINE_ID}  )
	</update>


	<select id="getDesmTransactionHistoryList"  parameterType="java.util.Map" resultType="java.util.HashMap">
		SELECT T2.*
		 ,T1.SOURCE
		 ,T1.TRANSACTION_NO
		 ,T1.QTY
		 ,T1.ACTION_USER
		 ,T1.REMARKS
		 ,TO_CHAR(T1.ACTION_DATE, 'YYYY/MM/DD HH:MI:SS') as ACTION_DATE
		FROM (SELECT
		     'MRF' AS SOURCE
		    ,H.MRF_NO AS TRANSACTION_NO
		    ,L.REQ_RETURN_QTY AS QTY
		    ,H.CREATION_DATE AS ACTION_DATE
		    ,H.SUBCONTRACTOR AS ACTION_USER
		    ,CASE WHEN L.RSI_OUTGOING_ID IS NULL THEN 'RSI Cancel' ELSE 'OutGoing Return' END AS REMARKS
		    ,L.MATERIAL_CODE
		    FROM DESM_MRF_HEADER H
		    JOIN DESM_MRF_LINE L ON H.MRF_HEADER_ID = L.MRF_HEADER_ID
		    WHERE H.PROJECT_NO = #{PROJECT_NO}
		    AND L.MATERIAL_CODE  = #{MATERIAL_CODE}
		    UNION
		    SELECT
		     'Return' AS SOURCE
		    ,H.MRF_NO AS TRANSACTION_NO
		    ,R.RETURN_QTY AS QTY
		    ,R.CREATION_DATE AS ACTION_DATE
		    ,R.CREATED_BY AS ACTION_USER
		    ,'' AS REMARKS
		    ,L.MATERIAL_CODE
		    FROM DESM_MRF_HEADER H
		    JOIN DESM_MRF_LINE L ON H.MRF_HEADER_ID = L.MRF_HEADER_ID
		    JOIN DESM_MRF_RETURN R ON L.MRF_HEADER_ID = R.MRF_HEADER_ID AND L.MRF_LINE_ID  = R.MRF_LINE_ID
		    WHERE  H.PROJECT_NO = #{PROJECT_NO}
		    AND L.MATERIAL_CODE  = #{MATERIAL_CODE}
		    UNION
		    SELECT
		     'RSI' AS SOURCE
		    ,H.RSI_NO AS TRANSACTION_NO
		    ,L.REQ_QTY AS QTY
		    ,H.CREATION_DATE AS ACTION_DATE
		    ,H.SUBCONTRACTOR AS ACTION_USER
		    ,'' AS REMARKS
		    ,L.MATERIAL_CODE
		    FROM DESM_RSI_HEADER H
		    JOIN DESM_RSI_LINE L ON H.RSI_HEADER_ID = L.RSI_HEADER_ID
		    WHERE H.PROJECT_NO = #{PROJECT_NO}
		    AND L.MATERIAL_CODE  = #{MATERIAL_CODE}
		    UNION
		    SELECT
		     'Outgoing' AS SOURCE
		    ,H.RSI_NO AS TRANSACTION_NO
		    ,O.HANDOVER_QTY  AS QTY
		    ,O.CREATION_DATE AS ACTION_DATE
		    ,O.CREATED_BY AS ACTION_USER
		    ,'' AS REMARKS
		    ,L.MATERIAL_CODE
		    FROM DESM_RSI_HEADER H
		    JOIN DESM_RSI_LINE L ON H.RSI_HEADER_ID = L.RSI_HEADER_ID
		    JOIN DESM_RSI_OUTGOING O ON L.RSI_HEADER_ID = O.RSI_HEADER_ID AND L.RSI_LINE_ID  = O.RSI_LINE_ID
		    WHERE  H.PROJECT_NO = #{PROJECT_NO}
		    AND L.MATERIAL_CODE  = #{MATERIAL_CODE}) T1,
		    (SELECT DPD.MATERIAL_CODE
			,DPD.DESCRIPTION
			,DPMGT."TYPE"
			,(SELECT DTL_NAME_KO FROM DESM_CODE_DTL WHERE MST_CODE ='M004' AND DTL_CODE = DPMGT.TYPE) AS TYPE_NAME
			,DPMGT.CATEGORY
			FROM  DESM_PACKING_DTL DPD,
			DESM_PACKING_MGT DPMGT
			WHERE DPD.PROJECT_NO = DPMGT.PROJECT_NO(+)
			AND DPD.MATERIAL_CODE = DPMGT.MATERIAL_CODE(+)
			AND DPD.PROJECT_NO = #{PROJECT_NO}
			AND DPD.MATERIAL_CODE  = #{MATERIAL_CODE}) T2
			WHERE T1.MATERIAL_CODE = T2.MATERIAL_CODE
		ORDER BY T1.ACTION_DATE
	</select>

	<select id="getDesmProjectPackageInfo" parameterType="java.util.Map" resultType="java.util.HashMap">
		/* MaterialMapper.xml -> getDesmProjectPackageInfo : Project Package Info 합산 결과 조회 */
		SELECT TO_CHAR(COUNT(1), 'FM999,999,999,999,990') AS PKG_COUNT
        ,      TO_CHAR(ROUND(SUM(GREATEST(DPM.VOLUME, 0))), 'FM999,999,999,999,990') AS SUM_CBM -- m3
        ,      TO_CHAR(ROUND(SUM(GREATEST(DPM.NET, 0)) / 1000), 'FM999,999,999,999,990') AS SUM_NET -- ton
        ,      TO_CHAR(ROUND(SUM(GREATEST(DPM.GROSS, 0)) / 1000), 'FM999,999,999,999,990') AS SUM_GROSS -- ton
        ,      TO_CHAR(ROUND(SUM(GREATEST(DPM.L_CM, 0) * GREATEST(DPM.W_CM, 0) / 10000)), 'FM999,999,999,999,990') AS SUM_SQM -- m2
        FROM DESM_PACKING_MST DPM
        WHERE DPM.PROJECT_NO = #{PROJECT_NO}
	</select>
	
	<select id="getDesmMrrList" parameterType="java.util.Map" resultType="java.util.HashMap">
		/* MaterialMapper.xml -> getDesmMrrList : Material Receiving 목록 조회 */
		SELECT DMH.MRR_HEADER_ID,
	           DMH.MRR_NO,
	           DMH.MRR_NAME,
	           DMH.STATUS,
	           --DMH.DESCRIPTION,
	           --DMH.SUBCONTRACTOR,
	           --DMH.SUBCON_MANAGER,
	           TO_CHAR(DMH.RECEIVED_DATE_FROM, 'YYYY/MM/DD') AS RECEIVED_DATE_FROM,
	           TO_CHAR(DMH.RECEIVED_DATE_TO, 'YYYY/MM/DD') AS RECEIVED_DATE_TO,
	           TO_CHAR(DMH.INSPECTION_DATE_FROM, 'YYYY/MM/DD') AS INSPECTION_DATE_FROM,
	           TO_CHAR(DMH.INSPECTION_DATE_TO, 'YYYY/MM/DD') AS INSPECTION_DATE_TO,
	           TO_CHAR(DMH.PREPARED_DATE, 'YYYY/MM/DD') AS PREPARED_DATE,
               TO_CHAR(DMH.CONFIRMED_DATE, 'YYYY/MM/DD') AS CONFIRMED_DATE,
	           TO_CHAR(DMH.APPROVED_DATE, 'YYYY/MM/DD') AS APPROVED_DATE,
	           
	           DMH.CREATED_BY,
	           TO_CHAR(DMH.CREATION_DATE + CT.OPERATOR / (24 * 60), 'YYYY/MM/DD HH24:MI:SS') AS CREATION_DATE,
	           DMH.LAST_UPDATED_BY,
	           TO_CHAR(DMH.LAST_UPDATE_DATE + CT.OPERATOR / (24 * 60), 'YYYY/MM/DD HH24:MI:SS') AS LAST_UPDATE_DATE,
	           
	           CASE WHEN DMH.PREPARED_DATE IS NOT NULL THEN DU1.USER_NAME END AS PREPARED_BY_NAME,
	           CASE WHEN DMH.CHECKED_DATE IS NOT NULL THEN DU2.USER_NAME END AS CHECKED_BY_NAME,
	           CASE WHEN DMH.CONFIRMED_DATE IS NOT NULL THEN DU3.USER_NAME END AS CONFIRMED_BY_NAME,
	           CASE WHEN DMH.APPROVED_DATE IS NOT NULL THEN DU4.USER_NAME END AS APPROVED_BY_NAME,
	               
	           CASE WHEN DMH.PREPARED_BY IS NOT NULL THEN DMH.PREPARED_BY END AS PREPARED_BY,
	           CASE WHEN DMH.CHECKED_DATE IS NOT NULL THEN DMH.CHECKED_BY END AS CHECKED_BY,
	           CASE WHEN DMH.CONFIRMED_DATE IS NOT NULL THEN DMH.CONFIRMED_BY END AS CONFIRMED_BY,
	           CASE WHEN DMH.APPROVED_DATE IS NOT NULL THEN DMH.APPROVED_BY END AS APPROVED_BY,
	           
	           DMH.REMARK,
	           DMH.ATTACH_GRP_CD,
	             
	           (SELECT COUNT(*)
	              FROM ESAATTH A
	             WHERE A.SYS_ID = 'EMRO'
	               AND A.STS  <![CDATA[ <> ]]>   'D'
	               AND A.GRP_CD = DMH.ATTACH_GRP_CD) AS ATT_CNT
	         , 
				(
					SELECT LISTAGG(INVOICE_NUM, ',') WITHIN GROUP(ORDER BY INVOICE_NUM)
					FROM (
						SELECT DISTINCT ZDI.INVOICE_NUM
		                FROM ZVTS_DESM_INVOICE ZDI,
		                     ZVTS_ITEM_MASTER ZIM,
		                     DESM_MRR_LINE DML2 
		                WHERE 1=1
		                  AND ZDI.PROJECT_NO = ZIM.PROJECT_NO
		                  AND ZDI.TRK_ITEM_SEQ = ZIM.TRK_ITEM_SEQ
		                  AND ZIM.TRK_ITEM_NAME = DML2.TRK_ITEM_NAME
		                  AND ZIM.PROJECT_NO = DMH.PROJECT_NO
		                  AND DMH.MRR_HEADER_ID = DML2.MRR_HEADER_ID
		            )
				) AS INVOICE_NO
	      FROM DESM_MRR_HEADER DMH,
	             (SELECT NVL(TO_NUMBER(MAX(DCD.DTL_NAME_KO)), 0) AS OPERATOR
	                FROM DESM_USER_DEFAULT_COUNTRY DUDC,
	                     DESM_CODE_DTL DCD
	               WHERE DUDC.COUNTRY_CODE = DCD.DTL_CODE
	                 AND DCD.DELEGATE_FLAG = 'N'
	                 AND DUDC.USER_AD = #{USER_AD}) CT,
	             DESM_USER DU1,
	             DESM_USER DU2,
	             DESM_USER DU3,
	             DESM_USER DU4
	       WHERE DMH.PREPARED_BY = DU1.USER_AD(+)
	         AND DMH.CHECKED_BY = DU2.USER_AD(+)
	         AND DMH.CONFIRMED_BY = DU3.USER_AD(+)
	         AND DMH.APPROVED_BY = DU4.USER_AD(+)
		 <if test='STATUS != null and STATUS != ""'>
		   AND DMH.STATUS = #{STATUS}
		 </if>
		 <if test='MRR_NO != null and MRR_NO != ""'>
		   AND UPPER(DMH.MRR_NO) LIKE '%' || UPPER(#{MRR_NO}) || '%'
		 </if>
		 <if test='MRR_NAME != null and MRR_NAME != ""'>
		   AND UPPER(DMH.MRR_NAME) LIKE '%' || UPPER(#{MRR_NAME}) || '%'
		 </if>
		 <if test='RECEIVED_DATE_FROM != null and RECEIVED_DATE_FROM != ""'>
		   AND DMH.RECEIVED_DATE_FROM <![CDATA[ >= ]]>TO_DATE(#{RECEIVED_DATE_FROM}, 'YYYY/MM/DD')
		 </if>
		 <if test='RECEIVED_DATE_TO != null and RECEIVED_DATE_TO != ""'>
		   AND DMH.RECEIVED_DATE_TO <![CDATA[ < ]]> TO_DATE(#{RECEIVED_DATE_TO}, 'YYYY/MM/DD') + 1
		 </if>
		 
		 <if test='INSPECTION_DATE_FROM != null and INSPECTION_DATE_FROM != ""'>
		   AND DMH.INSPECTION_DATE_FROM <![CDATA[ >= ]]>TO_DATE(#{INSPECTION_DATE_FROM}, 'YYYY/MM/DD')
		 </if>
		 <if test='INSPECTION_DATE_TO != null and INSPECTION_DATE_TO != ""'>
		   AND DMH.INSPECTION_DATE_TO <![CDATA[ < ]]> TO_DATE(#{INSPECTION_DATE_TO}, 'YYYY/MM/DD') + 1
		 </if>
		 
		 
		 <if test='PROJECT_NO != null and PROJECT_NO != ""'>
		   AND DMH.PROJECT_NO = #{PROJECT_NO}
		 </if>
		 
		 <if test='INVOICE_NO != null and INVOICE_NO != ""'>
		     AND DMH.MRR_NO IN (
		     			SELECT DISTINCT DMH2.MRR_NO
						  FROM ZVTS_DESM_INVOICE ZDI,
						       ZVTS_ITEM_MASTER ZIM,
						       DESM_MRR_HEADER DMH2,
						       DESM_MRR_LINE DML2 
						WHERE 1=1
						  AND ZDI.PROJECT_NO = ZIM.PROJECT_NO
						  AND ZDI.TRK_ITEM_SEQ = ZIM.TRK_ITEM_SEQ
						  AND ZIM.TRK_ITEM_NAME = DML2.TRK_ITEM_NAME
						  AND ZIM.PROJECT_NO = DMH2.PROJECT_NO
						  AND DMH2.MRR_HEADER_ID = DML2.MRR_HEADER_ID
						  AND DMH2.PROJECT_NO = DMH.PROJECT_NO
						  AND UPPER(ZDI.INVOICE_NUM) LIKE '%' || UPPER(#{INVOICE_NO}) || '%'
		     
		      )
		 </if>
		 
		 <if test='PACKAGE_NO != null and PACKAGE_NO != ""'>
		     AND DMH.MRR_NO IN (
		     			SELECT DISTINCT DMH2.MRR_NO
						  FROM DESM_MRR_HEADER DMH2,
						       DESM_MRR_LINE DML2 
						WHERE 1=1
						  AND DMH2.MRR_HEADER_ID = DML2.MRR_HEADER_ID
						  AND DMH2.PROJECT_NO = DMH.PROJECT_NO
						  AND UPPER(DML2.PACKAGE_NO) LIKE '%' || UPPER(#{PACKAGE_NO}) || '%'
		     
		      )
		 </if>
		 
		 <if test='SHIPMENT_NO != null and SHIPMENT_NO != ""'>
		     AND DMH.MRR_NO IN (
		     			SELECT DISTINCT DMH2.MRR_NO
						  FROM DESM_MRR_HEADER DMH2,
						       DESM_MRR_LINE DML2
						WHERE 1=1
						  AND DMH2.MRR_HEADER_ID = DML2.MRR_HEADER_ID
						  AND UPPER(DML2.SHIPMENT_NO) LIKE '%' || UPPER(#{SHIPMENT_NO}) || '%'
		     
		      )
		 </if>
		 
		ORDER BY DMH.MRR_HEADER_ID DESC

	</select>
	
	<select id="getDesmMrrHeaderData" parameterType="java.util.Map" resultType="java.util.HashMap">
		SELECT 'MRR' || TO_CHAR(SYSDATE,'YYYY') || LPAD(MRR_NO_NUM, 6, '0') AS MRR_NO,
		       SEQ_DESM_MRR_HEADER.NEXTVAL AS MRR_HEADER_ID
		  FROM (SELECT CASE WHEN MAX(MRR_NO) IS NULL THEN 1
		                    ELSE TO_NUMBER(SUBSTR(MAX(MRR_NO), -6)) + 1 END AS MRR_NO_NUM
		          FROM DESM_MRR_HEADER
		         WHERE MRR_NO LIKE 'MRR' || TO_CHAR(SYSDATE,'YYYY') || '%')
	</select>
	
	
	
	<update id="saveDesmMrrLineSave" parameterType="java.util.Map">
		MERGE INTO DESM_MRR_LINE
		USING DUAL
		ON (MRR_LINE_ID = #{MRR_LINE_ID})
		WHEN MATCHED THEN
		     UPDATE SET
		            TRK_ITEM_NAME = #{TRK_ITEM_NAME},
		            PACKING_LIST_NO = #{PACKING_LIST_NO},
		            PACKAGE_NO = #{PACKAGE_NO},
		            DESCRIPTION = #{DESCRIPTION},
		            SHIPMENT_NO = #{SHIPMENT_NO},
		            PACKAGE_TYPE = #{PACKAGE_TYPE},
		            QUANTITY = #{QTY},
		            VISUAL_CHECK = #{VISUAL_CHECK},
		            VISUAL_CHECK_DATE = SYSDATE,
		            VISUAL_CHECKED_BY = #{VISUAL_CHECKED_BY},
		            RECEIVED_DATE = TO_DATE(#{RECEIVED_DATE}, 'YYYY/MM/DD'),
		            REMARKS = #{REMARKS},
		            ATTACH_GRP_CD = #{ATTACH_GRP_CD},
		            FILE_PATH = #{FILE_PATH},
		            
		            LAST_UPDATED_BY = #{USER_AD},
		            LAST_UPDATE_DATE = SYSDATE
		WHEN NOT MATCHED THEN
		     INSERT
		     (MRR_HEADER_ID
		     ,MRR_LINE_ID
		     ,TRK_ITEM_NAME
		     ,PACKING_LIST_NO
		     ,PACKAGE_NO
		     ,DESCRIPTION
		     ,SHIPMENT_NO
		     ,PACKAGE_TYPE
		     ,QUANTITY
		     
		     ,VISUAL_CHECK
		     ,VISUAL_CHECK_DATE
		     ,VISUAL_CHECKED_BY
		     
		     ,RECEIVED_DATE
		     
		     ,REMARKS
		     ,ATTACH_GRP_CD
		     ,FILE_PATH
		     
		     ,CREATED_BY
		     ,CREATION_DATE
		     ,LAST_UPDATED_BY
		     ,LAST_UPDATE_DATE)
		     VALUES
		     (#{MRR_HEADER_ID}
		     ,SEQ_DESM_MRR_LINE.NEXTVAL
		     ,#{TRK_ITEM_NAME}
		     ,#{PACKING_LIST_NO}
		     ,#{PACKAGE_NO}
		     ,#{DESCRIPTION}
		     ,#{SHIPMENT_NO}
		     ,#{PACKAGE_TYPE}
		     
		     ,#{QTY}
		     
		     ,#{VISUAL_CHECK}
		     ,SYSDATE
		     ,#{VISUAL_CHECKED_BY}
		     
		     ,TO_DATE(#{RECEIVED_DATE}, 'YYYY/MM/DD')
		     ,#{REMARKS}
		     
		     ,#{ATTACH_GRP_CD}
		     ,#{FILE_PATH}
		     ,#{USER_AD}
		     ,SYSDATE
		     ,#{USER_AD}
		     ,SYSDATE)
	</update>

	<update id="saveDesmMrrHeaderSave" parameterType="java.util.Map">
		MERGE INTO DESM_MRR_HEADER
		USING DUAL
		ON (MRR_HEADER_ID = #{MRR_HEADER_ID})
		WHEN MATCHED THEN
		     UPDATE SET
		         <if test='PREPARED_BY != null and PREPARED_BY != ""'>
		            PREPARED_BY = #{PREPARED_BY},
		            <if test='STATUS != null and STATUS == "Pre-Confirmed"'>
		            PREPARED_DATE = SYSDATE,
		            </if>
		         </if>
		         <if test='CONFIRMED_BY != null and CONFIRMED_BY != ""'>
		            CONFIRMED_BY = #{CONFIRMED_BY},
		            <if test='STATUS != null and STATUS == "Confirmed"'>
		            CONFIRMED_DATE = SYSDATE,
		            </if>
		         </if>
		         	MRR_NAME = #{MRR_NAME},
		            STATUS = #{STATUS},
		            RECEIVED_DATE_FROM = #{RECEIVED_DATE_FROM},
		            RECEIVED_DATE_TO = #{RECEIVED_DATE_TO},
		            INSPECTION_DATE_FROM = #{INSPECTION_DATE_FROM},
		            INSPECTION_DATE_TO = #{INSPECTION_DATE_TO},
		            ATTACH_GRP_CD = #{ATTACH_GRP_CD},
		            REMARK = #{REMARK},
		            LAST_UPDATED_BY = #{USER_AD},
		            LAST_UPDATE_DATE = SYSDATE
		WHEN NOT MATCHED THEN
		     INSERT
		     (MRR_HEADER_ID
		     ,MRR_NO
	       <if test='PREPARED_BY != null and PREPARED_BY != ""'>
	         ,PREPARED_BY
             <if test='STATUS != null and STATUS == "Pre-Confirmed"'>
	         ,PREPARED_DATE
             </if>
	       </if>
	         ,MRR_NAME
		     ,STATUS
		     ,PROJECT_NO
		     ,RECEIVED_DATE_FROM
		     ,RECEIVED_DATE_TO
		     ,INSPECTION_DATE_FROM
		     ,INSPECTION_DATE_TO
		     ,ATTACH_GRP_CD
		     ,REMARK
		     ,CREATED_BY
		     ,CREATION_DATE
		     ,LAST_UPDATED_BY
		     ,LAST_UPDATE_DATE)
		     VALUES
		     (#{MRR_HEADER_ID}
		     ,#{MRR_NO}
	       <if test='PREPARED_BY != null and PREPARED_BY != ""'>
	         ,#{PREPARED_BY}
             <if test='STATUS != null and STATUS == "Pre-Confirmed"'>
	         ,SYSDATE
             </if>
	       </if>
	         ,#{MRR_NAME}
		     ,#{STATUS}
		     ,#{PROJECT_NO}
		     ,#{RECEIVED_DATE_FROM}
		     ,#{RECEIVED_DATE_TO}
		     ,#{INSPECTION_DATE_FROM}
		     ,#{INSPECTION_DATE_TO}
		     ,#{ATTACH_GRP_CD}
		     ,#{REMARK}
		     ,#{USER_AD}
		     ,SYSDATE
		     ,#{USER_AD}
		     ,SYSDATE)
	</update>
	
	<update id="saveDesmMrrHeaderProjectSave" parameterType="java.util.Map">
	    MERGE INTO DESM_MRR_HEADER DRH
	    USING (SELECT DISTINCT DPM.PROJECT_NO, DRL.RSI_HEADER_ID
	             FROM DESM_PACKING_MST DPM,
	                  DESM_PACKING_DTL DPD,
	                  DESM_MRR_LINE DRL
	            WHERE DPM.PROJECT_NO = DPD.PROJECT_NO
	              AND DPM.TRK_ITEM_NAME = DPD.TRK_ITEM_NAME
	              AND DPM.PACKAGE_NO = DPD.PACKAGE_NO
	              AND DPD.MATERIAL_CODE = DRL.MATERIAL_CODE
	              AND DPM.IS_CONFIRM_MATERIAL = 'Y'
	              AND DRL.RSI_HEADER_ID = #{MRR_HEADER_ID}) T
	    ON (DRH.RSI_HEADER_ID = T.RSI_HEADER_ID)
	    WHEN MATCHED THEN
	         UPDATE SET DRH.PROJECT_NO = T.PROJECT_NO
	</update>
	
	<select id="getDesmMrrHeaderList" parameterType="java.util.Map" resultType="java.util.HashMap">
		SELECT DRH.PROJECT_NO,
		       DRH.MRR_HEADER_ID,
		       DRH.MRR_NO,
		       DRH.MRR_NAME,
		       DRH.STATUS,
		       --DRH.DESCRIPTION,
		       --DRH.SUBCONTRACTOR,
		       --DRH.SUBCON_MANAGER,
		       TO_CHAR(DRH.RECEIVED_DATE_FROM, 'YYYY/MM/DD') AS RECEIVED_DATE_FROM,
		       TO_CHAR(DRH.RECEIVED_DATE_TO, 'YYYY/MM/DD') AS RECEIVED_DATE_TO,
		       TO_CHAR(DRH.INSPECTION_DATE_FROM, 'YYYY/MM/DD') AS INSPECTION_DATE_FROM,
		       TO_CHAR(DRH.INSPECTION_DATE_TO, 'YYYY/MM/DD') AS INSPECTION_DATE_TO,
		       DRH.REMARK,
		       DRH.ATTACH_GRP_CD,
		       TO_CHAR(DRH.PREPARED_DATE + CT.OPERATOR / (24 * 60), 'YYYY/MM/DD HH24:MI:SS') AS PREPARED_DATE,
		       DRH.PREPARED_BY,
		       DU1.USER_NAME AS PREPARED_BY_NAME,
		       TO_CHAR(DRH.CHECKED_DATE + CT.OPERATOR / (24 * 60), 'YYYY/MM/DD HH24:MI:SS') AS CHECKED_DATE,
		       DRH.CHECKED_BY,
		       DU2.USER_NAME AS CHECKED_BY_NAME,
		       TO_CHAR(DRH.CONFIRMED_DATE + CT.OPERATOR / (24 * 60), 'YYYY/MM/DD HH24:MI:SS') AS CONFIRMED_DATE,
		       DRH.CONFIRMED_BY,
		       DU3.USER_NAME AS CONFIRMED_BY_NAME,
		       TO_CHAR(DRH.APPROVED_DATE + CT.OPERATOR / (24 * 60), 'YYYY/MM/DD HH24:MI:SS') AS APPROVED_DATE,
		       DRH.APPROVED_BY,
		       DU4.USER_NAME AS APPROVED_BY_NAME,
		       DRH.ATTACH_GRP_CD
		  FROM DESM_MRR_HEADER DRH,
		       (SELECT NVL(TO_NUMBER(MAX(DCD.DTL_NAME_KO)), 0) AS OPERATOR
		          FROM DESM_USER_DEFAULT_COUNTRY DUDC,
		               DESM_CODE_DTL DCD
		         WHERE DUDC.COUNTRY_CODE = DCD.DTL_CODE
		           AND DCD.DELEGATE_FLAG = 'N'
		           AND DUDC.USER_AD = #{USER_AD}) CT,
		       DESM_USER DU1,
		       DESM_USER DU2,
		       DESM_USER DU3,
		       DESM_USER DU4
		 WHERE DRH.PREPARED_BY = DU1.USER_AD(+)
		   AND DRH.CHECKED_BY = DU2.USER_AD(+)
		   AND DRH.CONFIRMED_BY = DU3.USER_AD(+)
		   AND DRH.APPROVED_BY = DU4.USER_AD(+)
		   AND DRH.MRR_HEADER_ID = #{MRR_HEADER_ID}
	</select>
	
	<select id="getDesmMrrLineList" parameterType="java.util.Map" resultType="java.util.HashMap">
		SELECT ROW_NUMBER() OVER(ORDER BY DRL.MRR_LINE_ID) AS NO,
		       DPM.PROJECT_NO,
			   DRL.MRR_HEADER_ID,
		       DRL.MRR_LINE_ID,
		       DRL.TRK_ITEM_NAME,
		       DRL.PACKING_LIST_NO AS PACKAGE_LIST_NO,
		       DRL.PACKAGE_NO,
		       DRL.DESCRIPTION,
		       DRL.SHIPMENT_NO AS ATTRIBUTE10,
		       DRL.PACKAGE_TYPE,
		       DRL.QUANTITY AS QTY,
		       DRL.VISUAL_CHECK ,
		       DRL.VISUAL_CHECK_DATE ,
		       DRL.VISUAL_CHECKED_BY ,
		       --DRL.STORAGE_LOCATION ,
		       DPM.STORAGE_LOCATION,
		       TO_CHAR(DRL.RECEIVED_DATE, 'YYYY/MM/DD') AS RECEIVED_DATE ,
		       DRL.REMARKS ,
		       DRL.ATTACH_GRP_CD ,
		       DRL.FILE_PATH ,
		       DPM.PROJECT_NO,
		       NVL((SELECT CASE WHEN COUNT(*) = 0 THEN NULL ELSE COUNT(*) END 
				       FROM ESAATTH ATT 
				      WHERE ATT.GRP_CD  = DRL.ATTACH_GRP_CD 
				      AND ATT.STS != 'D'),0)  ATTH_CNT,
		       (SELECT ZDI.INVOICE_NUM
				  FROM ZVTS_DESM_INVOICE ZDI,
				       ZVTS_ITEM_MASTER ZIM
				WHERE 1=1
				  AND ZDI.PROJECT_NO = ZIM.PROJECT_NO
				  AND ZDI.TRK_ITEM_SEQ = ZIM.TRK_ITEM_SEQ
				  AND ZIM.TRK_ITEM_NAME = DRL.TRK_ITEM_NAME
				  AND ZIM.PROJECT_NO = DPM.PROJECT_NO) AS SEL_INVOICE_NUM ,
				  
              CASE WHEN (SELECT COUNT(*)
                           FROM  ESAATTH TH
                           WHERE TH.SYS_ID = 'EMRO'
                             AND TH.GRP_CD = DRL.ATTACH_GRP_CD
                             AND TH.STS   <![CDATA[ <> ]]>   'D' ) = 0 THEN
                           'N'
                   ELSE 'Y'
                   END AS PIC_YN 
		       
		  FROM DESM_PACKING_MST DPM,
		       DESM_MRR_LINE DRL,
		       DESM_MRR_HEADER DML
		 WHERE DPM.PROJECT_NO = DML.PROJECT_NO
		   AND DPM.TRK_ITEM_NAME = DRL.TRK_ITEM_NAME
		   --AND DPM.PACKING_LIST_NO = DRL.PACKING_LIST_NO
		   AND DPM.PACKAGE_NO = DRL.PACKAGE_NO
		   AND DRL.MRR_HEADER_ID = DML.MRR_HEADER_ID
		   --AND DPM.IS_CONFIRM_MATERIAL = 'Y'
		   AND DRL.MRR_HEADER_ID = #{MRR_HEADER_ID}
	</select>
	
	<delete id="deleteDesmMrrDtl" parameterType="java.util.Map">
		DELETE FROM DESM_MRR_LINE
		 WHERE MRR_LINE_ID = #{MRR_LINE_ID}
	</delete>
	
	<update id="saveDesmMrrReject" parameterType="java.util.Map">
		UPDATE DESM_MRR_HEADER
		   SET STATUS = 'Rejected',
		   	   --PREPARED_BY = '',
		   	   PREPARED_DATE = '',
		   	   --CHECKED_BY = '',
		   	   CHECKED_DATE = '',
		   	   --CONFIRMED_BY = '',
		   	   CONFIRMED_DATE = '',
		   	   --APPROVED_BY = '',
		   	   APPROVED_DATE = ''
			 <if test='REMARK != null and REMARK != ""'>
			   ,REMARK = #{REMARK}
			 </if>
		 WHERE MRR_HEADER_ID = #{MRR_HEADER_ID}
	</update>
	
	<select id="getDeleteDesmMrrList" parameterType="java.util.Map" resultType="java.util.HashMap">
		SELECT DRL.MRR_LINE_ID
		  FROM DESM_MRR_HEADER DRH,
		       DESM_MRR_LINE DRL
		 WHERE DRH.MRR_HEADER_ID = DRL.MRR_HEADER_ID
		   AND DRH.MRR_HEADER_ID = #{MRR_HEADER_ID}
	</select>
	
	<delete id="deleteDesmMrrMst" parameterType="java.util.Map">
		DELETE
		  FROM DESM_MRR_HEADER DUR
		 WHERE MRR_HEADER_ID = #{MRR_HEADER_ID}
	</delete>
	
	<delete id="deleteDesmMrrDtlAll" parameterType="java.util.Map">
		DELETE
		  FROM DESM_MRR_LINE
		 WHERE MRR_HEADER_ID = #{MRR_HEADER_ID}
	</delete>
	
	<select id="getMailMrrMstData" parameterType="java.util.Map" resultType="java.util.HashMap">
		SELECT DRH.MRR_NO,
		       DRH.MRR_NAME,
		       DRH.LAST_UPDATED_BY,
		       DRH.STATUS,
		       TO_CHAR(DRH.RECEIVED_DATE_FROM, 'YYYY-MM-DD') AS RECEIVED_DATE_FROM,
		       TO_CHAR(DRH.RECEIVED_DATE_TO, 'YYYY-MM-DD') AS RECEIVED_DATE_TO,
		       TO_CHAR(DRH.INSPECTION_DATE_FROM, 'YYYY-MM-DD') AS INSPECTION_DATE_FROM,
		       TO_CHAR(DRH.INSPECTION_DATE_TO, 'YYYY-MM-DD') AS INSPECTION_DATE_TO,
		       DRH.PREPARED_BY,
		       TO_CHAR(DRH.PREPARED_DATE, 'YYYY-MM-DD') AS PREPARED_DATE,
		       --DRH.DESCRIPTION,
		       DRH.REMARK,
	           PPAI.SEGMENT1 AS PROJECT_NO,
	           PPAI.NAME AS PROJECT_NAME,
		       (SELECT COUNT(*) FROM DESM_MRR_LINE DRL WHERE DRL.MRR_HEADER_ID = DRH.MRR_HEADER_ID) AS COUNT_MRR_LINE
		  FROM DESM_MRR_HEADER DRH,
		  	   PA_PROJECTS_ALL_INT PPAI
		 WHERE DRH.PROJECT_NO = PPAI.SEGMENT1
		   AND DRH.MRR_HEADER_ID = #{MRR_HEADER_ID}
	</select>
	
	<select id="getMailMrrDtlData" parameterType="java.util.Map" resultType="java.util.HashMap">
		SELECT *
      FROM (SELECT   DRL.PACKAGE_NO,
                     DRL.PACKAGE_TYPE,
                     DRL.DESCRIPTION,
                     DRL.QUANTITY AS QTY,
                     (SELECT ZDI.INVOICE_NUM
                      FROM ZVTS_DESM_INVOICE ZDI,
                           ZVTS_ITEM_MASTER ZIM
                      WHERE 1=1
                        AND ZDI.PROJECT_NO = ZIM.PROJECT_NO
                        AND ZDI.TRK_ITEM_SEQ = ZIM.TRK_ITEM_SEQ
                        AND ZIM.TRK_ITEM_NAME = DRL.TRK_ITEM_NAME
                        AND ZIM.PROJECT_NO = DPM.PROJECT_NO) AS INVOICE_NO,
                     DRL.SHIPMENT_NO,
                     TO_CHAR(DRL.RECEIVED_DATE, 'YYYY-MM-DD') AS RECEIVED_DATE,
                     DRL.VISUAL_CHECK,
                     DPM.STORAGE_LOCATION AS LOCATION,
                     DRL.REMARKS AS REMARK,
                     CASE WHEN (SELECT COUNT(*)
                                  FROM  ESAATTH TH
                                  WHERE TH.SYS_ID = 'EMRO'
                                    AND TH.GRP_CD = DRL.ATTACH_GRP_CD
                                    AND TH.STS   <![CDATA[ <> ]]>   'D' ) = 0 THEN
                                  'N'
                          ELSE 'Y'
                          END AS PIC_YN ,   
                                    
                     ROW_NUMBER() OVER(ORDER BY DRL.MRR_LINE_ID) AS NO
                FROM ZVTS_ITEM_MASTER ZIM,
                     DESM_PACKING_MST DPM,
                     DESM_MRR_LINE DRL,
                     DESM_MRR_HEADER DRH
               WHERE ZIM.TRK_ITEM_NAME = DPM.TRK_ITEM_NAME
                 AND ZIM.PROJECT_NO = DRH.PROJECT_NO
                 AND DPM.PACKAGE_NO = DRL.PACKAGE_NO
                 AND DPM.IS_CONFIRM_MATERIAL = 'Y'
                 
                 AND DRL.TRK_ITEM_NAME = DPM.TRK_ITEM_NAME
                 AND DRL.PACKING_LIST_NO = DPM.PACKAGE_LIST_NO
                 AND DRL.PACKAGE_NO = DPM.PACKAGE_NO
                 
                 AND DRL.MRR_HEADER_ID = DRH.MRR_HEADER_ID
                 AND DRH.PROJECT_NO = ZIM.PROJECT_NO
                 AND DRH.PROJECT_NO = DPM.PROJECT_NO
		         AND DRL.MRR_HEADER_ID = #{MRR_HEADER_ID})
		 WHERE NO <![CDATA[ <= ]]> 10
	</select>
	
	
	<select id="getMailMrrReceiver11111" parameterType="java.util.Map" resultType="java.util.HashMap">
		SELECT DISTINCT
		       DU.USER_AD,
		       NVL(DU.MAIL, ZE.ZEMAIL) AS EMAIL
		  FROM DESM_USER DU,
		       ZVTS_EMP ZE,
		       (SELECT DISTINCT
		               CASE WHEN STD.LV = 2 AND CHC_BY_STD.ROLE_SEQ IS NOT NULL THEN CHC_BY_STD.USER_AD
		                    WHEN STD.LV = 2 AND CHC_BY_STD.ROLE_SEQ IS NULL THEN STD.USER_AD
		                    WHEN STD.LV = 3 AND CON_BY_STD.USER_AD IS NOT NULL THEN CON_BY_STD.USER_AD
		                    WHEN STD.LV = 3 AND CON_BY_STD.USER_AD IS NULL THEN STD.USER_AD
		                    WHEN STD.LV = 1 AND STD.STATUS != 'Rejected' AND REQ_BY_STD.USER_AD IS NOT NULL THEN REQ_BY_STD.USER_AD
		                    WHEN STD.LV = 1 AND STD.STATUS != 'Rejected' AND REQ_BY_STD.USER_AD IS NULL THEN STD.USER_AD
		                    ELSE STD.USER_AD END AS USER_AD
		          FROM (SELECT TD.USER_AD,
		                       TD.LV,
		                       TD.STATUS,
		                       CASE WHEN DR.ROLE_SEQ IS NOT NULL THEN DR.ROLE_SEQ END AS ROLE_SEQ
		                  FROM (SELECT *
		                          FROM (SELECT CASE WHEN LV.LV = 1 THEN DRH.PREPARED_BY
		                                            WHEN LV.LV = 2 THEN DRH.CHECKED_BY
		                                            WHEN LV.LV = 3 THEN DRH.CONFIRMED_BY
		                                            WHEN LV.LV = 4 THEN DRH.APPROVED_BY
		                                       END AS USER_AD,
		                                       DRH.STATUS,
		                                       LV.LV
		                                  FROM DESM_MRR_HEADER DRH,
		                                       (SELECT LEVEL AS LV FROM DUAL CONNECT BY LEVEL <![CDATA[ < ]]> 5) LV
		                                 WHERE DRH.MRR_HEADER_ID = #{MRR_HEADER_ID})
		                         WHERE ((STATUS = 'Pre-Checked' AND LV = 2) OR
		                                (STATUS = 'Pre-Confirmed' AND LV = 3) OR
		                                (STATUS = 'Pre-Approved' AND LV = 4) OR
		                                (STATUS = 'Approved' AND LV = 1) OR
		                                (STATUS = 'Rejected' AND ((#{STATUS} = 'Pre-Checked' AND LV <![CDATA[ < ]]> 2) OR
		                                                          (#{STATUS} = 'Pre-Confirmed' AND LV <![CDATA[ < ]]> 3) OR
		                                                          (#{STATUS} = 'Pre-Approved' AND LV <![CDATA[ < ]]> 4))))) TD,
		                       DESM_USER_ROLE DUR,
		                       DESM_ROLE DR
		                 WHERE TD.USER_AD = DUR.USER_AD
		                   AND DUR.ROLE_SEQ = DR.ROLE_SEQ(+)
		                   AND DR.SITE_YN(+) = 'Y') STD,
		               (SELECT DUR.ROLE_SEQ,
		                       DUR.USER_AD,
		                       2 AS LV
		                  FROM DESM_USER_ROLE DUR,
		                       DESM_ROLE DR,
	                           DESM_USER_PROJECT_ALL DUPA,
	                           DESM_USER_PROJECT DUP
		                 WHERE DUR.ROLE_SEQ = DR.ROLE_SEQ
	                       AND DUR.USER_AD = DUPA.USER_AD(+)
	                       AND DUR.USER_AD = DUP.USER_AD(+)
	                       AND (DUPA.USER_AD IS NOT NULL OR DUP.PROJECT_CODE = (SELECT A.PROJECT_NO FROM DESM_MRR_HEADER A WHERE A.MRR_HEADER_ID = #{MRR_HEADER_ID}))
		                   AND DR.SITE_YN ='Y') CHC_BY_STD,
		               (SELECT '' AS USER_AD,
		                       3 AS LV
		                  FROM DUAL
		                UNION
		                SELECT DUR.USER_AD,
		                       3 AS LV
		                  FROM DESM_USER_ROLE DUR,
	                           DESM_USER_PROJECT_ALL DUPA,
	                           DESM_USER_PROJECT DUP
		                 WHERE DUR.USER_AD = DUPA.USER_AD(+)
	                       AND DUR.USER_AD = DUP.USER_AD(+)
	                       AND (DUPA.USER_AD IS NOT NULL OR DUP.PROJECT_CODE = (SELECT A.PROJECT_NO FROM DESM_MRR_HEADER A WHERE A.MRR_HEADER_ID = #{MRR_HEADER_ID}))
		                   AND DUR.ROLE_SEQ = 109) CON_BY_STD,
		               (SELECT '' AS USER_AD,
		                       1 AS LV
		                  FROM DUAL
		                UNION
		                SELECT DUR.USER_AD,
		                       1 AS LV
		                  FROM DESM_USER_ROLE DUR,
	                           DESM_USER_PROJECT_ALL DUPA,
	                           DESM_USER_PROJECT DUP
		                 WHERE DUR.USER_AD = DUPA.USER_AD(+)
	                       AND DUR.USER_AD = DUP.USER_AD(+)
	                       AND (DUPA.USER_AD IS NOT NULL OR DUP.PROJECT_CODE = (SELECT A.PROJECT_NO FROM DESM_MRR_HEADER A WHERE A.MRR_HEADER_ID = #{MRR_HEADER_ID}))
		                   AND DUR.ROLE_SEQ = 191) REQ_BY_STD
		         WHERE STD.ROLE_SEQ = CHC_BY_STD.ROLE_SEQ(+)
		           AND STD.LV = CHC_BY_STD.LV(+)
		           AND STD.LV = CON_BY_STD.LV(+)
		           AND STD.LV = REQ_BY_STD.LV(+)) USR
		 WHERE DU.USER_AD = USR.USER_AD
		   AND DU.USER_AD = ZE.AD_USER_ID(+)
		   AND ZE.ZSTATUS_TYPE(+) = '재직'
		   AND (DU.MAIL IS NOT NULL OR ZE.ZEMAIL IS NOT NULL)
	</select>
	
	<select id="getMailMrrReceiver" parameterType="java.util.Map" resultType="java.util.HashMap">
		SELECT DISTINCT
		       DU.USER_AD,
		       NVL(DU.MAIL, ZE.ZEMAIL) AS EMAIL
		  FROM DESM_USER DU,
		       ZVTS_EMP ZE,
		       (SELECT DISTINCT
		               CASE WHEN STD.LV = 2 AND CON_BY_STD.USER_AD IS NOT NULL THEN CON_BY_STD.USER_AD
		                    WHEN STD.LV = 2 AND CON_BY_STD.USER_AD IS NULL THEN STD.USER_AD
		                    WHEN STD.LV = 1 AND STD.STATUS != 'Rejected' AND PREPARED_BY_STD.USER_AD IS NOT NULL THEN PREPARED_BY_STD.USER_AD
		                    WHEN STD.LV = 1 AND STD.STATUS != 'Rejected' AND PREPARED_BY_STD.USER_AD IS NULL THEN STD.USER_AD
		                    ELSE STD.USER_AD END AS USER_AD
		          FROM (SELECT TD.USER_AD,
		                       TD.LV,
		                       TD.STATUS,
		                       CASE WHEN DR.ROLE_SEQ IS NOT NULL THEN DR.ROLE_SEQ END AS ROLE_SEQ
		                  FROM (SELECT *
		                          FROM (SELECT CASE WHEN LV.LV = 1 THEN DRH.PREPARED_BY
		                                            WHEN LV.LV = 2 THEN DRH.CONFIRMED_BY
		                                       END AS USER_AD,
		                                       DRH.STATUS,
		                                       LV.LV
		                                  FROM DESM_MRR_HEADER DRH,
		                                       (SELECT LEVEL AS LV FROM DUAL CONNECT BY LEVEL  <![CDATA[ < ]]> 3) LV
		                                 WHERE DRH.MRR_HEADER_ID = #{MRR_HEADER_ID})
		                         WHERE ((STATUS = 'Confirmed' AND LV = 1) OR
		                                (STATUS = 'Pre-Confirmed' AND LV = 2) OR
		                                    
		                                (STATUS = 'Rejected' AND ((#{STATUS} = 'Pre-Confirmed' AND LV <![CDATA[ < ]]> 2))))) TD,
		                       DESM_USER_ROLE DUR,
		                       DESM_ROLE DR
		                 WHERE TD.USER_AD = DUR.USER_AD
		                   AND DUR.ROLE_SEQ = DR.ROLE_SEQ(+)
		                   AND DR.SITE_YN(+) = 'Y') STD,
		                       
		                --Confirm 요청시  mail      
		               (SELECT '' AS USER_AD,
		                       2 AS LV
		                  FROM DUAL
		                UNION
		                SELECT DUR.USER_AD,
		                       2 AS LV
		                  FROM DESM_USER_ROLE DUR,
		                         DESM_USER_PROJECT_ALL DUPA,
		                         DESM_USER_DEFAULT_PROJECT DUP
		                 WHERE DUR.USER_AD = DUPA.USER_AD(+)
		                     AND DUR.USER_AD = DUP.USER_AD(+)
		                     AND (DUPA.USER_AD IS NOT NULL OR DUP.PROJECT_CODE = (SELECT A.PROJECT_NO FROM DESM_MRR_HEADER A WHERE A.MRR_HEADER_ID = #{MRR_HEADER_ID}))
		                   AND DUR.ROLE_SEQ = 109) CON_BY_STD,
		                       
		               --reject/ Confirm 완료시 요청자에게 mail       
		               (SELECT '' AS USER_AD,
		                       1 AS LV
		                  FROM DUAL
		                ) PREPARED_BY_STD
		                       
		         WHERE 1=1
		           AND STD.LV = CON_BY_STD.LV(+)
		           AND STD.LV = PREPARED_BY_STD.LV(+)) USR
		 WHERE DU.USER_AD = USR.USER_AD
		   AND DU.USER_AD = ZE.AD_USER_ID(+)
		   AND ZE.ZSTATUS_TYPE(+) = '재직'
		   AND (DU.MAIL IS NOT NULL OR ZE.ZEMAIL IS NOT NULL)
	</select>
	
	<select id="getIdsmOsSummaryMrrList" parameterType="java.util.Map" resultType="java.util.HashMap">
		/* MaterialMapper.xml -> gentIdsmOsSummaryMrrList : Package List 조회 */
        SELECT DPM.PACKAGE_NO
        ,      NVL(DPM.IS_CONFIRM_MATERIAL, 'N') AS IS_CONFIRM_MATERIAL
        ,      DPM.PACKAGE_LIST_NO
        ,      DPM.DESCRIPTION
        ,      DPM.PACKAGE_TYPE
        ,      TO_CHAR(DPM.L_CM, 'FM999,999,999,999,999') AS L_CM
        ,      TO_CHAR(DPM.W_CM, 'FM999,999,999,999,999') AS W_CM
        ,      TO_CHAR(DPM.H_CM, 'FM999,999,999,999,999') AS H_CM
        ,      TO_CHAR(DPM.VOLUME, 'FM999,999,999,999,990.0') AS VOLUME
        ,      TO_CHAR(DPM.NET, 'FM999,999,999,999,990.0') AS NET
        ,      TO_CHAR(DPM.GROSS, 'FM999,999,999,999,990.0') AS GROSS
        ,      DPM.REMARKS
        ,      DPM.COUNTRY
        ,      DPM.TRK_ITEM_NAME
        ,      DPM.PROJECT_NO
        ,      DPM.REPORT_SHORT_QTY
        ,      DPM.REPORT_OVER_QTY
        ,      DPM.REPORT_DMG_QTY
        ,      DPM.REPORT_MISSING_QTY
        ,      CASE WHEN DPM.REPORT_SHORT = 'Y' THEN 1 ELSE 0 END AS REPORT_SHORT
        ,      CASE WHEN DPM.REPORT_OVER = 'Y' THEN 1 ELSE 0 END AS REPORT_OVER
        ,      CASE WHEN DPM.REPORT_DMG = 'Y' THEN 1 ELSE 0 END AS REPORT_DMG
        ,      CASE WHEN DPM.REPORT_MISSING = 'Y' THEN 1 ELSE 0 END AS REPORT_MISSING
        ,      DPM.REPORT_LOST
        ,      DPM.REPORT_DESCRIPTION
        ,      DPM.HAZARDOUS_MATERIAL
        ,      DPM.QTY
        ,      DPM.REMARK
        ,      DPM.VENDOR
        ,      DPM.OLD_INF_OF_VENDOR
        ,      TO_CHAR(DPM.RECEIVED_DATE, 'YYYY-MM-DD') AS RECEIVED_DATE
        ,      DPM.STORAGE_LOCATION
        ,      DPM.SUB_CONTRACTOR
        ,      TO_CHAR(DPM.CONFIRM_DATE, 'YYYY/MM/DD') AS CONFIRM_DATE
        ,      T.SEL_INVOICE_NUM
        ,      T.ATTRIBUTE3
        ,      T.ATTRIBUTE9
        ,      T.ATTRIBUTE10
        ,      TO_CHAR( DPM.RECEIPT_DATE, 'YYYY/MM/DD') AS RECEIPT_DATE
        ,      CASE WHEN (SELECT COUNT(*)
                          FROM DESM_PACKING_DTL DETAIL
                          WHERE DETAIL.PROJECT_NO = UPPER(#{PROJECT_NO})
                          AND DETAIL.PACKAGE_NO = DPM.PACKAGE_NO)
                       = (SELECT COUNT(*)
                          FROM DESM_PACKING_DTL DETAIL
                          WHERE DETAIL.PROJECT_NO = UPPER(#{PROJECT_NO})
                          AND DETAIL.PACKAGE_NO = DPM.PACKAGE_NO
                          AND NVL(DETAIL.IN_QTY, 0) - NVL(DETAIL.OUT_QTY, 0) + NVL(DETAIL.RETURN_QTY, 0) = 0)
                     THEN 'CLOSE'
                     WHEN (SELECT COUNT(*)
                          FROM DESM_PACKING_DTL DETAIL
                          WHERE DETAIL.PROJECT_NO = UPPER(#{PROJECT_NO})
                          AND DETAIL.PACKAGE_NO = DPM.PACKAGE_NO
                          AND NVL(DETAIL.IN_QTY, 0) - NVL(DETAIL.OUT_QTY, 0) + NVL(DETAIL.RETURN_QTY, 0) = 0) > 0
                     THEN 'PARTIALLY'
                     ELSE ''
               END AS PACKAGE_STATUS
        ,      (SELECT COUNT(*)
                FROM DESM_PACKING_DTL DETAIL
                WHERE DETAIL.PROJECT_NO = UPPER(#{PROJECT_NO})
                AND DETAIL.PACKAGE_NO = DPM.PACKAGE_NO)
                || '/' ||
               (SELECT COUNT(*)
                FROM DESM_PACKING_DTL DETAIL
                WHERE DETAIL.PROJECT_NO = UPPER(#{PROJECT_NO})
                AND DETAIL.PACKAGE_NO = DPM.PACKAGE_NO
                AND NVL(DETAIL.IN_QTY, 0) - NVL(DETAIL.OUT_QTY, 0) + NVL(DETAIL.RETURN_QTY, 0) = 0) AS OUT_STATUS
        ,      (SELECT SUM(DETAIL.IN_QTY)
                FROM DESM_PACKING_DTL DETAIL
                WHERE DETAIL.PROJECT_NO = UPPER(#{PROJECT_NO})
                AND DETAIL.PACKAGE_NO = DPM.PACKAGE_NO)
                || '/' ||
               (SELECT SUM(NVL(DETAIL.OUT_QTY, 0) - NVL(DETAIL.RETURN_QTY, 0))
                FROM DESM_PACKING_DTL DETAIL
                WHERE DETAIL.PROJECT_NO = UPPER(#{PROJECT_NO})
                AND DETAIL.PACKAGE_NO = DPM.PACKAGE_NO
                ) AS OUT_STATUS_QTY
        ,      (SELECT TO_CHAR(MAX(DRO.HANDOVER_DATE), 'YYYY/MM/DD')
                FROM DESM_PACKING_DTL DETAIL
                ,    DESM_RSI_LINE DRL
                ,    DESM_RSI_OUTGOING DRO
                WHERE DETAIL.PROJECT_NO = UPPER(#{PROJECT_NO})
                AND DETAIL.PACKAGE_NO = DPM.PACKAGE_NO
                AND DETAIL.MATERIAL_CODE = DRL.MATERIAL_CODE
                AND DRL.RSI_LINE_ID = DRO.RSI_LINE_ID
               ) AS LAST_OUTGOING_DATE
        ,      ROUND(L_CM * W_CM / 10000, 1) AS SQM
        ,      TO_CHAR(DPM.LOC_UPDATE_DATE, 'YYYY/MM/DD') AS LOC_UPDATE_DATE
        ,      DPM.LOC_UPDATED_BY
        ,      (SELECT SUM(DETAIL.IN_QTY)
                FROM DESM_PACKING_DTL DETAIL
                WHERE DETAIL.PROJECT_NO = UPPER(#{PROJECT_NO}) 
                AND DETAIL.PACKAGE_NO = DPM.PACKAGE_NO) AS TOT_QTY
        FROM (SELECT ZIM.TRK_ITEM_SEQ
              ,      ZIM.TRK_ITEM_NAME
              ,      ZIM.TRK_ITEM_GROUP
              ,      ZIM.PROJECT_ID
              ,      ZIM.PROJECT_NO
              ,      ZIM.INVOICE_NUM
              ,      ZIM.ATTRIBUTE3
              ,      ZIM.ATTRIBUTE9
              ,      ZIM.ATTRIBUTE10
              ,      CASE WHEN DI.CNT = 1 THEN DI.INVOICE_NUM
                          WHEN DI.CNT > 1 THEN DI.INVOICE_NUM || ' 외 ' || DI.CALC_CNT || '건'
                     END AS SEL_INVOICE_NUM
              FROM ZVTS_ITEM_MASTER ZIM
              ,    PA_PROJECTS_ALL_INT PPA
              ,    (SELECT ZDI.TRK_ITEM_SEQ
              ,      COUNT(*) AS CNT
              ,      COUNT(*) - 1 AS CALC_CNT
              ,      MAX(ZDI.INVOICE_NUM) AS INVOICE_NUM
              FROM ZVTS_DESM_INVOICE ZDI
              GROUP BY ZDI.TRK_ITEM_SEQ) DI
              WHERE ZIM.PROJECT_ID = PPA.PROJECT_ID
              AND ZIM.TRK_ITEM_SEQ = DI.TRK_ITEM_SEQ(+)
              AND ZIM.PROJECT_NO = UPPER(#{PROJECT_NO})
              START WITH ZIM.TRK_ITEM_GROUP IS NULL
              CONNECT BY PRIOR ZIM.TRK_ITEM_SEQ = ZIM.TRK_ITEM_GROUP
             ) T
        ,    DESM_PACKING_MST DPM
        WHERE T.TRK_ITEM_NAME = DPM.TRK_ITEM_NAME
        AND T.PROJECT_NO = DPM.PROJECT_NO
        AND NOT EXISTS (SELECT 1
                         FROM DESM_MRR_LINE DML,
                              DESM_MRR_HEADER DMH
                        WHERE 1=1
                          AND DMH.MRR_HEADER_ID = DML.MRR_HEADER_ID
                          AND DMH.PROJECT_NO = DPM.PROJECT_NO
                          AND DML.TRK_ITEM_NAME = DPM.TRK_ITEM_NAME
                          AND DML.PACKING_LIST_NO = DPM.PACKAGE_LIST_NO
                          AND DML.PACKAGE_NO = DPM.PACKAGE_NO)
		<if test='INVOICE_NO != null and INVOICE_NO != ""'>
			AND UPPER(T.SEL_INVOICE_NUM) LIKE '%' || UPPER(#{INVOICE_NO}) || '%'
		</if>
        <if test='PACKAGE_LIST_NO != null and PACKAGE_LIST_NO !=""'>
        	AND UPPER(DPM.PACKAGE_LIST_NO) LIKE '%' || UPPER(#{PACKAGE_LIST_NO}) || '%'
        </if>
        <if test='PACKAGE_NO != null and PACKAGE_NO !=""'>
        	AND UPPER(DPM.PACKAGE_NO) LIKE '%' || UPPER(#{PACKAGE_NO}) || '%'
        </if>
        <if test='DESCRIPTION != null and DESCRIPTION !=""'>
        	AND UPPER(DPM.DESCRIPTION) LIKE '%' || UPPER(#{DESCRIPTION}) || '%'
        </if>
        <if test='IS_CONFIRM_MATERIAL != null and IS_CONFIRM_MATERIAL !=""'>
        	AND NVL(DPM.IS_CONFIRM_MATERIAL, 'N') = #{IS_CONFIRM_MATERIAL}
        </if>
        -- AND NVL(DPM.IS_CONFIRM_MATERIAL, 'N') = 'Y'
       	<choose>
       		<when test='RECEIPTED == "Y"'>
       		AND DPM.RECEIPT_DATE IS NOT NULL
       		</when>
       		<when test='RECEIPTED == "N"'>
       		AND DPM.RECEIPT_DATE IS NULL
       		</when>
       	</choose>
		<if test='START_RECEIPT_DATE != null and START_RECEIPT_DATE != ""'>
		   AND DPM.RECEIPT_DATE >= TO_DATE(#{START_RECEIPT_DATE}, 'YYYY/MM/DD')
		 </if>
		 <if test='END_RECEIPT_DATE != null and END_RECEIPT_DATE != ""'>
		   AND DPM.RECEIPT_DATE <![CDATA[ < ]]> TO_DATE(#{END_RECEIPT_DATE}, 'YYYY/MM/DD') + 1
		 </if>
        <if test='ATTRIBUTE10 != null and ATTRIBUTE10 !=""'>
        	AND T.ATTRIBUTE10 = #{ATTRIBUTE10}
        </if>
        <if test='REMARK != null and REMARK !=""'>
        	AND UPPER(DPM.REMARK) LIKE '%' || UPPER(#{REMARK}) || '%'
        </if>
        <if test='VENDOR != null and VENDOR !=""'>
        	AND UPPER(T.ATTRIBUTE3) LIKE '%' || UPPER(#{VENDOR}) || '%'
        </if>
        <if test='SEQUENCE != null and SEQUENCE !=""'>
        	AND T.ATTRIBUTE9 = #{SEQUENCE}
        </if>
		<if test='LOCATION_LIST != null'>
			AND DPM.STORAGE_LOCATION IN
			<foreach collection="LOCATION_LIST" item="list" separator="," open="(" close=")">
				#{list.LOCATION}
			</foreach>
		</if>
	    ORDER BY T.SEL_INVOICE_NUM, DPM.PACKAGE_NO
	</select>
	
	<select id="getDesmMirList" parameterType="java.util.Map" resultType="java.util.HashMap">
		WITH WITH_ZVTS_ITEM_INFO AS (
			SELECT WZIM.TRK_ITEM_NAME
	        ,      WZIM.ATTRIBUTE10 AS SHIPMENT_NO
	        ,      WZIM.ATTRIBUTE9 AS SEQUENCE_NO
	        ,      WZIM.ATTRIBUTE3 AS SUPPLIER
	        ,      WZDI.INVOICE_NUM
	        ,      WDMH.MIR_HEADER_ID
	        ,      WDML.MIR_LINE_ID
	        ,      WDML.PACKING_LIST_NO
	        ,      WDML.PACKAGE_NO
	        ,      WDML.PO_NO
	        FROM DESM_MIR_HEADER WDMH
	        ,    DESM_MIR_LINE   WDML
	        ,    ZVTS_ITEM_MASTER WZIM
	        ,    (SELECT ZDI.TRK_ITEM_SEQ
	              ,      COUNT(*) AS CNT
	              ,      COUNT(*) - 1 AS CALC_CNT
	              ,      MAX(ZDI.INVOICE_NUM) AS INVOICE_NUM
	              FROM ZVTS_DESM_INVOICE ZDI
	              GROUP BY ZDI.TRK_ITEM_SEQ
	             ) WZDI
	        WHERE WDMH.MIR_HEADER_ID = WDML.MIR_HEADER_ID
	        AND   WDMH.PROJECT_NO = WZIM.PROJECT_NO
	        AND   WDML.TRK_ITEM_NAME = WZIM.TRK_ITEM_NAME
	        AND   WZIM.TRK_ITEM_SEQ = WZDI.TRK_ITEM_SEQ(+)
	        AND   WZIM.PROJECT_NO = #{PROJECT_NO}
		)
		SELECT DMH.MIR_HEADER_ID,
	           DMH.MIR_NO,
	           DMH.MIR_NAME,
	           DMH.PROJECT_NO,
	           DMH.STATUS,
	           TO_CHAR(DMH.PREPARED_DATE, 'YYYY/MM/DD') AS PREPARED_DATE,
	           TO_CHAR(DMH.CHECKED1_DATE, 'YYYY/MM/DD') AS CHECKED1_DATE,
	           TO_CHAR(DMH.CHECKED2_DATE, 'YYYY/MM/DD') AS CHECKED2_DATE,
	           TO_CHAR(DMH.CHECKED3_DATE, 'YYYY/MM/DD') AS CHECKED3_DATE,
	           TO_CHAR(DMH.RECEIVED_DATE_FROM, 'YYYY/MM/DD') AS RECEIVED_DATE_FROM,
	           TO_CHAR(DMH.RECEIVED_DATE_TO, 'YYYY/MM/DD') AS RECEIVED_DATE_TO,
	           TO_CHAR(DMH.INSPECTION_DATE_FROM, 'YYYY/MM/DD') AS INSPECTION_DATE_FROM,
	           TO_CHAR(DMH.INSPECTION_DATE_TO, 'YYYY/MM/DD') AS INSPECTION_DATE_TO,
	           
	           TO_CHAR(DMH.RECEIVED_DATE_FROM, 'YYYY/MM/DD') || ' ~ ' || TO_CHAR(DMH.RECEIVED_DATE_TO, 'YYYY/MM/DD') AS RECEIVED_DATE_PERIOD,
	           CASE WHEN DMH.INSPECTION_DATE_FROM IS NULL AND DMH.INSPECTION_DATE_TO IS NULL THEN ''
	                WHEN DMH.INSPECTION_DATE_FROM IS NULL AND DMH.INSPECTION_DATE_TO IS NOT NULL THEN TO_CHAR(DMH.INSPECTION_DATE_TO, 'YYYY-MM-DD')
	                WHEN DMH.INSPECTION_DATE_FROM IS NOT NULL AND DMH.INSPECTION_DATE_TO IS NULL THEN TO_CHAR(DMH.INSPECTION_DATE_FROM, 'YYYY-MM-DD')
	                ELSE TO_CHAR(DMH.INSPECTION_DATE_FROM, 'YYYY-MM-DD') || ' ~ ' || TO_CHAR(DMH.INSPECTION_DATE_TO, 'YYYY-MM-DD')
	           END AS INPECTION_DATE_PERIOD,
	           
	           DMH.INSPECTION_LOCATION,
	           DMH.RESULT_OF_INSPECTION,
	           DMH.CREATED_BY,
	           TO_CHAR(DMH.CREATION_DATE + CT.OPERATOR / (24 * 60), 'YYYY/MM/DD HH24:MI:SS') AS CREATION_DATE,
	           DMH.LAST_UPDATED_BY,
	           TO_CHAR(DMH.LAST_UPDATE_DATE + CT.OPERATOR / (24 * 60), 'YYYY/MM/DD HH24:MI:SS') AS LAST_UPDATE_DATE,
	           CASE WHEN DMH.PREPARED_DATE IS NOT NULL THEN DU1.USER_NAME END AS PREPARED_BY_NAME,
	           CASE WHEN DMH.CHECKED1_DATE IS NOT NULL THEN DU2.USER_NAME END AS CHECKED1_BY_NAME,
	           CASE WHEN DMH.CHECKED2_DATE IS NOT NULL THEN DU3.USER_NAME END AS CHECKED2_BY_NAME,
	           CASE WHEN DMH.CHECKED3_DATE IS NOT NULL THEN DU4.USER_NAME END AS CHECKED3_BY_NAME,
	           CASE WHEN DMH.PREPARED_BY IS NOT NULL THEN DMH.PREPARED_BY END AS PREPARED_BY,
	           CASE WHEN DMH.CHECKED1_BY IS NOT NULL THEN DMH.CHECKED1_BY END AS CHECKED1_BY,
	           CASE WHEN DMH.CHECKED2_BY IS NOT NULL THEN DMH.CHECKED2_BY END AS CHECKED2_BY,
	           CASE WHEN DMH.CHECKED3_BY IS NOT NULL THEN DMH.CHECKED3_BY END AS CHECKED3_BY,
	           DMH.REMARKS,
	           DMH.CLIENT_COMMENTS,
	           DMH.OSDM_NAME,
	           DMH.CATEGORY,
	           DMH.ATTACH_GRP_CD,
	           (SELECT COUNT(*)
	              FROM ESAATTH A
	             WHERE A.SYS_ID = 'EMRO'
	               AND A.STS  <![CDATA[ <> ]]>   'D'
	               AND A.GRP_CD = DMH.ATTACH_GRP_CD) AS ATT_CNT,
	           (SELECT PACKING_LIST_NO FROM DESM_MIR_LINE TDML WHERE TDML.MIR_HEADER_ID = DMH.MIR_HEADER_ID AND ROWNUM = 1) AS C_INVOICE_NO,
	           (SELECT SUPPLIER FROM WITH_ZVTS_ITEM_INFO T WHERE T.MIR_HEADER_ID = DMH.MIR_HEADER_ID AND ROWNUM = 1 ) AS C_VENDOR
	      FROM DESM_MIR_HEADER DMH,
	             (SELECT NVL(TO_NUMBER(MAX(DCD.DTL_NAME_KO)), 0) AS OPERATOR
	                FROM DESM_USER_DEFAULT_COUNTRY DUDC,
	                     DESM_CODE_DTL DCD
	               WHERE DUDC.COUNTRY_CODE = DCD.DTL_CODE
	                 AND DCD.DELEGATE_FLAG = 'N'
	                 AND DUDC.USER_AD = #{USER_AD}) CT,
	             DESM_USER DU1,
	             DESM_USER DU2,
	             DESM_USER DU3,
	             DESM_USER DU4
	       WHERE DMH.PREPARED_BY = DU1.USER_AD(+)
	         AND DMH.CHECKED1_BY = DU2.USER_AD(+)
	         AND DMH.CHECKED2_BY = DU3.USER_AD(+)
	         AND DMH.CHECKED3_BY = DU4.USER_AD(+)
		 <if test='STATUS != null and STATUS != ""'>
		   AND DMH.STATUS = #{STATUS}
		 </if>
		 <if test='MIR_NO != null and MIR_NO != ""'>
		   AND UPPER(DMH.MIR_NO) LIKE '%' || UPPER(#{MIR_NO}) || '%'
		 </if>
		 <if test='MIR_NAME != null and MIR_NAME != ""'>
		   AND UPPER(DMH.MIR_NAME) LIKE '%' || UPPER(#{MIR_NAME}) || '%'
		 </if>
		 <if test='RECEIVED_DATE_FROM != null and RECEIVED_DATE_FROM != ""'>
		   AND DMH.RECEIVED_DATE_FROM >= TO_DATE(#{RECEIVED_DATE_FROM}, 'YYYY/MM/DD')
		 </if>
		 <if test='RECEIVED_DATE_TO != null and RECEIVED_DATE_TO != ""'>
		   AND DMH.RECEIVED_DATE_TO <![CDATA[ < ]]> TO_DATE(#{RECEIVED_DATE_TO}, 'YYYY/MM/DD') + 1
		 </if>
		 
		 <if test='INSPECTION_DATE_FROM != null and INSPECTION_DATE_FROM != ""'>
		   AND DMH.INSPECTION_DATE_FROM >= TO_DATE(#{INSPECTION_DATE_FROM}, 'YYYY/MM/DD')
		 </if>
		 <if test='INSPECTION_DATE_TO != null and INSPECTION_DATE_TO != ""'>
		   AND DMH.INSPECTION_DATE_TO <![CDATA[ < ]]> TO_DATE(#{INSPECTION_DATE_TO}, 'YYYY/MM/DD') + 1
		 </if>
		 
		 <if test='CATEGORY != null and CATEGORY != ""'>
		   AND UPPER(DMH.CATEGORY) LIKE '%' || UPPER(#{CATEGORY}) || '%'
		 </if>
		 
		 <if test='INVOICE_NO != null and INVOICE_NO != ""'>
		     AND DMH.MIR_HEADER_ID IN (SELECT DISTINCT T.MIR_HEADER_ID FROM WITH_ZVTS_ITEM_INFO T WHERE T.INVOICE_NUM LIKE '%' || UPPER(#{INVOICE_NO}) || '%')
		 </if>
		 
		 <if test='PACKAGE_NO != null and PACKAGE_NO != ""'>
		     AND DMH.MIR_HEADER_ID IN (SELECT DISTINCT T.MIR_HEADER_ID FROM WITH_ZVTS_ITEM_INFO T WHERE T.PACKAGE_NO LIKE '%' || UPPER(#{PACKAGE_NO}) || '%')
		 </if>
		 
		 <if test='SHIPMENT_NO != null and SHIPMENT_NO != ""'>
		     AND DMH.MIR_HEADER_ID IN (SELECT DISTINCT T.MIR_HEADER_ID FROM WITH_ZVTS_ITEM_INFO T WHERE T.SHIPMENT_NO LIKE '%' || #{SHIPMENT_NO} || '%')
		 </if>
		 
		 <if test='PROJECT_NO != null and PROJECT_NO != ""'>
		   AND DMH.PROJECT_NO = #{PROJECT_NO}
		 </if>
		 
		 <if test='OSDM_YN != null and OSDM_YN != ""'>
		 	AND DECODE(DMH.OSDM_NAME, NULL, 'N', 'Y') = #{OSDM_YN}
		 </if>
		 
		ORDER BY DMH.MIR_HEADER_ID DESC

	</select>
	
	<select id="getIdsmOsSummaryMirList" parameterType="java.util.Map" resultType="java.util.HashMap">
		/* MaterialMapper.xml -> gentIdsmOsSummaryMirList : Package List 조회 */
        SELECT TT.*
		      FROM (SELECT DPM.PACKAGE_NO
			        ,      NVL(DPM.IS_CONFIRM_MATERIAL, 'N') AS IS_CONFIRM_MATERIAL
			        ,      DPM.PACKAGE_LIST_NO
			        ,      DPM.DESCRIPTION
			        ,      DPM.PACKAGE_TYPE
			        ,      TO_CHAR(DPM.L_CM, 'FM999,999,999,999,999') AS L_CM
			        ,      TO_CHAR(DPM.W_CM, 'FM999,999,999,999,999') AS W_CM
			        ,      TO_CHAR(DPM.H_CM, 'FM999,999,999,999,999') AS H_CM
			        ,      TO_CHAR(DPM.VOLUME, 'FM999,999,999,999,990.0') AS VOLUME
			        ,      TO_CHAR(DPM.NET, 'FM999,999,999,999,990.0') AS NET
			        ,      TO_CHAR(DPM.GROSS, 'FM999,999,999,999,990.0') AS GROSS
			        ,      DPM.REMARKS
			        ,      DPM.COUNTRY
			        ,      DPM.TRK_ITEM_NAME
			        ,      DPM.PROJECT_NO
			        ,      DPM.REPORT_SHORT_QTY
			        ,      DPM.REPORT_OVER_QTY
			        ,      DPM.REPORT_DMG_QTY
			        ,      DPM.REPORT_MISSING_QTY
			        ,      CASE WHEN DPM.REPORT_SHORT = 'Y' THEN 1 ELSE 0 END AS REPORT_SHORT
			        ,      CASE WHEN DPM.REPORT_OVER = 'Y' THEN 1 ELSE 0 END AS REPORT_OVER
			        ,      CASE WHEN DPM.REPORT_DMG = 'Y' THEN 1 ELSE 0 END AS REPORT_DMG
			        ,      CASE WHEN DPM.REPORT_MISSING = 'Y' THEN 1 ELSE 0 END AS REPORT_MISSING
			        ,      DPM.REPORT_LOST
			        ,      DPM.REPORT_DESCRIPTION
			        ,      DPM.HAZARDOUS_MATERIAL
			        ,      DPM.QTY
			        ,      DPM.REMARK
			        ,      DPM.VENDOR
			        ,      DPM.OLD_INF_OF_VENDOR
			        ,      TO_CHAR(DPM.RECEIVED_DATE, 'YYYY-MM-DD') AS RECEIVED_DATE
			        ,      DPM.STORAGE_LOCATION
			        ,      DPM.SUB_CONTRACTOR
			        ,      TO_CHAR(DPM.CONFIRM_DATE, 'YYYY/MM/DD') AS CONFIRM_DATE
			        ,      T.SEL_INVOICE_NUM
			        ,      T.ATTRIBUTE3
			        ,      T.ATTRIBUTE9
			        ,      T.ATTRIBUTE10
			        ,      TO_CHAR( DPM.RECEIPT_DATE, 'YYYY/MM/DD') AS RECEIPT_DATE
			        ,      CASE WHEN (SELECT COUNT(*)
			                          FROM DESM_PACKING_DTL DETAIL
			                          WHERE DETAIL.PROJECT_NO = UPPER(#{PROJECT_NO})
			                          AND DETAIL.PACKAGE_NO = DPM.PACKAGE_NO)
			                       = (SELECT COUNT(*)
			                          FROM DESM_PACKING_DTL DETAIL
			                          WHERE DETAIL.PROJECT_NO = UPPER(#{PROJECT_NO})
			                          AND DETAIL.PACKAGE_NO = DPM.PACKAGE_NO
			                          AND NVL(DETAIL.IN_QTY, 0) - NVL(DETAIL.OUT_QTY, 0) + NVL(DETAIL.RETURN_QTY, 0) = 0)
			                     THEN 'CLOSE'
			                     WHEN (SELECT COUNT(*)
			                          FROM DESM_PACKING_DTL DETAIL
			                          WHERE DETAIL.PROJECT_NO = UPPER(#{PROJECT_NO})
			                          AND DETAIL.PACKAGE_NO = DPM.PACKAGE_NO
			                          AND NVL(DETAIL.IN_QTY, 0) - NVL(DETAIL.OUT_QTY, 0) + NVL(DETAIL.RETURN_QTY, 0) = 0) > 0
			                     THEN 'PARTIALLY'
			                     ELSE ''
			               END AS PACKAGE_STATUS
			        ,      (SELECT COUNT(*)
			                FROM DESM_PACKING_DTL DETAIL
			                WHERE DETAIL.PROJECT_NO = UPPER(#{PROJECT_NO})
			                AND DETAIL.PACKAGE_NO = DPM.PACKAGE_NO)
			                || '/' ||
			               (SELECT COUNT(*)
			                FROM DESM_PACKING_DTL DETAIL
			                WHERE DETAIL.PROJECT_NO = UPPER(#{PROJECT_NO})
			                AND DETAIL.PACKAGE_NO = DPM.PACKAGE_NO
			                AND NVL(DETAIL.IN_QTY, 0) - NVL(DETAIL.OUT_QTY, 0) + NVL(DETAIL.RETURN_QTY, 0) = 0) AS OUT_STATUS
			        ,      (SELECT SUM(DETAIL.IN_QTY)
			                FROM DESM_PACKING_DTL DETAIL
			                WHERE DETAIL.PROJECT_NO = UPPER(#{PROJECT_NO})
			                AND DETAIL.PACKAGE_NO = DPM.PACKAGE_NO)
			                || '/' ||
			               (SELECT SUM(NVL(DETAIL.OUT_QTY, 0) - NVL(DETAIL.RETURN_QTY, 0))
			                FROM DESM_PACKING_DTL DETAIL
			                WHERE DETAIL.PROJECT_NO = UPPER(#{PROJECT_NO})
			                AND DETAIL.PACKAGE_NO = DPM.PACKAGE_NO
			                ) AS OUT_STATUS_QTY
			        ,      (SELECT TO_CHAR(MAX(DRO.HANDOVER_DATE), 'YYYY/MM/DD')
			                FROM DESM_PACKING_DTL DETAIL
			                ,    DESM_RSI_LINE DRL
			                ,    DESM_RSI_OUTGOING DRO
			                WHERE DETAIL.PROJECT_NO = UPPER(#{PROJECT_NO})
			                AND DETAIL.PACKAGE_NO = DPM.PACKAGE_NO
			                AND DETAIL.MATERIAL_CODE = DRL.MATERIAL_CODE
			                AND DRL.RSI_LINE_ID = DRO.RSI_LINE_ID
			               ) AS LAST_OUTGOING_DATE
			        ,      ROUND(L_CM * W_CM / 10000, 1) AS SQM
			        ,      TO_CHAR(DPM.LOC_UPDATE_DATE, 'YYYY/MM/DD') AS LOC_UPDATE_DATE
			        ,      DPM.LOC_UPDATED_BY
			        ,      (SELECT SUM(DETAIL.IN_QTY)
			                FROM DESM_PACKING_DTL DETAIL
			                WHERE DETAIL.PROJECT_NO = UPPER(#{PROJECT_NO}) 
			                AND DETAIL.PACKAGE_NO = DPM.PACKAGE_NO) AS TOT_QTY
			        ,      CASE WHEN MRR.MRR_CREATE = 'Y' THEN 'Y' ELSE 'N' END AS IS_MRR_CREATE
			        ,      TO_CHAR(MRR.RECEIVED_DATE, 'YYYY/MM/DD') AS MRR_RECEIVED_DATE
			        ,      MRR.VISUAL_CHECK
			        ,      ROW_NUMBER() OVER(ORDER BY SEL_INVOICE_NUM, DPM.PACKAGE_NO) AS NO
			        FROM (SELECT ZIM.TRK_ITEM_SEQ
			              ,      ZIM.TRK_ITEM_NAME
			              ,      ZIM.TRK_ITEM_GROUP
			              ,      ZIM.PROJECT_ID
			              ,      ZIM.PROJECT_NO
			              ,      ZIM.INVOICE_NUM
			              ,      ZIM.ATTRIBUTE3
			              ,      ZIM.ATTRIBUTE9
			              ,      ZIM.ATTRIBUTE10
			              ,      CASE WHEN DI.CNT = 1 THEN DI.INVOICE_NUM
			                          WHEN DI.CNT > 1 THEN DI.INVOICE_NUM || ' 외 ' || DI.CALC_CNT || '건'
			                     END AS SEL_INVOICE_NUM
			              FROM ZVTS_ITEM_MASTER ZIM
			              ,    PA_PROJECTS_ALL_INT PPA
			              ,    (SELECT ZDI.TRK_ITEM_SEQ
			              ,      COUNT(*) AS CNT
			              ,      COUNT(*) - 1 AS CALC_CNT
			              ,      MAX(ZDI.INVOICE_NUM) AS INVOICE_NUM
			              FROM ZVTS_DESM_INVOICE ZDI
			              GROUP BY ZDI.TRK_ITEM_SEQ) DI
			              WHERE ZIM.PROJECT_ID = PPA.PROJECT_ID
			              AND ZIM.TRK_ITEM_SEQ = DI.TRK_ITEM_SEQ(+)
			              AND ZIM.PROJECT_NO = UPPER(#{PROJECT_NO})
			              START WITH ZIM.TRK_ITEM_GROUP IS NULL
			              CONNECT BY PRIOR ZIM.TRK_ITEM_SEQ = ZIM.TRK_ITEM_GROUP
			             ) T
			        ,    DESM_PACKING_MST DPM
			        ,    (
			                SELECT DRH.PROJECT_NO
			                  , DRL.TRK_ITEM_NAME
			                  , DRL.PACKING_LIST_NO
			                  , DRL.PACKAGE_NO
			                  , DRH.MRR_HEADER_ID
			                  , 'Y' AS MRR_CREATE
			                  , DRL.RECEIVED_DATE
			                  , DRL.VISUAL_CHECK
			                FROM DESM_MRR_HEADER DRH
			                    , DESM_MRR_LINE DRL
			                WHERE DRH.MRR_HEADER_ID = DRL.MRR_HEADER_ID
			                  AND DRH.PROJECT_NO = UPPER(#{PROJECT_NO})
			              ) MRR
			        WHERE T.TRK_ITEM_NAME = DPM.TRK_ITEM_NAME
			        AND T.PROJECT_NO = DPM.PROJECT_NO
			        AND MRR.TRK_ITEM_NAME(+) = DPM.TRK_ITEM_NAME
			        AND MRR.PACKING_LIST_NO(+) = DPM.PACKAGE_LIST_NO
			        AND MRR.PACKAGE_NO(+) = DPM.PACKAGE_NO
			        AND MRR.PROJECT_NO(+) = DPM.PROJECT_NO
			        AND NOT EXISTS (SELECT 1
			                         FROM DESM_MIR_LINE DML,
			                              DESM_MIR_HEADER DMH
			                        WHERE 1=1
			                          AND DMH.MIR_HEADER_ID = DML.MIR_HEADER_ID
			                          AND DMH.PROJECT_NO = DPM.PROJECT_NO
			                          AND DML.TRK_ITEM_NAME = DPM.TRK_ITEM_NAME
			                          AND DML.PACKING_LIST_NO = DPM.PACKAGE_LIST_NO
			                          AND DML.PACKAGE_NO = DPM.PACKAGE_NO)
					<if test='PO_NO != null and PO_NO != ""'>
						AND UPPER(T.SEL_INVOICE_NUM) LIKE '%' || UPPER(#{PO_NO}) || '%'
					</if>
			        <if test='PACKAGE_LIST_NO != null and PACKAGE_LIST_NO !=""'>
			        	AND UPPER(DPM.PACKAGE_LIST_NO) LIKE '%' || UPPER(#{PACKAGE_LIST_NO}) || '%'
			        </if>
			        <if test='PACKAGE_NO != null and PACKAGE_NO !=""'>
			        	AND UPPER(DPM.PACKAGE_NO) LIKE '%' || UPPER(#{PACKAGE_NO}) || '%'
			        </if>
			        <if test='DESCRIPTION != null and DESCRIPTION !=""'>
			        	AND UPPER(DPM.DESCRIPTION) LIKE '%' || UPPER(#{DESCRIPTION}) || '%'
			        </if>
			        <if test='IS_CONFIRM_MATERIAL != null and IS_CONFIRM_MATERIAL !=""'>
			        	AND NVL(DPM.IS_CONFIRM_MATERIAL, 'N') = #{IS_CONFIRM_MATERIAL}
			        </if>
			        -- AND NVL(DPM.IS_CONFIRM_MATERIAL, 'N') = 'Y'
			       	<choose>
			       		<when test='RECEIPTED == "Y"'>
			       		AND DPM.RECEIPT_DATE IS NOT NULL
			       		</when>
			       		<when test='RECEIPTED == "N"'>
			       		AND DPM.RECEIPT_DATE IS NULL
			       		</when>
			       	</choose>
					<if test='START_RECEIPT_DATE != null and START_RECEIPT_DATE != ""'>
					   AND DPM.RECEIPT_DATE >= TO_DATE(#{START_RECEIPT_DATE}, 'YYYY/MM/DD')
					 </if>
					 <if test='END_RECEIPT_DATE != null and END_RECEIPT_DATE != ""'>
					   AND DPM.RECEIPT_DATE <![CDATA[ < ]]> TO_DATE(#{END_RECEIPT_DATE}, 'YYYY/MM/DD') + 1
					 </if>
			        <if test='ATTRIBUTE10 != null and ATTRIBUTE10 !=""'>
			        	AND T.ATTRIBUTE10 = #{ATTRIBUTE10}
			        </if>
			        <if test='REMARK != null and REMARK !=""'>
			        	AND UPPER(DPM.REMARK) LIKE '%' || UPPER(#{REMARK}) || '%'
			        </if>
			        <if test='VENDOR != null and VENDOR !=""'>
			        	AND UPPER(T.ATTRIBUTE3) LIKE '%' || UPPER(#{VENDOR}) || '%'
			        </if>
			        <if test='SEQUENCE != null and SEQUENCE !=""'>
			        	AND T.ATTRIBUTE9 = #{SEQUENCE}
			        </if>
					<if test='LOCATION_LIST != null'>
						AND DPM.STORAGE_LOCATION IN
						<foreach collection="LOCATION_LIST" item="list" separator="," open="(" close=")">
							#{list.LOCATION}
						</foreach>
					</if>
	             ) TT
		  WHERE 1 = 1
        <if test='IS_MRR_CREATE != null and IS_MRR_CREATE !=""'>
        	AND IS_MRR_CREATE = #{IS_MRR_CREATE}
        </if>
        <if test='VISUAL_CHECK != null and VISUAL_CHECK !=""'>
        	AND VISUAL_CHECK = #{VISUAL_CHECK}
        </if>
	    ORDER BY SEL_INVOICE_NUM, PACKAGE_NO
	</select>
	
	<select id="getIdsmOsSummaryMirItemList" parameterType="java.util.Map" resultType="java.util.HashMap">
		/* MaterialMapper.xml -> getIdsmOsSummaryMirItemList : Package Item List 조회 */
		SELECT TT.*
        FROM (SELECT DPD.PACKAGE_LIST_NO,
                     T.ATTRIBUTE3,
                     T.ATTRIBUTE9,
                     T.ATTRIBUTE10,
                     T.SEL_INVOICE_NUM,
                     DPD.PACKAGE_NO,
                     DPD.DESCRIPTION,
                     DPD.DRAWING_NO,
                     DPD.TAG_NO,
                     DPD.MATERIAL,
                     DPD.MATERIAL_CODE,
                     DPD.PACKAGE_TYPE,
                     DPD.TRK_ITEM_NAME,
                     DPD.PROJECT_NO,
                     DPD.LOCATION,
                     --DPD.REPORT_SHORT_QTY,
                     --DPD.REPORT_OVER_QTY,
                     --DPD.REPORT_DMG_QTY,
                     --DPD.REPORT_MISSING_QTY,
                     --DPMGT.TYPE,
                     --DPMGT.CATEGORY,DPMGT.SUB_CATEGORY,DPMGT.COMMENTS,DPMGT.FILE_GRP_CD, NVL((SELECT CASE WHEN COUNT(*) = 0 THEN NULL ELSE COUNT(*) END FROM ESAATTH ATT WHERE ATT.GRP_CD  = DPMGT.FILE_GRP_CD  AND ATT.STS != 'D'),0)  ATTH_CNT,
                     --CASE WHEN DPD.REPORT_SHORT = 'Y' THEN 1 ELSE 0 END AS REPORT_SHORT,
                     --CASE WHEN DPD.REPORT_OVER = 'Y' THEN 1 ELSE 0 END AS REPORT_OVER,
                     --CASE WHEN DPD.REPORT_DMG = 'Y' THEN 1 ELSE 0 END AS REPORT_DMG,
                     --CASE WHEN DPD.REPORT_MISSING = 'Y' THEN 1 ELSE 0 END AS REPORT_MISSING,
                     --TO_CHAR(DPD.GROSS, 'FM999,999,999,999,990.0') AS GROSS,
                     --TO_CHAR(DPD.NET, 'FM999,999,999,999,990.0') AS NET,
                     --TO_CHAR(DPD.RT, 'FM999,999,999,999,990.0') AS RT,
                     --TO_CHAR(DPD.L_CM, 'FM999,999,999,999,999') AS L_CM,
                     --TO_CHAR(DPD.W_CM, 'FM999,999,999,999,999') AS W_CM,
                     --TO_CHAR(DPD.H_CM, 'FM999,999,999,999,999') AS H_CM,
                     --TO_CHAR(DPD.VOLUME, 'FM999,999,999,999,990.0') AS VOLUME,
                     --T.ONSITE_ACTUAL_DATE,
                     DPD.UNIT,
                     --TO_CHAR(DPD.NOS, 'FM999,999,999,999,999') AS NOS,
                     DPD.NOS,
                     DPD.IN_QTY AS IN_QTY,
                     --DPD.RSI_QTY AS RSI_QTY,
                     --TO_CHAR(DPD.OUT_QTY, 'FM999,999,999,999,999') AS OUT_QTY,
                     --NVL(DPD.RSI_QTY, 0) - NVL(DPD.OUT_QTY, 0) - NVL(DPD.RSI_CANCEL_QTY, 0) AS BALANCE_QTY,
                     --NVL(DPD.IN_QTY, 0) - NVL(DPD.OUT_QTY, 0) + NVL(DPD.RETURN_QTY, 0) AS REMAIN_QTY,
                     --DPD.RSI_QTY AS RSI_QTY_NUM,
                     --DPD.OUT_QTY AS OUT_QTY_NUM,
                     --NVL(DPD.RSI_QTY, 0) - NVL(DPD.OUT_QTY, 0) - NVL(DPD.RSI_CANCEL_QTY, 0) AS BALANCE_QTY_NUM,
                     --NVL(DPD.IN_QTY, 0) - NVL(DPD.OUT_QTY, 0)  + NVL(DPD.RETURN_QTY, 0) AS REMAIN_QTY_NUM,
                     --DPD.MRF_QTY,
                     --DPD.RSI_CANCEL_QTY,
                     --DPD.RETURN_QTY,
                     --NVL(DPD.MRF_QTY, 0) - NVL(DPD.RSI_CANCEL_QTY, 0) - NVL(DPD.RETURN_QTY, 0) AS MRF_BALANCE_QTY,
                     DPD.REMARKS,
                     DPM.IS_CONFIRM_MATERIAL,
                     DPD.ITEM_SIZE
              FROM (SELECT ZIM.TRK_ITEM_SEQ,
                           ZIM.TRK_ITEM_NAME,
                           ZIM.TRK_ITEM_GROUP,
                           ZIM.ORGANIZATION_ID,
                           ZIM.PROJECT_ID,
                           ZIM.PROJECT_NO,
                           PPA.NAME as PROJECT_NAME,
                           ZIM.TASK_ID,
                           ZIM.TASK_NUMBER,
                           ZIM.BATCH,
                           ZIM.OFFSHORE,
                           ZIM.PRIMAVERA_ID,
                           TO_CHAR(ZIM.MPS_PLAN_DATE, 'YYYY/MM/DD') as MPS_PLAN_DATE,
                           TO_CHAR(ZIM.MPS_EXPECTED_DATE, 'YYYY/MM/DD') as MPS_EXPECTED_DATE,
                           TO_CHAR(ZIM.MPS_ACTUAL_DATE, 'YYYY/MM/DD') as MPS_ACTUAL_DATE,
                           ZIM.PURCHASE_DURATION,
                           TO_CHAR(ZIM.PO_PLAN_DATE, 'YYYY/MM/DD') as PO_PLAN_DATE,
                           TO_CHAR(ZIM.PO_EXPECTED_DATE, 'YYYY/MM/DD') as PO_EXPECTED_DATE,
                           TO_CHAR(ZIM.PO_ATCUAL_DATE, 'YYYY/MM/DD') as PO_ATCUAL_DATE,
                           ZIM.MAKE_DURATION,
                           ZIM.PROGRESS,
                           TO_CHAR(ZIM.CARGO_PLAN_DATE, 'YYYY/MM/DD') as CARGO_PLAN_DATE,
                           TO_CHAR(ZIM.CARGO_EXPECTED_DATE, 'YYYY/MM/DD') as CARGO_EXPECTED_DATE,
                           TO_CHAR(ZIM.CARGO_PROMISED_DATE, 'YYYY/MM/DD') as CARGO_PROMISED_DATE,
                           TO_CHAR(ZIM.CARGO_ACTUAL_DATE, 'YYYY/MM/DD') as CARGO_ACTUAL_DATE,
                           ZIM.SHIPMENT_DURATION,
                           TO_CHAR(ZIM.FOB_PLAN_DATE, 'YYYY/MM/DD') as FOB_PLAN_DATE,
                           TO_CHAR(ZIM.FOB_EXPECTED_DATE, 'YYYY/MM/DD') as FOB_EXPECTED_DATE,
                           TO_CHAR(ZIM.FOB_ACTUAL_DATE, 'YYYY/MM/DD') as FOB_ACTUAL_DATE,
                           ZIM.TRANS_DURATION,
                           TO_CHAR(ZIM.ONSITE_PLAN_DATE, 'YYYY/MM/DD') as ONSITE_PLAN_DATE,
                           TO_CHAR(ZIM.ONSITE_EXPECTED_DATE, 'YYYY/MM/DD') as ONSITE_EXPECTED_DATE,
                           TO_CHAR(ZIM.ONSITE_ACTUAL_DATE, 'YYYY/MM/DD') as ONSITE_ACTUAL_DATE,
                           ZIM.PAYMENT_MILESTONE,
                           ZIM.TRK_ITEM_DEFAULT,
                           ZIM.INVOICE_NUM,
                           ZIM.ATTRIBUTE1,
                           ZIM.ATTRIBUTE2,
                           ZIM.ATTRIBUTE3,
                           ZIM.ATTRIBUTE4,
                           ZIM.ATTRIBUTE5,
                           ZIM.ATTRIBUTE6,
                           ZIM.ATTRIBUTE7,
                           ZIM.ATTRIBUTE8,
                           ZIM.ATTRIBUTE9,
                           ZIM.ATTRIBUTE10,
                           CASE WHEN DI.CNT = 1 THEN DI.INVOICE_NUM
                                WHEN DI.CNT > 1 THEN DI.INVOICE_NUM || ' 외 ' || DI.CALC_CNT || '건' END AS SEL_INVOICE_NUM
                    FROM ZVTS_ITEM_MASTER ZIM,
                         PA_PROJECTS_ALL_INT PPA,
                         (SELECT ZDI.TRK_ITEM_SEQ,
                                 COUNT(*) AS CNT,
                                 COUNT(*) - 1 AS CALC_CNT,
                                 MAX(ZDI.INVOICE_NUM) AS INVOICE_NUM
                          FROM ZVTS_DESM_INVOICE ZDI
                          GROUP BY ZDI.TRK_ITEM_SEQ) DI
                    WHERE ZIM.PROJECT_ID = PPA.PROJECT_ID
                    AND ZIM.TRK_ITEM_SEQ = DI.TRK_ITEM_SEQ(+)
                    AND ZIM.PROJECT_NO = UPPER(#{PROJECT_NO})
                    START WITH ZIM.TRK_ITEM_GROUP IS NULL
                    CONNECT BY PRIOR ZIM.TRK_ITEM_SEQ = ZIM.TRK_ITEM_GROUP) T,
                    DESM_PACKING_DTL DPD,
                    DESM_PACKING_MST DPM,
                    DESM_PACKING_MGT DPMGT
              WHERE T.TRK_ITEM_NAME = DPD.TRK_ITEM_NAME
              AND T.PROJECT_NO = DPD.PROJECT_NO
              AND DPD.PROJECT_NO = DPM.PROJECT_NO
              AND DPD.TRK_ITEM_NAME = DPM.TRK_ITEM_NAME
              AND DPD.PACKAGE_NO = DPM.PACKAGE_NO
              AND DPD.PROJECT_NO = DPMGT.PROJECT_NO(+)
              AND DPD.MATERIAL_CODE = DPMGT.MATERIAL_CODE(+)
              <if test='ATTRIBUTE10 != null and ATTRIBUTE10 != ""'>
                  AND T.ATTRIBUTE10  = #{ATTRIBUTE10}
              </if>
             ) TT
        WHERE 1 = 1
        AND PACKAGE_NO IN
              <foreach collection="PACKAGE_NO_LIST" item="PACKAGE_NO"  open="(" close=")" separator=",">
                  #{PACKAGE_NO}
              </foreach>
        <choose>
		  <when test='TRK_ITEM_NAME_LIST.size != 0'>
		    AND TRK_ITEM_NAME IN
		      <foreach collection="TRK_ITEM_NAME_LIST" item="TRK_ITEM_NAME" open="(" close=")" separator=",">
		           #{TRK_ITEM_NAME}
		      </foreach>
		  </when>
		  <otherwise>
		  </otherwise>
		</choose>
        ORDER BY MATERIAL_CODE, PACKAGE_LIST_NO, TRK_ITEM_NAME, PACKAGE_NO, DRAWING_NO, TAG_NO
	</select>
	
	<select id="getDesmMirHeaderData" parameterType="java.util.Map" resultType="java.util.HashMap">
		SELECT 'MIR' || TO_CHAR(SYSDATE,'YYYY') || LPAD(MIR_NO_NUM, 6, '0') AS MIR_NO,
		       SEQ_DESM_MIR_HEADER.NEXTVAL AS MIR_HEADER_ID
		  FROM (SELECT CASE WHEN MAX(MIR_NO) IS NULL THEN 1
		                    ELSE TO_NUMBER(SUBSTR(MAX(MIR_NO), -6)) + 1 END AS MIR_NO_NUM
		          FROM DESM_MIR_HEADER
		         WHERE MIR_NO LIKE 'MIR' || TO_CHAR(SYSDATE,'YYYY') || '%')
	</select>
	
	<update id="saveDesmMirLineSave" parameterType="java.util.Map">
		MERGE INTO DESM_MIR_LINE
		USING DUAL
		ON (MIR_LINE_ID = #{MIR_LINE_ID})
		WHEN MATCHED THEN
		     UPDATE SET
		            TRK_ITEM_NAME = #{TRK_ITEM_NAME},
		            PACKING_LIST_NO = #{PACKING_LIST_NO},
		            PO_NO = #{PO_NO},
		            PACKAGE_NO = #{PACKAGE_NO},
		            MATERIAL_CODE = #{MATERIAL_CODE},
		            DESCRIPTION = #{DESCRIPTION},
		            DRAWING_NO = #{DRAWING_NO},
		            TAG_NO = #{TAG_NO},
		            NOS = #{NOS},
		            IN_QTY = #{IN_QTY},
		            INSPECTION_RESULT = #{INSPECTION_RESULT},
		            RECEIVED_QTY = #{RECEIVED_QTY},
		            OSDM_OVER_QTY = #{OSDM_OVER_QTY},
		            OSDM_SHORT_QTY = #{OSDM_SHORT_QTY},
		            OSDM_DAMAGE_QTY = #{OSDM_DAMAGE_QTY},
		            OSDM_MISSING_QTY = #{OSDM_MISSING_QTY},
		            REQ_CHG_QTY = #{REQ_CHG_QTY},
		            
		            REMARKS = #{REMARKS},
		            ATTACH_GRP_CD = #{ATTACH_GRP_CD},
		            FILE_PATH = #{FILE_PATH},		            
		            LAST_UPDATED_BY = #{USER_AD},
		            LAST_UPDATE_DATE = SYSDATE
		WHEN NOT MATCHED THEN
		     INSERT
		     (MIR_HEADER_ID
		     ,MIR_LINE_ID
		     ,TRK_ITEM_NAME
		     ,PACKING_LIST_NO
		     ,PO_NO
		     ,PACKAGE_NO
		     ,MATERIAL_CODE
		     ,DESCRIPTION
		     ,DRAWING_NO
		     ,TAG_NO
		     ,NOS
		     ,IN_QTY
		     
		     ,INSPECTION_RESULT
		     ,RECEIVED_QTY
		     ,OSDM_OVER_QTY
		     ,OSDM_SHORT_QTY
		     ,OSDM_DAMAGE_QTY
		     ,OSDM_MISSING_QTY
		     ,REQ_CHG_QTY
		     
		     ,REMARKS
		     ,ATTACH_GRP_CD
		     ,FILE_PATH		     
		     ,CREATED_BY
		     ,CREATION_DATE
		     ,LAST_UPDATED_BY
		     ,LAST_UPDATE_DATE)
		     VALUES
		     (#{MIR_HEADER_ID}
		     ,SEQ_DESM_MIR_LINE.NEXTVAL
		     ,#{TRK_ITEM_NAME}
		     ,#{PACKING_LIST_NO}
		     ,#{PO_NO}
		     ,#{PACKAGE_NO}
		     ,#{MATERIAL_CODE}
		     ,#{DESCRIPTION}
		     ,#{DRAWING_NO}	
		     ,#{TAG_NO}	
		     ,#{NOS}		     
		     ,#{IN_QTY}
		     
		     ,#{INSPECTION_RESULT}
		     ,#{RECEIVED_QTY}
		     ,#{OSDM_OVER_QTY}
		     ,#{OSDM_SHORT_QTY}
		     ,#{OSDM_DAMAGE_QTY}
		     ,#{OSDM_MISSING_QTY}
		     ,#{REQ_CHG_QTY}
		     
		     ,#{REMARKS}		     
		     ,#{ATTACH_GRP_CD}
		     ,#{FILE_PATH}
		     ,#{USER_AD}
		     ,SYSDATE
		     ,#{USER_AD}
		     ,SYSDATE)
	</update>

	<update id="saveDesmMirHeaderSave" parameterType="java.util.Map">
		MERGE INTO DESM_MIR_HEADER
		USING DUAL
		ON (MIR_HEADER_ID = #{MIR_HEADER_ID})
		WHEN MATCHED THEN
		     UPDATE SET
		         <if test='PREPARED_BY != null and PREPARED_BY != ""'>
		            PREPARED_BY = #{PREPARED_BY},
		            <if test='STATUS != null and STATUS == "Pre-Checked1"'>
		            PREPARED_DATE = SYSDATE,
		            </if>
		         </if>
		         <if test='CHECKED1_BY != null and CHECKED1_BY != ""'>
		            CHECKED1_BY = #{CHECKED1_BY},
		            <if test='STATUS != null and STATUS == "Pre-Checked2"'>
		            CHECKED1_DATE = SYSDATE,
		            </if>
		         </if>
		         <if test='CHECKED2_BY != null and CHECKED2_BY != ""'>
		            CHECKED2_BY = #{CHECKED2_BY},
		            <if test='STATUS != null and STATUS == "Pre-Checked3"'>
		            CHECKED2_DATE = SYSDATE,
		            </if>
		         </if>
		         <if test='CHECKED3_BY != null and CHECKED3_BY != ""'>
		            CHECKED3_BY = #{CHECKED3_BY},
		            <if test='STATUS != null and STATUS == "Checked"'>
		            CHECKED3_DATE = SYSDATE,
		            </if>
		         </if>
		         	MIR_NAME = #{MIR_NAME},
		            STATUS = #{STATUS},
		            RECEIVED_DATE_FROM = #{RECEIVED_DATE_FROM},
		            RECEIVED_DATE_TO = #{RECEIVED_DATE_TO},
		            INSPECTION_DATE_FROM = #{INSPECTION_DATE_FROM},
		            INSPECTION_DATE_TO = #{INSPECTION_DATE_TO},
		            INSPECTION_LOCATION = #{INSPECTION_LOCATION},
		            RESULT_OF_INSPECTION = #{RESULT_OF_INSPECTION},
		            ATTACH_GRP_CD = #{ATTACH_GRP_CD},
		            REMARKS = #{REMARKS},
		            OSDM_NAME = #{OSDM_NAME},
		            CLIENT_COMMENTS = #{CLIENT_COMMENTS},
		            CATEGORY = #{CATEGORY},
		            LAST_UPDATED_BY = #{USER_AD},
		            LAST_UPDATE_DATE = SYSDATE
		WHEN NOT MATCHED THEN
		     INSERT
		     (MIR_HEADER_ID
		     ,MIR_NO
	       <if test='PREPARED_BY != null and PREPARED_BY != ""'>
	         ,PREPARED_BY
             <if test='STATUS != null and STATUS == "Pre-Checked1"'>
	         ,PREPARED_DATE
             </if>
	       </if>
	       <if test='CHECKED1_BY != null and CHECKED1_BY != ""'>
	         ,CHECKED1_BY
             <if test='STATUS != null and STATUS == "Pre-Checked2"'>
	         ,CHECKED1_DATE
             </if>
	       </if>
	       <if test='CHECKED2_BY != null and CHECKED2_BY != ""'>
	         ,CHECKED2_BY
             <if test='STATUS != null and STATUS == "Pre-Checked3"'>
	         ,CHECKED2_DATE
             </if>
	       </if>
	       <if test='CHECKED3_BY != null and CHECKED3_BY != ""'>
	         ,CHECKED3_BY
             <if test='STATUS != null and STATUS == "Checked"'>
	         ,CHECKED3_DATE
             </if>
	       </if>
	         ,MIR_NAME
		     ,STATUS
		     ,PROJECT_NO
		     ,RECEIVED_DATE_FROM
		     ,RECEIVED_DATE_TO
		     ,INSPECTION_DATE_FROM
		     ,INSPECTION_DATE_TO
		     ,INSPECTION_LOCATION
		     ,RESULT_OF_INSPECTION
		     ,ATTACH_GRP_CD
		     ,REMARKS
		     ,OSDM_NAME
		     ,CLIENT_COMMENTS
		     ,CATEGORY
		     ,CREATED_BY
		     ,CREATION_DATE
		     ,LAST_UPDATED_BY
		     ,LAST_UPDATE_DATE)
		     VALUES
		     (#{MIR_HEADER_ID}
		     ,#{MIR_NO}
	       <if test='PREPARED_BY != null and PREPARED_BY != ""'>
	         ,#{PREPARED_BY}
             <if test='STATUS != null and STATUS == "Pre-Checked1"'>
	         ,SYSDATE
             </if>
	       </if>
	       <if test='CHECKED1_BY != null and CHECKED1_BY != ""'>
	         ,#{CHECKED1_BY}
             <if test='STATUS != null and STATUS == "Pre-Checked2"'>
	         ,SYSDATE
             </if>
	       </if>
	       <if test='CHECKED2_BY != null and CHECKED2_BY != ""'>
	         ,#{CHECKED2_BY}
             <if test='STATUS != null and STATUS == "Pre-Checked3"'>
	         ,SYSDATE
             </if>
	       </if>
	       <if test='CHECKED3_BY != null and CHECKED3_BY != ""'>
	         ,#{CHECKED3_BY}
             <if test='STATUS != null and STATUS == "Checked"'>
	         ,SYSDATE
             </if>
	       </if>
	         ,#{MIR_NAME}
		     ,#{STATUS}
		     ,#{PROJECT_NO}
		     ,#{RECEIVED_DATE_FROM}
		     ,#{RECEIVED_DATE_TO}
		     ,#{INSPECTION_DATE_FROM}
		     ,#{INSPECTION_DATE_TO}
		     ,#{INSPECTION_LOCATION}
		     ,#{RESULT_OF_INSPECTION}
		     ,#{ATTACH_GRP_CD}
		     ,#{REMARKS}
		     ,#{OSDM_NAME}
		     ,#{CLIENT_COMMENTS}
		     ,#{CATEGORY}
		     ,#{USER_AD}
		     ,SYSDATE
		     ,#{USER_AD}
		     ,SYSDATE)
	</update>
	
	<update id="saveDesmMirHeaderSave_backup" parameterType="java.util.Map">
		MERGE INTO DESM_MIR_HEADER
		USING DUAL
		ON (MIR_HEADER_ID = #{MIR_HEADER_ID})
		WHEN MATCHED THEN
		     UPDATE SET
		         <if test='PREPARED_BY != null and PREPARED_BY != ""'>
		            PREPARED_BY = #{PREPARED_BY},
		            <if test='STATUS != null and STATUS == "Pre-Checked"'>
		            PREPARED_DATE = SYSDATE,
		            </if>
		         </if>
		         <if test='CHECKED1_BY != null and CHECKED1_BY != ""'>
		            CHECKED1_BY = #{CHECKED1_BY},
		            <if test='STATUS != null and STATUS == "Checked1"'>
		            CHECKED1_DATE = SYSDATE,
		            </if>
		         </if>
		         <if test='CHECKED2_BY != null and CHECKED2_BY != ""'>
		            CHECKED2_BY = #{CHECKED2_BY},
		            <if test='STATUS != null and STATUS == "Checked2"'>
		            CHECKED2_DATE = SYSDATE,
		            </if>
		         </if>
		         <if test='CHECKED3_BY != null and CHECKED3_BY != ""'>
		            CHECKED3_BY = #{CHECKED3_BY},
		            <if test='STATUS != null and STATUS == "Checked"'>
		            CHECKED3_DATE = SYSDATE,
		            </if>
		         </if>
		         <if test='OSDM_NAME != null and OSDM_NAME == ""'>
	            	OSDM_NAME = #{OSDM_NAME},
	             </if>
	             <if test='CLIENT_COMMENTS != null and CLIENT_COMMENTS == ""'>
	             	CLIENT_COMMENTS = #{CLIENT_COMMENTS},
	             </if>
		         	MIR_NAME = #{MIR_NAME},
		            STATUS = #{STATUS},
		            RECEIVED_DATE_FROM = #{RECEIVED_DATE_FROM},
		            RECEIVED_DATE_TO = #{RECEIVED_DATE_TO},
		            INSPECTION_DATE_FROM = #{INSPECTION_DATE_FROM},
		            INSPECTION_DATE_TO = #{INSPECTION_DATE_TO},
		            INSPECTION_LOCATION = #{INSPECTION_LOCATION},
		            RESULT_OF_INSPECTION = #{RESULT_OF_INSPECTION},
		            ATTACH_GRP_CD = #{ATTACH_GRP_CD},
		            REMARKS = #{REMARKS},
		            CATEGORY = #{CATEGORY},
		            LAST_UPDATED_BY = #{USER_AD},
		            LAST_UPDATE_DATE = SYSDATE
		WHEN NOT MATCHED THEN
		     INSERT
		     (MIR_HEADER_ID
		     ,MIR_NO
	       <if test='PREPARED_BY != null and PREPARED_BY != ""'>
	         ,PREPARED_BY
             <if test='STATUS != null and STATUS == "Pre-Checked"'>
	         ,PREPARED_DATE
             </if>
	       </if>
	       <if test='CHECKED1_BY != null and CHECKED1_BY != ""'>
	         ,CHECKED1_BY
             <if test='STATUS != null and STATUS == "Checked1"'>
	         ,CHECKED1_DATE
             </if>
	       </if>
	       <if test='CHECKED2_BY != null and CHECKED2_BY != ""'>
	         ,CHECKED2_BY
             <if test='STATUS != null and STATUS == "Checked2"'>
	         ,CHECKED2_DATE
             </if>
	       </if>
	       <if test='CHECKED3_BY != null and CHECKED3_BY != ""'>
	         ,CHECKED3_BY
             <if test='STATUS != null and STATUS == "Checked"'>
	         ,CHECKED3_DATE
             </if>
	       </if>
	       <if test='OSDM_NAME != null and OSDM_NAME == ""'>
	       	  ,OSDM_NAME
           </if>
           <if test='CLIENT_COMMENTS != null and CLIENT_COMMENTS == ""'>
           	  ,CLIENT_COMMENTS
           </if>
	         ,MIR_NAME
		     ,STATUS
		     ,PROJECT_NO
		     ,RECEIVED_DATE_FROM
		     ,RECEIVED_DATE_TO
		     ,INSPECTION_DATE_FROM
		     ,INSPECTION_DATE_TO
		     ,INSPECTION_LOCATION
		     ,RESULT_OF_INSPECTION
		     ,ATTACH_GRP_CD
		     ,REMARKS
		     ,CATEGORY
		     ,CREATED_BY
		     ,CREATION_DATE
		     ,LAST_UPDATED_BY
		     ,LAST_UPDATE_DATE)
		     VALUES
		     (#{MIR_HEADER_ID}
		     ,#{MIR_NO}
	       <if test='PREPARED_BY != null and PREPARED_BY != ""'>
	         ,#{PREPARED_BY}
             <if test='STATUS != null and STATUS == "Pre-Checked"'>
	         ,SYSDATE
             </if>
	       </if>
	       <if test='CHECKED1_BY != null and CHECKED1_BY != ""'>
	         ,#{CHECKED1_BY}
             <if test='STATUS != null and STATUS == "Checked1"'>
	         ,SYSDATE
             </if>
	       </if>
	       <if test='CHECKED2_BY != null and CHECKED2_BY != ""'>
	         ,#{CHECKED2_BY}
             <if test='STATUS != null and STATUS == "Checked2"'>
	         ,SYSDATE
             </if>
	       </if>
	       <if test='CHECKED3_BY != null and CHECKED3_BY != ""'>
	         ,#{CHECKED3_BY}
             <if test='STATUS != null and STATUS == "Checked"'>
	         ,SYSDATE
             </if>
	       </if>
	       <if test='OSDM_NAME != null and OSDM_NAME == ""'>
          	 ,#{OSDM_NAME}
           </if>
           <if test='CLIENT_COMMENTS != null and CLIENT_COMMENTS == ""'>
           	 ,#{CLIENT_COMMENTS}
           </if>
	         ,#{MIR_NAME}
		     ,#{STATUS}
		     ,#{PROJECT_NO}
		     ,#{RECEIVED_DATE_FROM}
		     ,#{RECEIVED_DATE_TO}
		     ,#{INSPECTION_DATE_FROM}
		     ,#{INSPECTION_DATE_TO}
		     ,#{INSPECTION_LOCATION}
		     ,#{RESULT_OF_INSPECTION}
		     ,#{ATTACH_GRP_CD}
		     ,#{REMARKS}
		     ,#{CATEGORY}
		     ,#{USER_AD}
		     ,SYSDATE
		     ,#{USER_AD}
		     ,SYSDATE)
	</update>
	
	<update id="saveDesmMirHeaderProjectSave" parameterType="java.util.Map">
	    MERGE INTO DESM_MIR_HEADER DRH
	    USING (SELECT DISTINCT DPM.PROJECT_NO, DRL.RSI_HEADER_ID
	             FROM DESM_PACKING_MST DPM,
	                  DESM_PACKING_DTL DPD,
	                  DESM_MIR_LINE DRL
	            WHERE DPM.PROJECT_NO = DPD.PROJECT_NO
	              AND DPM.TRK_ITEM_NAME = DPD.TRK_ITEM_NAME
	              AND DPM.PACKAGE_NO = DPD.PACKAGE_NO
	              AND DPD.MATERIAL_CODE = DRL.MATERIAL_CODE
	              AND DPM.IS_CONFIRM_MATERIAL = 'Y'
	              AND DRL.RSI_HEADER_ID = #{MIR_HEADER_ID}) T
	    ON (DRH.RSI_HEADER_ID = T.RSI_HEADER_ID)
	    WHEN MATCHED THEN
	         UPDATE SET DRH.PROJECT_NO = T.PROJECT_NO
	</update>
	
	<select id="getDesmMirHeaderList" parameterType="java.util.Map" resultType="java.util.HashMap">
		SELECT DRH.PROJECT_NO,
		       DRH.MIR_HEADER_ID,
		       DRH.MIR_NO,
		       DRH.MIR_NAME,
	           DRH.PROJECT_NO,
	           DRH.STATUS,
	           TO_CHAR(DRH.RECEIVED_DATE_FROM, 'YYYY/MM/DD') AS RECEIVED_DATE_FROM,
	           TO_CHAR(DRH.RECEIVED_DATE_TO, 'YYYY/MM/DD') AS RECEIVED_DATE_TO,
	           TO_CHAR(DRH.INSPECTION_DATE_FROM, 'YYYY/MM/DD') AS INSPECTION_DATE_FROM,
	           TO_CHAR(DRH.INSPECTION_DATE_TO, 'YYYY/MM/DD') AS INSPECTION_DATE_TO,
	           DRH.INSPECTION_LOCATION,
	           DRH.RESULT_OF_INSPECTION,
		       DRH.REMARKS,
		       DRH.CLIENT_COMMENTS,
		       DRH.OSDM_NAME,
		       DRH.CATEGORY,
		       DRH.ATTACH_GRP_CD,
		       TO_CHAR(DRH.PREPARED_DATE + CT.OPERATOR / (24 * 60), 'YYYY/MM/DD HH24:MI:SS') AS PREPARED_DATE,
		       DRH.PREPARED_BY,
		       DU1.USER_NAME AS PREPARED_BY_NAME,
		       TO_CHAR(DRH.CHECKED1_DATE + CT.OPERATOR / (24 * 60), 'YYYY/MM/DD HH24:MI:SS') AS CHECKED1_DATE,
		       DRH.CHECKED1_BY,
		       DU2.USER_NAME AS CHECKED1_BY_NAME,
		       TO_CHAR(DRH.CHECKED2_DATE + CT.OPERATOR / (24 * 60), 'YYYY/MM/DD HH24:MI:SS') AS CHECKED2_DATE,
		       DRH.CHECKED2_BY,
		       DU2.USER_NAME AS CHECKED2_BY_NAME,
		       TO_CHAR(DRH.CHECKED3_DATE + CT.OPERATOR / (24 * 60), 'YYYY/MM/DD HH24:MI:SS') AS CHECKED3_DATE,
		       DRH.CHECKED3_BY,
		       DU2.USER_NAME AS CHECKED3_BY_NAME,
		       DRH.ATTACH_GRP_CD
		  FROM DESM_MIR_HEADER DRH,
		       (SELECT NVL(TO_NUMBER(MAX(DCD.DTL_NAME_KO)), 0) AS OPERATOR
		          FROM DESM_USER_DEFAULT_COUNTRY DUDC,
		               DESM_CODE_DTL DCD
		         WHERE DUDC.COUNTRY_CODE = DCD.DTL_CODE
		           AND DCD.DELEGATE_FLAG = 'N'
		           AND DUDC.USER_AD = #{USER_AD}) CT,
		       DESM_USER DU1,
		       DESM_USER DU2,
		       DESM_USER DU3,
		       DESM_USER DU4
		 WHERE DRH.PREPARED_BY = DU1.USER_AD(+)
		   AND DRH.CHECKED1_BY = DU2.USER_AD(+)
		   AND DRH.CHECKED2_BY = DU3.USER_AD(+)
		   AND DRH.CHECKED3_BY = DU4.USER_AD(+)
		   AND DRH.MIR_HEADER_ID = #{MIR_HEADER_ID}
	</select>
	
	<select id="getDesmMirLineList" parameterType="java.util.Map" resultType="java.util.HashMap">
		SELECT ROW_NUMBER() OVER(ORDER BY DRL.MIR_LINE_ID) AS NO,
		       DPM.PROJECT_NO,
			   DRL.MIR_HEADER_ID,
		       DRL.MIR_LINE_ID,
		       DRL.TRK_ITEM_NAME,
		       DRL.PACKING_LIST_NO AS PACKAGE_LIST_NO,
		       DRL.PO_NO,
		       DRL.PACKAGE_NO,
		       DRL.MATERIAL_CODE,
		       DRL.DESCRIPTION,
		       --DRL.SHIPMENT_NO AS ATTRIBUTE10,
		       DRL.DRAWING_NO,
		       DRL.TAG_NO ,
		       DRL.NOS ,
		       DRL.IN_QTY,
		       DRL.RECEIVED_QTY ,
		       DRL.OSDM_OVER_QTY ,
		       DRL.OSDM_SHORT_QTY ,
		       DRL.OSDM_DAMAGE_QTY ,
		       DRL.OSDM_MISSING_QTY,
		       DRL.REQ_CHG_QTY ,
		       DRL.REMARKS ,
		       DRL.ATTACH_GRP_CD ,
		       DRL.FILE_PATH ,
		       NVL((SELECT CASE WHEN COUNT(*) = 0 THEN NULL ELSE COUNT(*) END 
				       FROM ESAATTH ATT 
				      WHERE ATT.GRP_CD  = DRL.ATTACH_GRP_CD 
				      AND ATT.STS != 'D'),0)  ATTH_CNT,
		       (SELECT ZDI.INVOICE_NUM
				  FROM ZVTS_DESM_INVOICE ZDI,
				       ZVTS_ITEM_MASTER ZIM
				WHERE 1=1
				  AND ZDI.PROJECT_NO = ZIM.PROJECT_NO
				  AND ZDI.TRK_ITEM_SEQ = ZIM.TRK_ITEM_SEQ
				  AND ZIM.TRK_ITEM_NAME = DRL.TRK_ITEM_NAME
				  AND ZIM.PROJECT_NO = DPM.PROJECT_NO) AS SEL_INVOICE_NUM ,
				  
              CASE WHEN (SELECT COUNT(*)
                           FROM  ESAATTH TH
                           WHERE TH.SYS_ID = 'EMRO'
                             AND TH.GRP_CD = DRL.ATTACH_GRP_CD
                             AND TH.STS   <![CDATA[ <> ]]>   'D' ) = 0 THEN
                           'N'
                   ELSE 'Y'
                   END AS PIC_YN,
               ZIM.ATTRIBUTE10,
               ZIM.ATTRIBUTE3 AS SUPPLIER,
               DRL.INSPECTION_RESULT ,
		       DRL.VISUAL_CHECK ,
	           TO_CHAR(DRL.VISUAL_CHECK_DATE, 'YYYY/MM/DD') AS VISUAL_CHECK_DATE,
	           DPD.LOCATION
		  FROM DESM_PACKING_MST DPM,
		       DESM_MIR_LINE DRL,
		       DESM_MIR_HEADER DML,
		       ZVTS_ITEM_MASTER ZIM,
		       DESM_PACKING_DTL DPD
		 WHERE DPM.PROJECT_NO = DML.PROJECT_NO
		   AND DPM.TRK_ITEM_NAME = DRL.TRK_ITEM_NAME
		   AND DPM.PACKAGE_NO = DRL.PACKAGE_NO
		   AND DRL.MIR_HEADER_ID = DML.MIR_HEADER_ID
       	   AND DRL.TRK_ITEM_NAME = ZIM.TRK_ITEM_NAME
       	   AND DPM.PROJECT_NO = ZIM.PROJECT_NO
		   --AND DPM.IS_CONFIRM_MATERIAL = 'Y'
		   AND DRL.MATERIAL_CODE = DPD.MATERIAL_CODE
		   AND DRL.MIR_HEADER_ID = #{MIR_HEADER_ID}
	</select>
	
	<delete id="deleteDesmMirMst" parameterType="java.util.Map">
		DELETE
		  FROM DESM_MIR_HEADER
		 WHERE MIR_HEADER_ID = #{MIR_HEADER_ID}
	</delete>
	
	<delete id="deleteDesmMirDtlAll" parameterType="java.util.Map">
		DELETE
		  FROM DESM_MIR_LINE
		 WHERE MIR_HEADER_ID = #{MIR_HEADER_ID}
	</delete>
	
	<delete id="deleteDesmMirDtl" parameterType="java.util.Map">
		DELETE FROM DESM_MIR_LINE
		 WHERE MIR_LINE_ID = #{MIR_LINE_ID}
	</delete>
	
	<update id="saveDesmMirReject" parameterType="java.util.Map">
		UPDATE DESM_MIR_HEADER
		   SET STATUS = 'Rejected',
		   	   --PREPARED_BY = '',
		   	   PREPARED_DATE = '',
		   	   --CHECKED_A_BY = '',
		   	   CHECKED1_DATE = '',
		   	   --CHECKED_B_BY = '',
		   	   CHECKED2_DATE = '',
		   	   --CHECKED_C_BY = '',
		   	   CHECKED3_DATE = ''
			 <if test='REMARKS != null and REMARKS != ""'>
			   ,REMARKS = #{REMARKS}
			 </if>
		 WHERE MIR_HEADER_ID = #{MIR_HEADER_ID}
	</update>
	
	<select id="getMailMirMstData" parameterType="java.util.Map" resultType="java.util.HashMap">
		SELECT DRH.MIR_NO,
		       DRH.MIR_NAME,
		       DRH.CATEGORY,
		       DRH.OSDM_NAME,
		       DRH.INSPECTION_LOCATION,
		       DRH.RESULT_OF_INSPECTION,
		       DRH.LAST_UPDATED_BY,
		       DRH.STATUS,
		       TO_CHAR(DRH.RECEIVED_DATE_FROM, 'YYYY-MM-DD') AS RECEIVED_DATE_FROM,
		       TO_CHAR(DRH.RECEIVED_DATE_TO, 'YYYY-MM-DD') AS RECEIVED_DATE_TO,
		       TO_CHAR(DRH.INSPECTION_DATE_FROM, 'YYYY-MM-DD') AS INSPECTION_DATE_FROM,
		       TO_CHAR(DRH.INSPECTION_DATE_TO, 'YYYY-MM-DD') AS INSPECTION_DATE_TO,
		       DRH.PREPARED_BY,
		       TO_CHAR(DRH.PREPARED_DATE, 'YYYY-MM-DD') AS PREPARED_DATE,
		       DRH.REMARKS,
		       DRH.CLIENT_COMMENTS,
	           PPAI.SEGMENT1 AS PROJECT_NO,
	           PPAI.NAME AS PROJECT_NAME,
		       (SELECT COUNT(*) FROM DESM_MIR_LINE DRL WHERE DRL.MIR_HEADER_ID = DRH.MIR_HEADER_ID) AS COUNT_MIR_LINE
		  FROM DESM_MIR_HEADER DRH,
		  	   PA_PROJECTS_ALL_INT PPAI
		 WHERE DRH.PROJECT_NO = PPAI.SEGMENT1
		   AND DRH.MIR_HEADER_ID = #{MIR_HEADER_ID}
	</select>
	
	<select id="getMailMirDtlData" parameterType="java.util.Map" resultType="java.util.HashMap">
		SELECT *
      FROM (SELECT   DRL.PACKAGE_NO,
                     DRL.DESCRIPTION,
                     (SELECT ZDI.INVOICE_NUM
                      FROM ZVTS_DESM_INVOICE ZDI,
                           ZVTS_ITEM_MASTER ZIM
                      WHERE 1=1
                        AND ZDI.PROJECT_NO = ZIM.PROJECT_NO
                        AND ZDI.TRK_ITEM_SEQ = ZIM.TRK_ITEM_SEQ
                        AND ZIM.TRK_ITEM_NAME = DRL.TRK_ITEM_NAME
                        AND ZIM.PROJECT_NO = DPM.PROJECT_NO) AS INVOICE_NO,
                     DRL.TAG_NO,
				     DRL.DRAWING_NO,
				     DRL.IN_QTY,
				     DRL.INSPECTION_RESULT,
				     DRL.RECEIVED_QTY,
				     DRL.OSDM_OVER_QTY,
				     DRL.OSDM_SHORT_QTY,
				     DRL.OSDM_DAMAGE_QTY,
				     DRL.OSDM_MISSING_QTY,
                     CASE WHEN (SELECT COUNT(*)
                                  FROM  ESAATTH TH
                                  WHERE TH.SYS_ID = 'EMRO'
                                    AND TH.GRP_CD = DRL.ATTACH_GRP_CD
                                    AND TH.STS   <![CDATA[ <> ]]>   'D' ) = 0 THEN
                                  'N'
                          ELSE 'Y'
                          END AS PIC_YN ,   
                                    
                     ROW_NUMBER() OVER(ORDER BY DRL.MIR_LINE_ID) AS NO
                FROM ZVTS_ITEM_MASTER ZIM,
                     DESM_PACKING_MST DPM,
                     DESM_MIR_LINE DRL,
                     DESM_MIR_HEADER DRH
               WHERE ZIM.TRK_ITEM_NAME = DPM.TRK_ITEM_NAME
                 AND ZIM.PROJECT_NO = DRH.PROJECT_NO
                 AND DPM.PACKAGE_NO = DRL.PACKAGE_NO
                 AND DPM.IS_CONFIRM_MATERIAL = 'Y'
                 
                 AND DRL.TRK_ITEM_NAME = DPM.TRK_ITEM_NAME
                 AND DRL.PACKING_LIST_NO = DPM.PACKAGE_LIST_NO
                 AND DRL.PACKAGE_NO = DPM.PACKAGE_NO
                 
                 AND DRL.MIR_HEADER_ID = DRH.MIR_HEADER_ID
                 AND DRH.PROJECT_NO = ZIM.PROJECT_NO
                 AND DRH.PROJECT_NO = DPM.PROJECT_NO
		         AND DRL.MIR_HEADER_ID = #{MIR_HEADER_ID})
		 WHERE NO <![CDATA[ <= ]]> 10
	</select>
	
	<select id="getMailMirReceiver" parameterType="java.util.Map" resultType="java.util.HashMap">
		SELECT DU.USER_AD,
               NVL(DU.MAIL, ZE.ZEMAIL) AS EMAIL       
        FROM DESM_USER DU
        ,    ZVTS_EMP ZE
        ,    DESM_USER_ROLE DUR
        ,    DESM_USER_DEFAULT_PROJECT DUDP
        ,    (SELECT CASE DMH.STATUS WHEN 'Pre-Checked1' THEN DMH.CHECKED1_BY
                                     WHEN 'Pre-Checked2' THEN DMH.CHECKED2_BY
                                     WHEN 'Pre-Checked3' THEN DMH.CHECKED3_BY
              END AS USER_AD
              FROM DESM_MIR_HEADER DMH
              WHERE DMH.MIR_HEADER_ID = #{MIR_HEADER_ID}
              AND DMH.STATUS NOT IN ('Incomplete', 'Checked', 'Rejected')
             ) MIR_RECEIVER
        WHERE 1=1
        AND DU.USER_AD = ZE.AD_USER_ID(+)
        AND ZE.ZSTATUS_TYPE(+) = '재직'
        AND (DU.MAIL IS NOT NULL OR ZE.ZEMAIL IS NOT NULL)
        AND DUR.USER_AD = DU.USER_AD
        AND DUDP.USER_AD = DU.USER_AD
        AND DUR.ROLE_SEQ = (SELECT ROLE_SEQ FROM DESM_USER_ROLE T WHERE T.USER_AD = MIR_RECEIVER.USER_AD)
        AND DUDP.PROJECT_CODE = (SELECT A.PROJECT_NO FROM DESM_MIR_HEADER A WHERE A.MIR_HEADER_ID = #{MIR_HEADER_ID})
        UNION
        SELECT DU.USER_AD,
               NVL(DU.MAIL, ZE.ZEMAIL) AS EMAIL       
        FROM DESM_USER DU
        ,    ZVTS_EMP ZE
        ,    (SELECT CASE DMH.STATUS WHEN 'Rejected' THEN DMH.PREPARED_BY
                                     WHEN 'Checked' THEN DMH.PREPARED_BY
              END AS USER_AD
              FROM DESM_MIR_HEADER DMH
              WHERE DMH.MIR_HEADER_ID = #{MIR_HEADER_ID}
              AND DMH.STATUS IN ('Rejected', 'Checked')
             ) MIR_RECEIVER
        WHERE 1=1
        AND DU.USER_AD = ZE.AD_USER_ID(+)
        AND ZE.ZSTATUS_TYPE(+) = '재직'
        AND DU.USER_AD = MIR_RECEIVER.USER_AD
	</select>
	
	<select id="getMailMirUpdateReceiver" parameterType="java.util.Map" resultType="java.util.HashMap">
		SELECT DU.USER_AD,
               NVL(DU.MAIL, ZE.ZEMAIL) AS EMAIL       
        FROM DESM_USER DU
        ,    ZVTS_EMP ZE
        ,    DESM_USER_ROLE DUR
        ,    DESM_USER_PROJECT_ALL DUPA
        ,    DESM_USER_PROJECT DUP
        ,    (SELECT DMH.CHECKED1_BY AS USER_AD
              FROM DESM_MIR_HEADER DMH
              WHERE DMH.MIR_HEADER_ID = #{MIR_HEADER_ID}
             ) MIR_RECEIVER
        WHERE 1=1
        AND DU.USER_AD = ZE.AD_USER_ID(+)
        AND ZE.ZSTATUS_TYPE(+) = '재직'
        AND (DU.MAIL IS NOT NULL OR ZE.ZEMAIL IS NOT NULL)
        AND DUR.ROLE_SEQ = (SELECT ROLE_SEQ FROM DESM_USER_ROLE T WHERE T.USER_AD = MIR_RECEIVER.USER_AD)
        AND (DUPA.USER_AD IS NOT NULL OR DUP.PROJECT_CODE = (SELECT A.PROJECT_NO FROM DESM_MIR_HEADER A WHERE A.MIR_HEADER_ID = #{MIR_HEADER_ID}))
        AND DUR.USER_AD = DUPA.USER_AD(+)
        AND DUR.USER_AD = DUP.USER_AD(+)
        AND DUR.USER_AD = DU.USER_AD
        UNION
        SELECT DU.USER_AD,
               NVL(DU.MAIL, ZE.ZEMAIL) AS EMAIL       
        FROM DESM_USER DU
        ,    ZVTS_EMP ZE
        ,    DESM_USER_ROLE DUR
        ,    DESM_USER_PROJECT_ALL DUPA
        ,    DESM_USER_PROJECT DUP
        ,    (SELECT DMH.CHECKED2_BY AS USER_AD
              FROM DESM_MIR_HEADER DMH
              WHERE DMH.MIR_HEADER_ID = #{MIR_HEADER_ID}
             ) MIR_RECEIVER
        WHERE 1=1
        AND DU.USER_AD = ZE.AD_USER_ID(+)
        AND ZE.ZSTATUS_TYPE(+) = '재직'
        AND (DU.MAIL IS NOT NULL OR ZE.ZEMAIL IS NOT NULL)
        AND DUR.ROLE_SEQ = (SELECT ROLE_SEQ FROM DESM_USER_ROLE T WHERE T.USER_AD = MIR_RECEIVER.USER_AD)
        AND (DUPA.USER_AD IS NOT NULL OR DUP.PROJECT_CODE = (SELECT A.PROJECT_NO FROM DESM_MIR_HEADER A WHERE A.MIR_HEADER_ID = #{MIR_HEADER_ID}))
        AND DUR.USER_AD = DUPA.USER_AD(+)
        AND DUR.USER_AD = DUP.USER_AD(+)
        AND DUR.USER_AD = DU.USER_AD
        UNION
        SELECT DU.USER_AD,
               NVL(DU.MAIL, ZE.ZEMAIL) AS EMAIL       
        FROM DESM_USER DU
        ,    ZVTS_EMP ZE
        ,    DESM_USER_ROLE DUR
        ,    DESM_USER_PROJECT_ALL DUPA
        ,    DESM_USER_PROJECT DUP
        ,    (SELECT DMH.CHECKED3_BY AS USER_AD
              FROM DESM_MIR_HEADER DMH
              WHERE DMH.MIR_HEADER_ID = #{MIR_HEADER_ID}
             ) MIR_RECEIVER
        WHERE 1=1
        AND DU.USER_AD = ZE.AD_USER_ID(+)
        AND ZE.ZSTATUS_TYPE(+) = '재직'
        AND (DU.MAIL IS NOT NULL OR ZE.ZEMAIL IS NOT NULL)
        AND DUR.ROLE_SEQ = (SELECT ROLE_SEQ FROM DESM_USER_ROLE T WHERE T.USER_AD = MIR_RECEIVER.USER_AD)
        AND (DUPA.USER_AD IS NOT NULL OR DUP.PROJECT_CODE = (SELECT A.PROJECT_NO FROM DESM_MIR_HEADER A WHERE A.MIR_HEADER_ID = #{MIR_HEADER_ID}))
        AND DUR.USER_AD = DUPA.USER_AD(+)
        AND DUR.USER_AD = DUP.USER_AD(+)
        AND DUR.USER_AD = DU.USER_AD
        UNION
        SELECT DU.USER_AD,
               NVL(DU.MAIL, ZE.ZEMAIL) AS EMAIL       
        FROM DESM_USER DU
        ,    ZVTS_EMP ZE
        ,    (SELECT CASE DMH.STATUS WHEN 'Rejected' THEN DMH.PREPARED_BY
                                     WHEN 'Checked' THEN DMH.PREPARED_BY
              END AS USER_AD
              ,      DMH.STATUS
              FROM DESM_MIR_HEADER DMH
              WHERE DMH.MIR_HEADER_ID = #{MIR_HEADER_ID}
              AND DMH.STATUS IN ('Rejected', 'Checked')
             ) MIR_RECEIVER
        WHERE 1=1
        AND DU.USER_AD = ZE.AD_USER_ID(+)
        AND ZE.ZSTATUS_TYPE(+) = '재직'
        AND DU.USER_AD = MIR_RECEIVER.USER_AD
	</select>
	
	<select id="getDeleteDesmMirList" parameterType="java.util.Map" resultType="java.util.HashMap">
		SELECT DMLS.MIR_LINE_ID
		  FROM DESM_MIR_HEADER DMH,
		       DESM_MIR_LINE DMLS
		 WHERE DMH.MIR_HEADER_ID = DMLS.MIR_HEADER_ID
		   AND DMH.MIR_HEADER_ID = #{MIR_HEADER_ID}
	</select>
	
	<update id="updateMirClientComments" parameterType="java.util.Map">
		UPDATE DESM_MIR_HEADER
		SET CLIENT_COMMENTS = #{CLIENT_COMMENTS}
		,   LAST_UPDATED_BY = #{USER_AD}
		,   LAST_UPDATE_DATE = SYSDATE
		WHERE MIR_HEADER_ID = #{MIR_HEADER_ID}
	</update>
	
	<update id="updateMirLineRemarks" parameterType="java.util.Map">
		UPDATE DESM_MIR_LINE
		SET REMARKS = #{REMARKS}
		,   LAST_UPDATED_BY = #{USER_AD}
		,   LAST_UPDATE_DATE = SYSDATE
		WHERE MIR_LINE_ID = #{MIR_LINE_ID}
	</update>
	
	<update id="saveMirLineConfirmMaterial" parameterType="java.util.Map">
		UPDATE DESM_PACKING_MST
        SET IS_CONFIRM_MATERIAL = 'Y'
        ,   CONFIRM_DATE = SYSDATE
        WHERE PROJECT_NO = #{PROJECT_NO}
        AND TRK_ITEM_NAME || PACKAGE_NO IN (SELECT DISTINCT TRK_ITEM_NAME || PACKAGE_NO 
                                            FROM DESM_MIR_LINE DRL
                                            WHERE DRL.MIR_HEADER_ID = #{MIR_HEADER_ID}
                                           )
	</update>
	
</mapper>